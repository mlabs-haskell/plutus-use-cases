Build profile: -w ghc-8.10.4.20210212 -O1
In order, the following will be built (use -v for more details):
 - mlabs-plutus-use-cases-0.1.0.0 (lib) (file src/Mlabs/System/Console/Utils.hs changed)
Preprocessing library for mlabs-plutus-use-cases-0.1.0.0..
GHCi, version 8.10.4.20210212: https://www.haskell.org/ghc/  :? for help
[19 of 48] Compiling Mlabs.Lending.Contract.StateMachine ( src/Mlabs/Lending/Contract/StateMachine.hs, /home/mike/dev/mlabs/plutus-use-cases/mlabs/dist-newstyle/build/x86_64-linux/ghc-8.10.4.20210212/mlabs-plutus-use-cases-0.1.0.0/build/Mlabs/Lending/Contract/StateMachine.o )
GHC Core to PLC plugin: E042:Error: Unsupported feature: Kind: forall k. k -> k -> GHC.Types.Constraint
Context: Compiling kind: forall k. k -> k -> GHC.Types.Constraint
Context: Compiling expr: GHC.Types.Eq#
Context: Compiling expr: GHC.Types.Eq# @ *
Context: Compiling expr: GHC.Types.Eq#
                           @ *
                           @ (PlutusTx.AssocMap.Map
                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
Context: Compiling expr: GHC.Types.Eq#
                           @ *
                           @ (PlutusTx.AssocMap.Map
                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                           @ (PlutusTx.AssocMap.Map
                                Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
Context: Compiling expr: GHC.Types.Eq#
                           @ *
                           @ (PlutusTx.AssocMap.Map
                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                           @ (PlutusTx.AssocMap.Map
                                Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
                           @~ (<PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.AssetClass
                                  Mlabs.Lending.Logic.Types.Wallet>_N
                               :: PlutusTx.AssocMap.Map
                                    Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet
                                  ~ PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
Context: Compiling expr: let {
                           $d~ [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet
                                GHC.Types.~ PlutusTx.AssocMap.Map
                                              Plutus.V1.Ledger.Value.AssetClass
                                              Mlabs.Lending.Logic.Types.Wallet
                           [LclId]
                           $d~
                             = GHC.Types.Eq#
                                 @ *
                                 @ (PlutusTx.AssocMap.Map
                                      Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
                                 @~ (<PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.AssetClass
                                        Mlabs.Lending.Logic.Types.Wallet>_N
                                     :: PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet
                                        ~ PlutusTx.AssocMap.Map
                                            Plutus.V1.Ledger.Value.AssetClass
                                            Mlabs.Lending.Logic.Types.Wallet) } in
                         let {
                           updateUserHealth
                             :: GHC.Integer.Type.Integer
                                -> (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                           [LclId, Arity=2]
                           updateUserHealth
                             = \ (currentTime [Occ=OnceL] :: GHC.Integer.Type.Integer)
                                 (ds [Occ=Once!]
                                    :: (Mlabs.Emulator.Types.UserId,
                                        Mlabs.Lending.Logic.Types.User)) ->
                                 case ds of { (uid, user) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   $dMonad3
                                   @ [(Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)]
                                   @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                   (let {
                                      ds1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                      [LclId]
                                      ds1 = 0 } in
                                    case GHC.Types.eq_sel
                                           @ *
                                           @ (PlutusTx.AssocMap.Map
                                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                           @ (PlutusTx.AssocMap.Map
                                                Plutus.V1.Ledger.Value.AssetClass
                                                Mlabs.Lending.Logic.Types.Wallet)
                                           $d~
                                    of co
                                    { __DEFAULT ->
                                    case user of
                                    { Mlabs.Lending.Logic.Types.User ds2 [Occ=Once] _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                    PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                      @ (Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                      @ Plutus.V1.Ledger.Value.AssetClass
                                      @ (Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)
                                      (Mlabs.Control.Monad.State.$fApplicativeStateT
                                         @ Mlabs.Lending.Logic.Types.LendingPool)
                                      (\ (asset :: Plutus.V1.Ledger.Value.AssetClass) ->
                                         let {
                                           ds5 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  PlutusTx.Ratio.Rational
                                           [LclId]
                                           ds5 = Mlabs.Lending.Logic.State.getHealth 0 asset user } in
                                         (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (ds5
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Ratio.Rational)
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     (PlutusTx.Ratio.Rational,
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   x
                                            of {
                                              Data.Either.Left c1 [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  c1;
                                              Data.Either.Right a1 [Occ=Once!] ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                   ((asset, v), st1)
                                                   })
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Plutus.V1.Ledger.Value.AssetClass,
                                                            PlutusTx.Ratio.Rational)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Plutus.V1.Ledger.Value.AssetClass,
                                                              PlutusTx.Ratio.Rational),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Plutus.V1.Ledger.Value.AssetClass,
                                                          PlutusTx.Ratio.Rational))))
                                      (PlutusTx.Functor.$fFunctor[]_$cfmap
                                         @ (Plutus.V1.Ledger.Value.AssetClass,
                                            Mlabs.Lending.Logic.Types.Wallet)
                                         @ Plutus.V1.Ledger.Value.AssetClass
                                         (\ (ds5 [Occ=Once!]
                                               :: (Plutus.V1.Ledger.Value.AssetClass,
                                                   Mlabs.Lending.Logic.Types.Wallet)) ->
                                            case ds5 of { (k1 [Occ=Once], _ [Occ=Dead]) -> k1 })
                                         (PlutusTx.List.foldr
                                            @ (Plutus.V1.Ledger.Value.AssetClass,
                                               Mlabs.Lending.Logic.Types.Wallet)
                                            @ [(Plutus.V1.Ledger.Value.AssetClass,
                                                Mlabs.Lending.Logic.Types.Wallet)]
                                            (\ (e :: (Plutus.V1.Ledger.Value.AssetClass,
                                                      Mlabs.Lending.Logic.Types.Wallet))
                                               (xs [Occ=Once*, OS=OneShot]
                                                  :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                       Mlabs.Lending.Logic.Types.Wallet)]) ->
                                               case PlutusTx.Builtins.Internal.ifThenElse
                                                      @ GHC.Types.Bool
                                                      (PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                                         (case e of { (_ [Occ=Dead], b1 [Occ=Once!]) ->
                                                          case b1 of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds8
                                                          }
                                                          })
                                                         ds1)
                                                      GHC.Types.False
                                                      GHC.Types.True
                                               of {
                                                 GHC.Types.False -> xs;
                                                 GHC.Types.True ->
                                                   GHC.Types.:
                                                     @ (Plutus.V1.Ledger.Value.AssetClass,
                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                     e
                                                     xs
                                               })
                                            (GHC.Types.[]
                                               @ (Plutus.V1.Ledger.Value.AssetClass,
                                                  Mlabs.Lending.Logic.Types.Wallet))
                                            (ds2
                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                         <Plutus.V1.Ledger.Value.AssetClass>_R
                                                         <Mlabs.Lending.Logic.Types.Wallet>_R
                                                     :: GHC.Types.Coercible
                                                          (PlutusTx.AssocMap.Map
                                                             Plutus.V1.Ledger.Value.AssetClass
                                                             Mlabs.Lending.Logic.Types.Wallet)
                                                          [(Plutus.V1.Ledger.Value.AssetClass,
                                                            Mlabs.Lending.Logic.Types.Wallet)]))))
                                    }
                                    })
                                   (\ (health
                                         :: [(Plutus.V1.Ledger.Value.AssetClass,
                                              PlutusTx.Ratio.Rational)]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad3
                                        @ ()
                                        @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                        (Mlabs.Data.List.mapM_
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           @ (Mlabs.Emulator.Types.Coin,
                                              PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                           $dMonad3
                                           (\ (ds1 [Occ=Once!]
                                                 :: (Mlabs.Emulator.Types.Coin,
                                                     PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)) ->
                                              case ds1 of { (asset, health1) ->
                                              let {
                                                y [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                [LclId]
                                                y = 1 } in
                                              let {
                                                y1 :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                [LclId]
                                                y1
                                                  = PlutusTx.Ratio.:%
                                                      @ GHC.Integer.Type.Integer
                                                      y
                                                      PlutusTx.Ratio.fromInteger1 } in
                                              join {
                                                $j [Occ=Once*T[0]] :: Mlabs.Lending.Logic.State.St ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Mlabs.Lending.Logic.State.modifyHealthReport
                                                      (let {
                                                         key [Occ=OnceL]
                                                           :: Mlabs.Lending.Logic.Types.BadBorrow
                                                         [LclId]
                                                         key
                                                           = Mlabs.Lending.Logic.Types.$WBadBorrow
                                                               uid asset } in
                                                       \ (ds2 [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Lending.Logic.Types.BadBorrow
                                                                 PlutusTx.Ratio.Rational) ->
                                                         letrec {
                                                           go [Occ=LoopBreaker]
                                                             :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                  PlutusTx.Ratio.Rational)]
                                                                -> [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)]
                                                           [LclId, Arity=1]
                                                           go
                                                             = \ (ds3 [Occ=Once!]
                                                                    :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                         PlutusTx.Ratio.Rational)]) ->
                                                                 case ds3 of {
                                                                   [] ->
                                                                     GHC.Types.[]
                                                                       @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational);
                                                                   : ds4 [Occ=Once!] rest [Occ=Once*] ->
                                                                     case ds4 of { (k1, v1 [Occ=Once]) ->
                                                                     case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                            k1 key
                                                                     of {
                                                                       GHC.Types.False ->
                                                                         GHC.Types.:
                                                                           @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                              PlutusTx.Ratio.Rational)
                                                                           (k1, v1)
                                                                           (go rest);
                                                                       GHC.Types.True -> rest
                                                                     }
                                                                     }
                                                                 }; } in
                                                         (go
                                                            (ds2
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                         <PlutusTx.Ratio.Rational>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Lending.Logic.Types.BadBorrow
                                                                             PlutusTx.Ratio.Rational)
                                                                          [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                            PlutusTx.Ratio.Rational)])))
                                                         `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                          <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                          <PlutusTx.Ratio.Rational>_R)
                                                                 :: GHC.Types.Coercible
                                                                      [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                        PlutusTx.Ratio.Rational)]
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))) } in
                                              case PlutusTx.Ratio.$fOrdRatio1 health1 y1 of {
                                                GHC.Types.False ->
                                                  case PlutusTx.Ratio.$fOrdRatio_$c<= health1 y1 of {
                                                    GHC.Types.False -> jump $j;
                                                    GHC.Types.True ->
                                                      Mlabs.Lending.Logic.State.modifyHealthReport
                                                        (PlutusTx.AssocMap.insert
                                                           @ Mlabs.Lending.Logic.Types.BadBorrow
                                                           @ (PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                                           (Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                            `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                             <Mlabs.Lending.Logic.Types.BadBorrow>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> GHC.Types.Bool)
                                                                         (PlutusTx.Eq.Eq
                                                                            Mlabs.Lending.Logic.Types.BadBorrow)))
                                                           (Mlabs.Lending.Logic.Types.$WBadBorrow uid asset)
                                                           health1)
                                                  };
                                                GHC.Types.True -> jump $j
                                              }
                                              })
                                           health)
                                        (let {
                                           a1 [Occ=OnceL] :: Mlabs.Lending.Logic.Types.User
                                           [LclId]
                                           a1
                                             = case user of
                                               { Mlabs.Lending.Logic.Types.User ds1 [Occ=Once] _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                               Mlabs.Lending.Logic.Types.$WUser
                                                 ds1
                                                 currentTime
                                                 (health
                                                  `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                   <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                   <PlutusTx.Ratio.Rational>_R)
                                                          :: GHC.Types.Coercible
                                                               [(Plutus.V1.Ledger.Value.AssetClass,
                                                                 PlutusTx.Ratio.Rational)]
                                                               (PlutusTx.AssocMap.Map
                                                                  Plutus.V1.Ledger.Value.AssetClass
                                                                  PlutusTx.Ratio.Rational)))
                                               } } in
                                         let {
                                           a2 [Occ=OnceL]
                                             :: (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                           [LclId]
                                           a2 = (uid, a1) } in
                                         (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            Data.Either.Right
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ ((Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User),
                                                 Mlabs.Lending.Logic.Types.LendingPool)
                                              (a2, st1))
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)))))
                                 } } in
                         let {
                           $dMonad4
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad4
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           withHealthCheck [Occ=Once*!]
                             :: GHC.Integer.Type.Integer
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                           [LclId, Arity=2]
                           withHealthCheck
                             = \ (time :: GHC.Integer.Type.Integer)
                                 (act [Occ=Once]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   Mlabs.Lending.Logic.React.qReact1
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   act
                                   (\ (res [Occ=Once] :: [Mlabs.Emulator.Blockchain.Resp]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        Mlabs.Lending.Logic.React.qReact1
                                        @ ()
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (GHC.Base.>>=
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [(Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)]
                                           @ ()
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              Mlabs.Lending.Logic.React.qReact1
                                              @ [(GHC.Integer.Type.Integer,
                                                  (Mlabs.Emulator.Types.UserId,
                                                   Mlabs.Lending.Logic.Types.User))]
                                              @ [(Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User)]
                                              (let {
                                                 f [Occ=OnceL]
                                                   :: (Mlabs.Emulator.Types.UserId,
                                                       Mlabs.Lending.Logic.Types.User)
                                                      -> (GHC.Integer.Type.Integer,
                                                          (Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User))
                                                 [LclId, Arity=1]
                                                 f = \ (ds [Occ=Once!]
                                                          :: (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)) ->
                                                       case ds of { (uid [Occ=Once], user) ->
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          (case GHC.Types.eq_sel
                                                                  @ *
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ GHC.Integer.Type.Integer
                                                                  Mlabs.Lending.Logic.React.react3
                                                           of co
                                                           { __DEFAULT ->
                                                           case user of
                                                           { Mlabs.Lending.Logic.Types.User _ [Occ=Dead]
                                                                                            ds2 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                           ds2
                                                           }
                                                           })
                                                          time,
                                                        (uid, user))
                                                       } } in
                                               let {
                                                 ds [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User)
                                                 [LclId]
                                                 ds
                                                   = Control.Monad.State.Class.gets
                                                       @ Mlabs.Lending.Logic.Types.LendingPool
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       @ (PlutusTx.AssocMap.Map
                                                            Mlabs.Emulator.Types.UserId
                                                            Mlabs.Lending.Logic.Types.User)
                                                       Mlabs.Lending.Logic.React.react2
                                                       Mlabs.Lending.Logic.Types.$sel:lp'users:LendingPool } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Emulator.Types.UserId
                                                                           Mlabs.Lending.Logic.Types.User))
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Emulator.Types.UserId
                                                                              Mlabs.Lending.Logic.Types.User,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                         (PlutusTx.Functor.$fFunctor[]_$cfmap
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User)
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            f
                                                            (v
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Emulator.Types.UserId>_R
                                                                         <Mlabs.Lending.Logic.Types.User>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Emulator.Types.UserId
                                                                             Mlabs.Lending.Logic.Types.User)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])),
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <[(GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User))]>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  ([(GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User))],
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               [(GHC.Integer.Type.Integer,
                                                                 (Mlabs.Emulator.Types.UserId,
                                                                  Mlabs.Lending.Logic.Types.User))])))
                                              (\ (us [Occ=Once]
                                                    :: [(GHC.Integer.Type.Integer,
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User))]) ->
                                                 let {
                                                   a1 [Occ=OnceL]
                                                     :: [(Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   a1
                                                     = PlutusTx.Functor.$fFunctor[]_$cfmap
                                                         @ (GHC.Integer.Type.Integer,
                                                            (Mlabs.Emulator.Types.UserId,
                                                             Mlabs.Lending.Logic.Types.User))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (PlutusTx.Prelude.snd
                                                            @ GHC.Integer.Type.Integer
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User))
                                                         (Mlabs.Data.List.take
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            userUpdateSpan
                                                            (PlutusTx.List.map
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User)))
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User))
                                                               (PlutusTx.Prelude.snd
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User)))
                                                               (Mlabs.Data.List.sortBy
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (GHC.Integer.Type.Integer,
                                                                      (Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)))
                                                                  (\ (x [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User))))
                                                                     (y [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User)))) ->
                                                                     PlutusTx.Ord.$fOrdInteger_$ccompare
                                                                       (case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        })
                                                                       (case y of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        }))
                                                                  (PlutusTx.List.map
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User))
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (GHC.Integer.Type.Integer,
                                                                         (Mlabs.Emulator.Types.UserId,
                                                                          Mlabs.Lending.Logic.Types.User)))
                                                                     (\ (x :: (GHC.Integer.Type.Integer,
                                                                               (Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User))) ->
                                                                        case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        case a2 of y [Occ=Once]
                                                                        { __DEFAULT ->
                                                                        (y, x)
                                                                        }
                                                                        })
                                                                     us)))) } in
                                                 (\ (st1 [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ([(Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User)],
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (a1, st1))
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <[(Mlabs.Emulator.Types.UserId,
                                                                     Mlabs.Lending.Logic.Types.User)]>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    ([(Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)],
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 [(Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User)]))))
                                           (\ (us [Occ=Once]
                                                 :: [(Mlabs.Emulator.Types.UserId,
                                                      Mlabs.Lending.Logic.Types.User)]) ->
                                              GHC.Base.>>=
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                Mlabs.Lending.Logic.React.qReact1
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.UserId
                                                     Mlabs.Lending.Logic.Types.User)
                                                @ ()
                                                (let {
                                                   ds [Occ=OnceL]
                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          [(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   ds
                                                     = PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                            @ Mlabs.Lending.Logic.Types.LendingPool)
                                                         (updateUserHealth time)
                                                         us } in
                                                 (\ (x [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    case (ds
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <[(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)]>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([(Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User)],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           x
                                                    of {
                                                      Data.Either.Left c1 [Occ=Once] ->
                                                        Data.Either.Left
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          c1;
                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                           (v
                                                            `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                             <Mlabs.Emulator.Types.UserId>_R
                                                                             <Mlabs.Lending.Logic.Types.User>_R)
                                                                    :: GHC.Types.Coercible
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User)]
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            Mlabs.Lending.Logic.Types.User)),
                                                            st1)
                                                           })
                                                    })
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Emulator.Types.UserId
                                                                     Mlabs.Lending.Logic.Types.User>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    (PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User,
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 (PlutusTx.AssocMap.Map
                                                                    Mlabs.Emulator.Types.UserId
                                                                    Mlabs.Lending.Logic.Types.User))))
                                                (\ (newUsers [Occ=OnceL]
                                                      :: PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User) ->
                                                   Mlabs.Lending.Logic.State.modifyUsers
                                                     ((\ (users [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User) ->
                                                         PlutusTx.Functor.$fFunctor[]_$cfmap
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              PlutusTx.These.These
                                                                Mlabs.Lending.Logic.Types.User
                                                                Mlabs.Lending.Logic.Types.User)
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           (\ (ds [Occ=Once!]
                                                                 :: (Mlabs.Emulator.Types.UserId,
                                                                     PlutusTx.These.These
                                                                       Mlabs.Lending.Logic.Types.User
                                                                       Mlabs.Lending.Logic.Types.User)) ->
                                                              case ds of { (c1 [Occ=Once], a1 [Occ=Once!]) ->
                                                              (c1,
                                                               case a1 of {
                                                                 PlutusTx.These.This a2 [Occ=Once] -> a2;
                                                                 PlutusTx.These.That b1 [Occ=Once] -> b1;
                                                                 PlutusTx.These.These a2 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                   a2
                                                               })
                                                              })
                                                           ((PlutusTx.AssocMap.union
                                                               @ Mlabs.Emulator.Types.UserId
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               (Mlabs.Emulator.Types.$fEqUserId_$c==
                                                                `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                                 <Mlabs.Emulator.Types.UserId>_N)
                                                                        :: GHC.Types.Coercible
                                                                             (Mlabs.Emulator.Types.UserId
                                                                              -> Mlabs.Emulator.Types.UserId
                                                                              -> GHC.Types.Bool)
                                                                             (PlutusTx.Eq.Eq
                                                                                Mlabs.Emulator.Types.UserId)))
                                                               newUsers
                                                               users)
                                                            `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                        <Mlabs.Emulator.Types.UserId>_R
                                                                        <PlutusTx.These.These
                                                                           Mlabs.Lending.Logic.Types.User
                                                                           Mlabs.Lending.Logic.Types.User>_R
                                                                    :: GHC.Types.Coercible
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            (PlutusTx.These.These
                                                                               Mlabs.Lending.Logic.Types.User
                                                                               Mlabs.Lending.Logic.Types.User))
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           PlutusTx.These.These
                                                                             Mlabs.Lending.Logic.Types.User
                                                                             Mlabs.Lending.Logic.Types.User)])))
                                                      `cast` (<PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User>_R
                                                              ->_R Sym (PlutusTx.AssocMap.N:Map[0]
                                                                            <Mlabs.Emulator.Types.UserId>_R
                                                                            <Mlabs.Lending.Logic.Types.User>_R)
                                                              :: GHC.Types.Coercible
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> [(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)])
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> PlutusTx.AssocMap.Map
                                                                         Mlabs.Emulator.Types.UserId
                                                                         Mlabs.Lending.Logic.Types.User))))))
                                        (GHC.Base.return
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           res)) } in
                         let {
                           $dMonadError3 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError3
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           calcAmountFor [Occ=OnceL*!]
                             :: forall b.
                                PlutusTx.Ord.Ord b =>
                                (Mlabs.Lending.Logic.Types.Wallet -> b)
                                -> Mlabs.Emulator.Types.UserId
                                -> Mlabs.Emulator.Types.Coin
                                -> b
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     b
                           [LclId, Arity=1]
                           calcAmountFor
                             = \ (@ b) ($dOrd [Occ=OnceL] :: PlutusTx.Ord.Ord b) ->
                                 let {
                                   $dMonad5 [Occ=OnceL]
                                     :: GHC.Base.Monad
                                          (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                   [LclId]
                                   $dMonad5
                                     = Control.Monad.Trans.State.Strict.$fMonadStateT
                                         @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         @ Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.$fMonadEither
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                 \ (extract [Occ=OnceL!] :: Mlabs.Lending.Logic.Types.Wallet -> b)
                                   (uid [Occ=Once] :: Mlabs.Emulator.Types.UserId)
                                   (asset [Occ=Once] :: Mlabs.Emulator.Types.Coin)
                                   (desiredAmount [Occ=OnceL] :: b) ->
                                   GHC.Base.>>=
                                     @ (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                     $dMonad5
                                     @ b
                                     @ b
                                     (let {
                                        ds [Occ=OnceL]
                                          :: Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                               Mlabs.Lending.Logic.Types.Wallet
                                        [LclId]
                                        ds = Mlabs.Lending.Logic.State.getWallet uid asset } in
                                      (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                         case (ds
                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <Mlabs.Lending.Logic.Types.Wallet>_N
                                                       :: GHC.Types.Coercible
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Wallet)
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (Mlabs.Lending.Logic.Types.Wallet,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                x
                                         of {
                                           Data.Either.Left c1 [Occ=Once] ->
                                             Data.Either.Left
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               c1;
                                           Data.Either.Right a1 [Occ=Once!] ->
                                             Data.Either.Right
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                (extract v, st1)
                                                })
                                         })
                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <b>_N)
                                              :: GHC.Types.Coercible
                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                   (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      b)))
                                     (\ (availableAmount [Occ=Once] :: b) ->
                                        let {
                                          a1 [Occ=OnceL] :: b
                                          [LclId]
                                          a1 = PlutusTx.Ord.min @ b $dOrd availableAmount desiredAmount } in
                                        (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           Data.Either.Right
                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                             @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                             (a1, st1))
                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                         <Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                         <b>_N)
                                                :: GHC.Types.Coercible
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        b))) } in
                         let {
                           $dMonadError4 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError4
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonad5
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad5
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError5 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError5
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError6 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError6
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         GHC.Base.>>
                           @ (Control.Monad.Trans.State.Strict.StateT
                                Mlabs.Lending.Logic.Types.LendingPool
                                (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           Mlabs.Lending.Logic.React.qReact1
                           @ ()
                           @ [Mlabs.Emulator.Blockchain.Resp]
                           (Mlabs.Lending.Logic.React.checkInput input)
                           (case input of {
                              Mlabs.Lending.Logic.Types.UserAct t uid act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (case act of {
                                     Mlabs.Lending.Logic.Types.DepositAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds2 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds2 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds2
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds8 [Occ=Once!] ->
                                                     case ds8 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds12 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds12
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ ()
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                 uid ds1 (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                              (GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ Mlabs.Emulator.Types.Coin
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.aToken ds1)
                                                 (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                    GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserve'
                                                         ds1
                                                         (\ (x [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            Data.Either.Right
                                                              @ Mlabs.Lending.Logic.State.Error
                                                              @ Mlabs.Lending.Logic.Types.Reserve
                                                              (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                 t x)))
                                                      (let {
                                                         a1 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                         [LclId]
                                                         a1
                                                           = GHC.Base.foldr
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               (PlutusTx.List.++
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.[]
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.:
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     (Mlabs.Emulator.Blockchain.Mint
                                                                        aCoin ds)
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp))
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           aCoin
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid aCoin ds)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              ds1
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 ds1
                                                                                 ds)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.[]
                                                                           @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                       (\ (st1 [Occ=Once]
                                                             :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool)
                                                            (a1, st1))
                                                       `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                        <Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                        <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                               :: GHC.Types.Coercible
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          ([Mlabs.Emulator.Blockchain.Resp],
                                                                           Mlabs.Lending.Logic.Types.LendingPool))
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       [Mlabs.Emulator.Blockchain.Resp]))))));
                                     Mlabs.Lending.Logic.Types.BorrowAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             join {
                                               $j [Occ=Once!T[1]]
                                                 :: (GHC.Integer.Type.Integer,
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         ((), Mlabs.Lending.Logic.Types.LendingPool)
                                               [LclId[JoinId(1)], Arity=1]
                                               $j (r [Occ=Once!, OS=OneShot]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                 = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                   case PlutusTx.Builtins.Internal.ifThenElse
                                                          @ GHC.Types.Bool
                                                          (PlutusTx.Builtins.Internal.lessThanInteger a1 ds)
                                                          GHC.Types.False
                                                          GHC.Types.True
                                                   of {
                                                     GHC.Types.False ->
                                                       ((Control.Monad.Error.Class.throwError
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonadError6
                                                           @ ()
                                                           (GHC.Magic.noinline
                                                              @ (GHC.Base.String
                                                                 -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                              (GHC.CString.unpackCString#
                                                                 "Not enough liquidity for asset"#)))
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        ())
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           ((),
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         s';
                                                     GHC.Types.True ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), s')
                                                   }
                                                   } } in
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 let {
                                                   r [Occ=Once]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                   [LclId]
                                                   r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve ds4 [Occ=Once!]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                        case ds4 of
                                                        { Mlabs.Lending.Logic.Types.Wallet ds10 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                        ds10
                                                        }
                                                        },
                                                        st1)
                                                       } } in
                                                 jump $j r
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ ()
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds3 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Wallet
                                               [LclId]
                                               ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                             (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                join {
                                                  $j [Occ=Once!T[1]]
                                                    :: (GHC.Integer.Type.Integer,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                  [LclId[JoinId(1)], Arity=1]
                                                  $j (r [Occ=Once!, OS=OneShot]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                    = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                      case PlutusTx.Builtins.Internal.ifThenElse
                                                             @ GHC.Types.Bool
                                                             (PlutusTx.Builtins.Internal.equalsInteger a1 0)
                                                             GHC.Types.True
                                                             GHC.Types.False
                                                      of {
                                                        GHC.Types.False ->
                                                          ((Control.Monad.Error.Class.throwError
                                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonadError5
                                                              @ ()
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "Collateral can not be used as borrow for user"#)))
                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <()>_N
                                                                   :: GHC.Types.Coercible
                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           ())
                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                         -> Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                              ((),
                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                            s';
                                                        GHC.Types.True ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                            (GHC.Tuple.(), s')
                                                      }
                                                      } } in
                                                case (ds3
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Wallet>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Wallet)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Wallet,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       s1
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    let {
                                                      r [Occ=Once]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                      [LclId]
                                                      r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                          (case v of
                                                           { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                              ds5 [Occ=Once]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead] ->
                                                           ds5
                                                           },
                                                           st1)
                                                          } } in
                                                    jump $j r
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             ())))
                                            (GHC.Base.>>
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ ()
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (let {
                                                  msg [Occ=OnceL]
                                                    :: PlutusTx.Builtins.Internal.BuiltinByteString
                                                  [LclId]
                                                  msg
                                                    = GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Not enough collateral to borrow"#) } in
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad5
                                                  @ GHC.Integer.Type.Integer
                                                  @ ()
                                                  (Mlabs.Lending.Logic.State.toAda ds1 ds)
                                                  (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>=
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad5
                                                       @ GHC.Types.Bool
                                                       @ ()
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad5
                                                          @ Mlabs.Lending.Logic.Types.User
                                                          @ GHC.Types.Bool
                                                          (Mlabs.Lending.Logic.State.getUser uid)
                                                          (Mlabs.Lending.Logic.State.getHealthCheck bor ds1))
                                                       (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                                          case isOk of {
                                                            GHC.Types.False ->
                                                              Control.Monad.Error.Class.throwError
                                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                $dMonadError4
                                                                @ ()
                                                                msg;
                                                            GHC.Types.True ->
                                                              (\ (st1 [Occ=Once]
                                                                    :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                                   (GHC.Tuple.(), st1))
                                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                               <Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                               <()>_N)
                                                                      :: GHC.Types.Coercible
                                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                                            -> Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                 ((),
                                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                                           (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                              ()))
                                                          })))
                                               (GHC.Base.>>
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ ()
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (GHC.Base.>>=
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ PlutusTx.Ratio.Rational
                                                     @ ()
                                                     (let {
                                                        ds3 [Occ=OnceL]
                                                          :: Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Reserve
                                                        [LclId]
                                                        ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                                      (\ (x [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         case (ds3
                                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                       :: GHC.Types.Coercible
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               Mlabs.Lending.Logic.Types.Reserve)
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  (Mlabs.Lending.Logic.Types.Reserve,
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                                x
                                                         of {
                                                           Data.Either.Left c1 [Occ=Once] ->
                                                             Data.Either.Left
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               c1;
                                                           Data.Either.Right a1 [Occ=Once!] ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (case a1 of
                                                                { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                                (case v of
                                                                 { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds9 [Occ=Once!] ->
                                                                 case ds9 of
                                                                 { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             ds13 [Occ=Once]
                                                                                                             _ [Occ=Dead] ->
                                                                 ds13
                                                                 }
                                                                 },
                                                                 st1)
                                                                })
                                                         })
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <PlutusTx.Ratio.Rational>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      PlutusTx.Ratio.Rational)))
                                                     (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                                        GHC.Base.>>
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ ()
                                                          @ ()
                                                          (Mlabs.Lending.Logic.State.modifyWallet'
                                                             uid
                                                             ds1
                                                             (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                Data.Either.Right
                                                                  @ Mlabs.Lending.Logic.State.Error
                                                                  @ Mlabs.Lending.Logic.Types.Wallet
                                                                  (case x of
                                                                   { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                      ds4 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      ds6 [Occ=Once] ->
                                                                   Mlabs.Lending.Logic.Types.$WWallet
                                                                     ds3
                                                                     ds4
                                                                     (PlutusTx.Builtins.Internal.addInteger
                                                                        (case x of
                                                                         { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds9 [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                         ds9
                                                                         })
                                                                        ds)
                                                                     ds6
                                                                   })))
                                                          (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                             ds1
                                                             (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                ni
                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                   PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                   ds)))))
                                                  (GHC.Base.>>
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ ()
                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                     (Mlabs.Lending.Logic.State.modifyReserve'
                                                        ds1
                                                        (\ (x [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                           Data.Either.Right
                                                             @ Mlabs.Lending.Logic.State.Error
                                                             @ Mlabs.Lending.Logic.Types.Reserve
                                                             (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                t x)))
                                                     (let {
                                                        a1 [Occ=OnceL]
                                                          :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                        [LclId]
                                                        a1
                                                          = PlutusTx.Builtins.Internal.subtractInteger
                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                              ds } in
                                                      let {
                                                        a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a2
                                                          = Mlabs.Emulator.Blockchain.Move
                                                              Mlabs.Emulator.Types.Self ds1 a1 } in
                                                      let {
                                                        a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a3 = Mlabs.Emulator.Blockchain.Move uid ds1 ds } in
                                                      let {
                                                        a4 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a4
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                              a3
                                                              (GHC.Types.[]
                                                                 @ Mlabs.Emulator.Blockchain.Resp) } in
                                                      let {
                                                        a5 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a5
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                      (\ (st1 [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ([Mlabs.Emulator.Blockchain.Resp],
                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                           (a5, st1))
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         ([Mlabs.Emulator.Blockchain.Resp],
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.RepayAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds9 [Occ=Once!] ->
                                                     case ds9 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds13 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds13
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ GHC.Integer.Type.Integer
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds3 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.Wallet
                                                 [LclId]
                                                 ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds3
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.Wallet>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.Wallet,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds6 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds6
                                                          },
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <GHC.Integer.Type.Integer>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (GHC.Integer.Type.Integer,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               GHC.Integer.Type.Integer)))
                                              (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                 let {
                                                   newBor :: GHC.Integer.Type.Integer
                                                   [LclId]
                                                   newBor
                                                     = PlutusTx.Builtins.Internal.subtractInteger bor ds } in
                                                 GHC.Base.>>
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ ()
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (case PlutusTx.Builtins.Internal.ifThenElse
                                                           @ GHC.Types.Bool
                                                           (PlutusTx.Builtins.Internal.lessThanInteger
                                                              newBor 0)
                                                           GHC.Types.False
                                                           GHC.Types.True
                                                    of {
                                                      GHC.Types.False ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (w [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       newBor)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                       ds4 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds6 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds3 ds4 0 ds6
                                                                    })
                                                             });
                                                      GHC.Types.True ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (x [Occ=Once!]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             Data.Either.Right
                                                               @ Mlabs.Lending.Logic.State.Error
                                                               @ Mlabs.Lending.Logic.Types.Wallet
                                                               (case x of
                                                                { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                   ds4 [Occ=Once]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds6 [Occ=Once] ->
                                                                Mlabs.Lending.Logic.Types.$WWallet
                                                                  ds3 ds4 newBor ds6
                                                                }))
                                                    })
                                                   (GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                         ds1
                                                         (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                                      (GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds1
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                            [LclId]
                                                            a1
                                                              = PlutusTx.Builtins.Internal.subtractInteger
                                                                  PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                  ds } in
                                                          let {
                                                            a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a2
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  uid ds1 a1 } in
                                                          let {
                                                            a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a3
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  Mlabs.Emulator.Types.Self ds1 ds } in
                                                          let {
                                                            a4 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a4
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                  a3
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp) } in
                                                          let {
                                                            a5 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a5
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a5, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.SwapBorrowRateModelAct _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.AddCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'deposit:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       amount)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.addInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self
                                                                     aCoin
                                                                     amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.RemoveCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'collateral:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni amount w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.subtractInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.WithdrawAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            m1 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   PlutusTx.Ratio.Rational
                                            [LclId]
                                            m1 = Mlabs.Lending.Logic.State.getCumulativeBalance uid ds } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (m1
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   PlutusTx.Ratio.Rational)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (PlutusTx.Ratio.Rational,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left l [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   l;
                                               Data.Either.Right r [Occ=Once!] ->
                                                 case r of { (a1, s' [Occ=Once*]) ->
                                                 let {
                                                   y :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                   [LclId]
                                                   y = PlutusTx.Ratio.:%
                                                         @ GHC.Integer.Type.Integer
                                                         ds1
                                                         PlutusTx.Ratio.fromInteger1 } in
                                                 case PlutusTx.Ratio.$fOrdRatio1 a1 y of {
                                                   GHC.Types.False ->
                                                     case PlutusTx.Ratio.$fOrdRatio_$c<= a1 y of {
                                                       GHC.Types.False ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                           (GHC.Tuple.(), s');
                                                       GHC.Types.True ->
                                                         ((Control.Monad.Error.Class.throwError
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                             $dMonadError3
                                                             @ ()
                                                             (GHC.Magic.noinline
                                                                @ (GHC.Base.String
                                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                (GHC.CString.unpackCString#
                                                                   "Not enough deposit to withdraw"#)))
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <()>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          ())
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ((),
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           s'
                                                     };
                                                   GHC.Types.True ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                       (GHC.Tuple.(), s')
                                                 }
                                                 }
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ PlutusTx.Ratio.Rational
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds2 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Reserve
                                               [LclId]
                                               ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds2
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Reserve>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Reserve,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            ds8 [Occ=Once!] ->
                                                        case ds8 of
                                                        { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds12 [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                        ds12
                                                        }
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.Ratio.Rational,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Ratio.Rational)))
                                            (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                               GHC.Base.>>
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ ()
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                    uid
                                                    ds
                                                    (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                       ni
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                          ds1)))
                                                 (GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ Mlabs.Emulator.Types.Coin
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (Mlabs.Lending.Logic.State.aToken ds)
                                                    (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                       GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a1
                                                              = GHC.Base.foldr
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (PlutusTx.List.++
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           ds
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds1))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid ds ds1)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              aCoin
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds1))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 aCoin
                                                                                 ds1)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.:
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (GHC.Base.build
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (\ (@ a2)
                                                                                 (c [Occ=Once!, OS=OneShot]
                                                                                    :: Mlabs.Emulator.Blockchain.Resp
                                                                                       -> a2 -> a2)
                                                                                 (n [Occ=Once, OS=OneShot]
                                                                                    :: a2) ->
                                                                                 c (Mlabs.Emulator.Blockchain.Burn
                                                                                      aCoin ds1)
                                                                                   n))
                                                                           (GHC.Types.[]
                                                                              @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a1, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.FlashLoanAct ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.LiquidationCallAct ds ds1 ds2
                                                                                  ds3 [Occ=OnceL!] ->
                                       let {
                                         $dMonadError7 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError7
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError8
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError8
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError9 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError9
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError10 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError10
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadState
                                           :: Control.Monad.State.Class.MonadState
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadState
                                           = Control.Monad.State.Class.$fMonadStatesStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         borrowUserId :: Mlabs.Emulator.Types.UserId
                                         [LclId]
                                         borrowUserId
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow ds4 [Occ=Once]
                                                                                   _ [Occ=Dead] ->
                                             ds4
                                             } } in
                                       let {
                                         borrowAsset :: Plutus.V1.Ledger.Value.AssetClass
                                         [LclId]
                                         borrowAsset
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow _ [Occ=Dead]
                                                                                   ds5 [Occ=Once] ->
                                             ds5
                                             } } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            (Control.Monad.State.Class.$p1MonadState
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonadState)
                                            @ GHC.Types.Bool
                                            @ ()
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.AssocMap.Map
                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                         PlutusTx.Ratio.Rational)
                                               [LclId]
                                               ds4
                                                 = Control.Monad.State.Class.gets
                                                     @ Mlabs.Lending.Logic.Types.LendingPool
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     @ Mlabs.Lending.Logic.Types.HealthReport
                                                     $dMonadState
                                                     Mlabs.Lending.Logic.Types.$sel:lp'healthReport:LendingPool } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Lending.Logic.Types.BadBorrow
                                                                     PlutusTx.Ratio.Rational>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Lending.Logic.Types.BadBorrow
                                                                            PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                       (joinrec {
                                                          go [Occ=LoopBreakerT[1]]
                                                            :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                 PlutusTx.Ratio.Rational)]
                                                               -> GHC.Types.Bool
                                                          [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                          go (ds5 [Occ=Once!]
                                                                :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)])
                                                            = case ds5 of {
                                                                [] -> GHC.Types.False;
                                                                : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                                  case ds6 of
                                                                  { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                                  case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                         c' ds1
                                                                  of {
                                                                    GHC.Types.False -> jump go xs';
                                                                    GHC.Types.True -> GHC.Types.True
                                                                  }
                                                                  }
                                                              }; } in
                                                        jump go
                                                          (v
                                                           `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                       <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                       <PlutusTx.Ratio.Rational>_R
                                                                   :: GHC.Types.Coercible
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                                           PlutusTx.Ratio.Rational)
                                                                        [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational)])),
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <GHC.Types.Bool>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (GHC.Types.Bool,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             GHC.Types.Bool)))
                                            (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                               case isOk of {
                                                 GHC.Types.False ->
                                                   Control.Monad.Error.Class.throwError
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonadError8
                                                     @ ()
                                                     (GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Bad borrow not present"#));
                                                 GHC.Types.True ->
                                                   (\ (st1 [Occ=Once]
                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                        (GHC.Tuple.(), st1))
                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N)
                                                           :: GHC.Types.Coercible
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      ((),
                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   ()))
                                               }))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ (PlutusTx.AssocMap.Map
                                                 Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.User
                                               [LclId]
                                               ds4
                                                 = Mlabs.Lending.Logic.State.getUser
                                                     (case ds1 of
                                                      { Mlabs.Lending.Logic.Types.BadBorrow ds5 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                      ds5
                                                      }) } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.User>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.User)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.User,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.User ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                        ds5
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Wallet>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.Coin
                                                                   Mlabs.Lending.Logic.Types.Wallet,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             (PlutusTx.AssocMap.Map
                                                                Mlabs.Emulator.Types.Coin
                                                                Mlabs.Lending.Logic.Types.Wallet))))
                                            (\ (wals
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Wallet) ->
                                               GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ GHC.Integer.Type.Integer
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (join {
                                                    $j [Occ=OnceLT[0]]
                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           GHC.Integer.Type.Integer
                                                    [LclId[JoinId(0)]]
                                                    $j
                                                      = Control.Monad.Error.Class.throwError
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonadError7
                                                          @ GHC.Integer.Type.Integer
                                                          (GHC.Magic.noinline
                                                             @ (GHC.Base.String
                                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                             (GHC.CString.unpackCString#
                                                                "Wallet does not have the debt to liquidate"#)) } in
                                                  join {
                                                    $j1 [Occ=OnceL!T[1]]
                                                      :: Mlabs.Lending.Logic.Types.Wallet
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1]
                                                    $j1 (wal [Occ=Once!, OS=OneShot]
                                                           :: Mlabs.Lending.Logic.Types.Wallet)
                                                      = let {
                                                          a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                          [LclId]
                                                          a1
                                                            = case wal of
                                                              { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds6 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                              ds6
                                                              } } in
                                                        (\ (st1 [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                           Data.Either.Right
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (GHC.Integer.Type.Integer,
                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                             (a1, st1))
                                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <GHC.Integer.Type.Integer>_N)
                                                                :: GHC.Types.Coercible
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (GHC.Integer.Type.Integer,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        GHC.Integer.Type.Integer)) } in
                                                  joinrec {
                                                    go [Occ=LoopBreakerT[1]]
                                                      :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                           Mlabs.Lending.Logic.Types.Wallet)]
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                    go (ds4 [Occ=Once!]
                                                          :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                               Mlabs.Lending.Logic.Types.Wallet)])
                                                      = case ds4 of {
                                                          [] -> jump $j;
                                                          : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                            case ds5 of { (c' [Occ=Once], i [Occ=Once]) ->
                                                            case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                   (c'
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                                   (borrowAsset
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                            of {
                                                              GHC.Types.False -> jump go xs';
                                                              GHC.Types.True -> jump $j1 i
                                                            }
                                                            }
                                                        }; } in
                                                  jump go
                                                    (wals
                                                     `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                 <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                 <Mlabs.Lending.Logic.Types.Wallet>_R
                                                             :: GHC.Types.Coercible
                                                                  (PlutusTx.AssocMap.Map
                                                                     Plutus.V1.Ledger.Value.AssetClass
                                                                     Mlabs.Lending.Logic.Types.Wallet)
                                                                  [(Plutus.V1.Ledger.Value.AssetClass,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])))
                                                 (\ (bor [Occ=OnceL] :: GHC.Integer.Type.Integer) ->
                                                    GHC.Base.>>=
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ GHC.Integer.Type.Integer
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (join {
                                                         $j [Occ=OnceLT[0]]
                                                           :: Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                GHC.Integer.Type.Integer
                                                         [LclId[JoinId(0)]]
                                                         $j
                                                           = Control.Monad.Error.Class.throwError
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                                               $dMonadError10
                                                               @ GHC.Integer.Type.Integer
                                                               (GHC.Magic.noinline
                                                                  @ (GHC.Base.String
                                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                  (GHC.CString.unpackCString#
                                                                     "Wallet does not have collateral for liquidation asset"#)) } in
                                                       join {
                                                         $j1 [Occ=OnceL!T[1]]
                                                           :: Mlabs.Lending.Logic.Types.Wallet
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1]
                                                         $j1 (wal [Occ=Once!, OS=OneShot]
                                                                :: Mlabs.Lending.Logic.Types.Wallet)
                                                           = let {
                                                               a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                               [LclId]
                                                               a1
                                                                 = case wal of
                                                                   { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                      ds5 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      _ [Occ=Dead] ->
                                                                   ds5
                                                                   } } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a1, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <GHC.Integer.Type.Integer>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                (GHC.Integer.Type.Integer,
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             GHC.Integer.Type.Integer)) } in
                                                       joinrec {
                                                         go [Occ=LoopBreakerT[1]]
                                                           :: [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Wallet)]
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                         go (ds4 [Occ=Once!]
                                                               :: [(Mlabs.Emulator.Types.Coin,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])
                                                           = case ds4 of {
                                                               [] -> jump $j;
                                                               : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                                 case ds5 of
                                                                 { (c' [Occ=Once], i [Occ=Once]) ->
                                                                 case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                        (c'
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                        (ds
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                 of {
                                                                   GHC.Types.False -> jump go xs';
                                                                   GHC.Types.True -> jump $j1 i
                                                                 }
                                                                 }
                                                             }; } in
                                                       jump go
                                                         (wals
                                                          `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                      <Mlabs.Emulator.Types.Coin>_R
                                                                      <Mlabs.Lending.Logic.Types.Wallet>_R
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Wallet)
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Wallet)])))
                                                      (\ (col :: GHC.Integer.Type.Integer) ->
                                                         GHC.Base.>>
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonad6
                                                           @ ()
                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                           (Mlabs.Control.Check.isPositive
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                                 @ Mlabs.Lending.Logic.Types.LendingPool)
                                                              $dMonadError8
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "liquidation collateral"#))
                                                              col)
                                                           (GHC.Base.>>
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonad6
                                                              @ ()
                                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                                              (case PlutusTx.Builtins.Internal.ifThenElse
                                                                      @ GHC.Types.Bool
                                                                      (PlutusTx.Builtins.Internal.lessThanInteger
                                                                         bor
                                                                         (PlutusTx.Builtins.Internal.multiplyInteger
                                                                            2 ds2))
                                                                      GHC.Types.False
                                                                      GHC.Types.True
                                                               of {
                                                                 GHC.Types.False ->
                                                                   Control.Monad.Error.Class.throwError
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                     $dMonadError9
                                                                     @ ()
                                                                     (GHC.Magic.noinline
                                                                        @ (GHC.Base.String
                                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                        (GHC.CString.unpackCString#
                                                                           "Can not cover more than half of the borrow"#));
                                                                 GHC.Types.True ->
                                                                   (\ (st1 [Occ=Once]
                                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                      Data.Either.Right
                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        @ ((),
                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                        (GHC.Tuple.(), st1))
                                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                    <Data.Either.Either
                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                    <()>_N)
                                                                           :: GHC.Types.Coercible
                                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                                 -> Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      ((),
                                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                   (Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                   ()))
                                                               })
                                                              (GHC.Base.>>=
                                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                 $dMonad6
                                                                 @ GHC.Integer.Type.Integer
                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                 (let {
                                                                    ds4 [Occ=OnceL]
                                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           GHC.Integer.Type.Integer
                                                                    [LclId]
                                                                    ds4
                                                                      = GHC.Base.>>=
                                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                          Mlabs.Lending.Logic.State.aToken2
                                                                          @ GHC.Integer.Type.Integer
                                                                          @ GHC.Integer.Type.Integer
                                                                          (Mlabs.Lending.Logic.State.toAda
                                                                             borrowAsset ds2)
                                                                          (Mlabs.Lending.Logic.State.fromAda
                                                                             ds) } in
                                                                  (\ (x [Occ=Once]
                                                                        :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                     case (ds4
                                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                       <Data.Either.Either
                                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                       <GHC.Integer.Type.Integer>_N
                                                                                   :: GHC.Types.Coercible
                                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                           GHC.Integer.Type.Integer)
                                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                                         -> Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                              (GHC.Integer.Type.Integer,
                                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                                            x
                                                                     of {
                                                                       Data.Either.Left c1 [Occ=Once] ->
                                                                         Data.Either.Left
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           c1;
                                                                       Data.Either.Right a1 [Occ=Once!] ->
                                                                         Data.Either.Right
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           (case a1 of
                                                                            { (v [Occ=Once],
                                                                               st1 [Occ=Once]) ->
                                                                            (PlutusTx.Ord.$fOrdInteger_$cmin
                                                                               col v,
                                                                             st1)
                                                                            })
                                                                     })
                                                                  `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                   <Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                   <GHC.Integer.Type.Integer>_N)
                                                                          :: GHC.Types.Coercible
                                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                                -> Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                     (GHC.Integer.Type.Integer,
                                                                                      Mlabs.Lending.Logic.Types.LendingPool))
                                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                                  (Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                  GHC.Integer.Type.Integer)))
                                                                 (\ (colCovered
                                                                       :: GHC.Integer.Type.Integer) ->
                                                                    GHC.Base.>>=
                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                      $dMonad6
                                                                      @ GHC.Integer.Type.Integer
                                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                                      (GHC.Base.>>=
                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                         $dMonad6
                                                                         @ PlutusTx.Ratio.Rational
                                                                         @ GHC.Integer.Type.Integer
                                                                         (Mlabs.Lending.Logic.State.getLiquidationBonus
                                                                            ds)
                                                                         (\ (rate [Occ=Once!]
                                                                               :: PlutusTx.Ratio.Rational) ->
                                                                            Mlabs.Lending.Logic.State.toAda
                                                                              ds
                                                                              (PlutusTx.Ratio.round
                                                                                 (case rate of
                                                                                  { PlutusTx.Ratio.:% x' [Occ=Once]
                                                                                                      y' [Occ=Once] ->
                                                                                  PlutusTx.Ratio.reduce
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       colCovered x')
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       PlutusTx.Ratio.fromInteger1
                                                                                       y')
                                                                                  }))))
                                                                      (\ (adaBonus
                                                                            :: GHC.Integer.Type.Integer) ->
                                                                         GHC.Base.>>=
                                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                (Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                           $dMonad6
                                                                           @ Mlabs.Emulator.Types.Coin
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (Mlabs.Lending.Logic.State.aToken
                                                                              ds)
                                                                           (\ (aCollateralAsset [Occ=Once]
                                                                                 :: Mlabs.Emulator.Types.Coin) ->
                                                                              GHC.Base.>>
                                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                                     (Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                $dMonad6
                                                                                @ ()
                                                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                (GHC.Base.>>
                                                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                        (Data.Either.Either
                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                   $dMonad6
                                                                                   @ ()
                                                                                   @ ()
                                                                                   (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                      borrowUserId
                                                                                      ds
                                                                                      (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                         Data.Either.Right
                                                                                           @ Mlabs.Lending.Logic.State.Error
                                                                                           @ Mlabs.Lending.Logic.Types.Wallet
                                                                                           (case x of
                                                                                            { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               ds6 [Occ=Once]
                                                                                                                               ds7 [Occ=Once] ->
                                                                                            Mlabs.Lending.Logic.Types.$WWallet
                                                                                              ds4
                                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                 (case x of
                                                                                                  { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                     ds9 [Occ=Once]
                                                                                                                                     _ [Occ=Dead]
                                                                                                                                     _ [Occ=Dead] ->
                                                                                                  ds9
                                                                                                  })
                                                                                                 colCovered)
                                                                                              ds6
                                                                                              ds7
                                                                                            })))
                                                                                   (GHC.Base.>>
                                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                      $dMonad6
                                                                                      @ ()
                                                                                      @ ()
                                                                                      (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                         borrowUserId
                                                                                         borrowAsset
                                                                                         (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                            Data.Either.Right
                                                                                              @ Mlabs.Lending.Logic.State.Error
                                                                                              @ Mlabs.Lending.Logic.Types.Wallet
                                                                                              (case x of
                                                                                               { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                                  ds5 [Occ=Once]
                                                                                                                                  _ [Occ=Dead]
                                                                                                                                  ds7 [Occ=Once] ->
                                                                                               Mlabs.Lending.Logic.Types.$WWallet
                                                                                                 ds4
                                                                                                 ds5
                                                                                                 (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                    (case x
                                                                                                     of
                                                                                                     { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds10 [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                     ds10
                                                                                                     })
                                                                                                    ds2)
                                                                                                 ds7
                                                                                               })))
                                                                                      (GHC.Base.>>=
                                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                                              (Data.Either.Either
                                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                         $dMonad4
                                                                                         @ Mlabs.Lending.Logic.Types.User
                                                                                         @ ()
                                                                                         (Mlabs.Lending.Logic.State.getUser
                                                                                            borrowUserId)
                                                                                         (\ (user [Occ=Once]
                                                                                               :: Mlabs.Lending.Logic.Types.User) ->
                                                                                            GHC.Base.>>=
                                                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                                   (Data.Either.Either
                                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                              $dMonad4
                                                                                              @ Mlabs.Lending.Logic.Types.User
                                                                                              @ ()
                                                                                              (let {
                                                                                                 ds4 [Occ=OnceL]
                                                                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                        (Data.Either.Either
                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                         Mlabs.Lending.Logic.Types.User)
                                                                                                 [LclId]
                                                                                                 ds4
                                                                                                   = updateUserHealth
                                                                                                       t
                                                                                                       (borrowUserId,
                                                                                                        user) } in
                                                                                               (\ (x [Occ=Once]
                                                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                                  case (ds4
                                                                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                    <Data.Either.Either
                                                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                    <(Mlabs.Emulator.Types.UserId,
                                                                                                                      Mlabs.Lending.Logic.Types.User)>_N
                                                                                                                :: GHC.Types.Coercible
                                                                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                        (Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                                         Mlabs.Lending.Logic.Types.User))
                                                                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                      -> Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                           ((Mlabs.Emulator.Types.UserId,
                                                                                                                             Mlabs.Lending.Logic.Types.User),
                                                                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                                                                         x
                                                                                                  of {
                                                                                                    Data.Either.Left c1 [Occ=Once] ->
                                                                                                      Data.Either.Left
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        c1;
                                                                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                                                                      Data.Either.Right
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        (case a1
                                                                                                         of
                                                                                                         { (v [Occ=Once!],
                                                                                                            st1 [Occ=Once]) ->
                                                                                                         (case v
                                                                                                          of
                                                                                                          { (_ [Occ=Dead],
                                                                                                             b1 [Occ=Once]) ->
                                                                                                          b1
                                                                                                          },
                                                                                                          st1)
                                                                                                         })
                                                                                                  })
                                                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                <Data.Either.Either
                                                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                <Mlabs.Lending.Logic.Types.User>_N)
                                                                                                       :: GHC.Types.Coercible
                                                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                             -> Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                  (Mlabs.Lending.Logic.Types.User,
                                                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                                                               (Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                               Mlabs.Lending.Logic.Types.User)))
                                                                                              (\ (newUser [Occ=OnceL]
                                                                                                    :: Mlabs.Lending.Logic.Types.User) ->
                                                                                                 Mlabs.Lending.Logic.State.modifyUser'
                                                                                                   borrowUserId
                                                                                                   (\ _ [Occ=Dead] ->
                                                                                                      Data.Either.Right
                                                                                                        @ Mlabs.Lending.Logic.State.Error
                                                                                                        @ Mlabs.Lending.Logic.Types.User
                                                                                                        newUser))))))
                                                                                (let {
                                                                                   a1 [Occ=OnceL]
                                                                                     :: [Mlabs.Emulator.Blockchain.Resp]
                                                                                   [LclId]
                                                                                   a1
                                                                                     = GHC.Base.foldr
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         (PlutusTx.List.++
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.[]
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.:
                                                                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                            (GHC.Types.:
                                                                                               @ Mlabs.Emulator.Blockchain.Resp
                                                                                               (Mlabs.Emulator.Blockchain.Move
                                                                                                  uid
                                                                                                  borrowAsset
                                                                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                     ds2))
                                                                                               (GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     borrowAsset
                                                                                                     ds2)
                                                                                                  (GHC.Types.[]
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                            (GHC.Types.:
                                                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                               (let {
                                                                                                  coin
                                                                                                    :: Mlabs.Emulator.Types.Coin
                                                                                                  [LclId]
                                                                                                  coin
                                                                                                    = case ds3
                                                                                                      of {
                                                                                                        GHC.Types.False ->
                                                                                                          ds;
                                                                                                        GHC.Types.True ->
                                                                                                          aCollateralAsset
                                                                                                      } } in
                                                                                                GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     coin
                                                                                                     (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                        PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                        colCovered))
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        uid
                                                                                                        coin
                                                                                                        colCovered)
                                                                                                     (GHC.Types.[]
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                               (GHC.Types.:
                                                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        Mlabs.Emulator.Types.Self
                                                                                                        Mlabs.Emulator.Types.adaCoin
                                                                                                        (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                           PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                           adaBonus))
                                                                                                     (GHC.Types.:
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                                                           uid
                                                                                                           Mlabs.Emulator.Types.adaCoin
                                                                                                           adaBonus)
                                                                                                        (GHC.Types.[]
                                                                                                           @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                                  (GHC.Types.[]
                                                                                                     @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                                                 (\ (st1 [Occ=Once]
                                                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                    Data.Either.Right
                                                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                                                      (a1, st1))
                                                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                  <Data.Either.Either
                                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                  <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                                         :: GHC.Types.Coercible
                                                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                                                               -> Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                    ([Mlabs.Emulator.Blockchain.Resp],
                                                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                                 (Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                 [Mlabs.Emulator.Blockchain.Resp]))))))))))))
                                   });
                              Mlabs.Lending.Logic.Types.PriceAct t uid [Occ=Once]
                                                                 act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (let {
                                     m1 [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            ()
                                     [LclId]
                                     m1 = Mlabs.Lending.Logic.State.isTrustedOracle uid } in
                                   let {
                                     k [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            [Mlabs.Emulator.Blockchain.Resp]
                                     [LclId]
                                     k = case act of
                                         { Mlabs.Lending.Logic.Types.SetAssetPriceAct coin [Occ=Once]
                                                                                      rate [Occ=OnceL] ->
                                         let {
                                           m2 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  ()
                                           [LclId]
                                           m2
                                             = Mlabs.Lending.Logic.State.modifyReserve'
                                                 coin
                                                 (\ (x [Occ=Once!] :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                    Data.Either.Right
                                                      @ Mlabs.Lending.Logic.State.Error
                                                      @ Mlabs.Lending.Logic.Types.Reserve
                                                      (case x of
                                                       { Mlabs.Lending.Logic.Types.Reserve ds [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           ds2 [Occ=Once]
                                                                                           ds3 [Occ=Once]
                                                                                           ds4 [Occ=Once]
                                                                                           ds5 [Occ=Once] ->
                                                       Mlabs.Lending.Logic.Types.$WReserve
                                                         ds
                                                         (Mlabs.Lending.Logic.Types.$WCoinRate rate t)
                                                         ds2
                                                         ds3
                                                         ds4
                                                         ds5
                                                       })) } in
                                         (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (m2
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  ())
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   s1
                                            of {
                                              Data.Either.Left l [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  l;
                                              Data.Either.Right r [Occ=Once!] ->
                                                case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, s')
                                                }
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ([Mlabs.Emulator.Blockchain.Resp],
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         [Mlabs.Emulator.Blockchain.Resp]))
                                         } } in
                                   (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                      case (m1
                                            `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                        <Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                        <()>_N
                                                    :: GHC.Types.Coercible
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ())
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                             s1
                                      of {
                                        Data.Either.Left l [Occ=Once] ->
                                          Data.Either.Left
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                               Mlabs.Lending.Logic.Types.LendingPool)
                                            l;
                                        Data.Either.Right r [Occ=Once!] ->
                                          case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                          (k
                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                   :: GHC.Types.Coercible
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp])
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                            s'
                                          }
                                      })
                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                           :: GHC.Types.Coercible
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])));
                              Mlabs.Lending.Logic.Types.GovernAct uid [Occ=Once]
                                                                  act [Occ=Once] ->
                                let {
                                  m1 [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         ()
                                  [LclId]
                                  m1 = Mlabs.Lending.Logic.State.isAdmin uid } in
                                let {
                                  k [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]
                                  [LclId]
                                  k = let {
                                        $dMonadError7
                                          :: Control.Monad.Error.Class.MonadError
                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadError7
                                          = Control.Monad.Error.Class.$fMonadErroreStateT
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Control.Monad.Error.Class.$fMonadErroreEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonadState
                                          :: Control.Monad.State.Class.MonadState
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadState
                                          = Control.Monad.State.Class.$fMonadStatesStateT
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.$fMonadEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonad6
                                          :: GHC.Base.Monad
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonad6
                                          = Control.Monad.Error.Class.$p1MonadError
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonadError7 } in
                                      let {
                                        $d~1 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~1
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Mlabs.Emulator.Types.Coin
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      let {
                                        $d~2 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Plutus.V1.Ledger.Value.TokenName Mlabs.Emulator.Types.Coin
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Plutus.V1.Ledger.Value.TokenName
                                                           Mlabs.Emulator.Types.Coin
                                        [LclId]
                                        $d~2
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     Mlabs.Emulator.Types.Coin>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.TokenName
                                                       Mlabs.Emulator.Types.Coin
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.TokenName
                                                         Mlabs.Emulator.Types.Coin) } in
                                      let {
                                        $d~3 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~3
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.AssetClass
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.AssetClass
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.AssetClass
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      case act
                                           `cast` (Mlabs.Lending.Logic.Types.N:GovernAct[0]
                                                   :: GHC.Types.Coercible
                                                        Mlabs.Lending.Logic.Types.GovernAct
                                                        Mlabs.Lending.Logic.Types.CoinCfg)
                                      of wild1 [Occ=OnceL]
                                      { Mlabs.Lending.Logic.Types.CoinCfg ds _ [Occ=Dead] ds2 [Occ=OnceL]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Base.>>=
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad6
                                        @ Mlabs.Lending.Logic.Types.LendingPool
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (Control.Monad.State.Class.get
                                           @ Mlabs.Lending.Logic.Types.LendingPool
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonadState)
                                        (\ (st :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           GHC.Base.>>
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ ()
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (join {
                                                $j [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Control.Monad.Error.Class.throwError
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonadError7
                                                      @ ()
                                                      (GHC.Magic.noinline
                                                         @ (GHC.Base.String
                                                            -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                         (GHC.CString.unpackCString#
                                                            "Reserve is already present"#)) } in
                                              join {
                                                $j1 [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j1
                                                  = (\ (st1 [Occ=Once]
                                                          :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), st1))
                                                    `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                     <Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                     <()>_N)
                                                            :: GHC.Types.Coercible
                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                  -> Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       ((),
                                                                        Mlabs.Lending.Logic.Types.LendingPool))
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    ())) } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(Mlabs.Emulator.Types.Coin,
                                                       Mlabs.Lending.Logic.Types.Reserve)]
                                                     -> Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ()
                                                [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                go (ds5 [Occ=Once!]
                                                      :: [(Mlabs.Emulator.Types.Coin,
                                                           Mlabs.Lending.Logic.Types.Reserve)])
                                                  = case ds5 of {
                                                      [] -> jump $j;
                                                      : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                        case ds6 of { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                        case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                               (c'
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                               (ds
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                        of {
                                                          GHC.Types.False -> jump go xs';
                                                          GHC.Types.True -> jump $j1
                                                        }
                                                        }
                                                    }; } in
                                              jump go
                                                (case GHC.Types.eq_sel
                                                        @ *
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        $d~3
                                                 of co
                                                 { __DEFAULT ->
                                                 case st of
                                                 { Mlabs.Lending.Logic.Types.LendingPool ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                 ds5
                                                 `cast` (PlutusTx.AssocMap.N:Map[0]
                                                             <Mlabs.Emulator.Types.Coin>_R
                                                             <Mlabs.Lending.Logic.Types.Reserve>_R
                                                         :: GHC.Types.Coercible
                                                              (PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Reserve)
                                                              [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)])
                                                 }
                                                 }))
                                             (GHC.Base.>>
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonad6
                                                @ ()
                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                (Control.Monad.State.Class.put
                                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonadState
                                                   (case st of
                                                    { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                            ds6 [Occ=Once]
                                                                                            ds7 [Occ=Once]
                                                                                            _ [Occ=Dead]
                                                                                            ds9 [Occ=Once]
                                                                                            ds10 [Occ=Once]
                                                                                            ds11 [Occ=Once] ->
                                                    Mlabs.Lending.Logic.Types.$WLendingPool
                                                      (PlutusTx.AssocMap.unionWith
                                                         @ Mlabs.Emulator.Types.Coin
                                                         @ Mlabs.Lending.Logic.Types.Reserve
                                                         (Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.AssetClass>_N)
                                                                  :: GHC.Types.Coercible
                                                                       ((Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                         Plutus.V1.Ledger.Value.TokenName)
                                                                        -> (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                            Plutus.V1.Ledger.Value.TokenName)
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.AssetClass)))
                                                         (\ _ [Occ=Dead]
                                                            (b [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            b)
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 $d~1
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool ds12 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds12
                                                          }
                                                          })
                                                         ((GHC.Base.build
                                                             @ (Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)
                                                             (\ (@ a)
                                                                (c [Occ=Once!, OS=OneShot]
                                                                   :: (Mlabs.Emulator.Types.Coin,
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                      -> a -> a)
                                                                (n [Occ=Once, OS=OneShot] :: a) ->
                                                                c (ds,
                                                                   Mlabs.Lending.Logic.Types.initReserve
                                                                     wild1)
                                                                  n))
                                                          `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                           <Mlabs.Emulator.Types.Coin>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_R)
                                                                  :: GHC.Types.Coercible
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Reserve)]
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Reserve))))
                                                      ds6
                                                      ds7
                                                      (PlutusTx.AssocMap.insert
                                                         @ Plutus.V1.Ledger.Value.TokenName
                                                         @ Mlabs.Emulator.Types.Coin
                                                         (PlutusTx.Builtins.equalsByteString
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.TokenName>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.TokenName)))
                                                         ds2
                                                         ds
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 $d~2
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  ds15 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds15
                                                          }
                                                          }))
                                                      ds9
                                                      ds10
                                                      ds11
                                                    }))
                                                (GHC.Base.return
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp))))
                                      } } in
                                (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   case (m1
                                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                     <Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                     <()>_N
                                                 :: GHC.Types.Coercible
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         ())
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                          s1
                                   of {
                                     Data.Either.Left l [Occ=Once] ->
                                       Data.Either.Left
                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                         @ ([Mlabs.Emulator.Blockchain.Resp],
                                            Mlabs.Lending.Logic.Types.LendingPool)
                                         l;
                                     Data.Either.Right r [Occ=Once!] ->
                                       case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                       (k
                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                :: GHC.Types.Coercible
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        [Mlabs.Emulator.Blockchain.Resp])
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           ([Mlabs.Emulator.Blockchain.Resp],
                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                         s'
                                       }
                                   })
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]));
                              Mlabs.Lending.Logic.Types.QueryAct _ [Occ=Dead] _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   Data.Either.Right
                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                     @ ([Mlabs.Emulator.Blockchain.Resp],
                                        Mlabs.Lending.Logic.Types.LendingPool)
                                     (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]))
                            })
Context: Compiling expr: let {
                           $dMonad3
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad3
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $d~ [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet
                                GHC.Types.~ PlutusTx.AssocMap.Map
                                              Plutus.V1.Ledger.Value.AssetClass
                                              Mlabs.Lending.Logic.Types.Wallet
                           [LclId]
                           $d~
                             = GHC.Types.Eq#
                                 @ *
                                 @ (PlutusTx.AssocMap.Map
                                      Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
                                 @~ (<PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.AssetClass
                                        Mlabs.Lending.Logic.Types.Wallet>_N
                                     :: PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet
                                        ~ PlutusTx.AssocMap.Map
                                            Plutus.V1.Ledger.Value.AssetClass
                                            Mlabs.Lending.Logic.Types.Wallet) } in
                         let {
                           updateUserHealth
                             :: GHC.Integer.Type.Integer
                                -> (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                           [LclId, Arity=2]
                           updateUserHealth
                             = \ (currentTime [Occ=OnceL] :: GHC.Integer.Type.Integer)
                                 (ds [Occ=Once!]
                                    :: (Mlabs.Emulator.Types.UserId,
                                        Mlabs.Lending.Logic.Types.User)) ->
                                 case ds of { (uid, user) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   $dMonad3
                                   @ [(Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)]
                                   @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                   (let {
                                      ds1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                      [LclId]
                                      ds1 = 0 } in
                                    case GHC.Types.eq_sel
                                           @ *
                                           @ (PlutusTx.AssocMap.Map
                                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                           @ (PlutusTx.AssocMap.Map
                                                Plutus.V1.Ledger.Value.AssetClass
                                                Mlabs.Lending.Logic.Types.Wallet)
                                           $d~
                                    of co
                                    { __DEFAULT ->
                                    case user of
                                    { Mlabs.Lending.Logic.Types.User ds2 [Occ=Once] _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                    PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                      @ (Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                      @ Plutus.V1.Ledger.Value.AssetClass
                                      @ (Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)
                                      (Mlabs.Control.Monad.State.$fApplicativeStateT
                                         @ Mlabs.Lending.Logic.Types.LendingPool)
                                      (\ (asset :: Plutus.V1.Ledger.Value.AssetClass) ->
                                         let {
                                           ds5 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  PlutusTx.Ratio.Rational
                                           [LclId]
                                           ds5 = Mlabs.Lending.Logic.State.getHealth 0 asset user } in
                                         (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (ds5
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Ratio.Rational)
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     (PlutusTx.Ratio.Rational,
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   x
                                            of {
                                              Data.Either.Left c1 [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  c1;
                                              Data.Either.Right a1 [Occ=Once!] ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                   ((asset, v), st1)
                                                   })
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Plutus.V1.Ledger.Value.AssetClass,
                                                            PlutusTx.Ratio.Rational)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Plutus.V1.Ledger.Value.AssetClass,
                                                              PlutusTx.Ratio.Rational),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Plutus.V1.Ledger.Value.AssetClass,
                                                          PlutusTx.Ratio.Rational))))
                                      (PlutusTx.Functor.$fFunctor[]_$cfmap
                                         @ (Plutus.V1.Ledger.Value.AssetClass,
                                            Mlabs.Lending.Logic.Types.Wallet)
                                         @ Plutus.V1.Ledger.Value.AssetClass
                                         (\ (ds5 [Occ=Once!]
                                               :: (Plutus.V1.Ledger.Value.AssetClass,
                                                   Mlabs.Lending.Logic.Types.Wallet)) ->
                                            case ds5 of { (k1 [Occ=Once], _ [Occ=Dead]) -> k1 })
                                         (PlutusTx.List.foldr
                                            @ (Plutus.V1.Ledger.Value.AssetClass,
                                               Mlabs.Lending.Logic.Types.Wallet)
                                            @ [(Plutus.V1.Ledger.Value.AssetClass,
                                                Mlabs.Lending.Logic.Types.Wallet)]
                                            (\ (e :: (Plutus.V1.Ledger.Value.AssetClass,
                                                      Mlabs.Lending.Logic.Types.Wallet))
                                               (xs [Occ=Once*, OS=OneShot]
                                                  :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                       Mlabs.Lending.Logic.Types.Wallet)]) ->
                                               case PlutusTx.Builtins.Internal.ifThenElse
                                                      @ GHC.Types.Bool
                                                      (PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                                         (case e of { (_ [Occ=Dead], b1 [Occ=Once!]) ->
                                                          case b1 of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds8
                                                          }
                                                          })
                                                         ds1)
                                                      GHC.Types.False
                                                      GHC.Types.True
                                               of {
                                                 GHC.Types.False -> xs;
                                                 GHC.Types.True ->
                                                   GHC.Types.:
                                                     @ (Plutus.V1.Ledger.Value.AssetClass,
                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                     e
                                                     xs
                                               })
                                            (GHC.Types.[]
                                               @ (Plutus.V1.Ledger.Value.AssetClass,
                                                  Mlabs.Lending.Logic.Types.Wallet))
                                            (ds2
                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                         <Plutus.V1.Ledger.Value.AssetClass>_R
                                                         <Mlabs.Lending.Logic.Types.Wallet>_R
                                                     :: GHC.Types.Coercible
                                                          (PlutusTx.AssocMap.Map
                                                             Plutus.V1.Ledger.Value.AssetClass
                                                             Mlabs.Lending.Logic.Types.Wallet)
                                                          [(Plutus.V1.Ledger.Value.AssetClass,
                                                            Mlabs.Lending.Logic.Types.Wallet)]))))
                                    }
                                    })
                                   (\ (health
                                         :: [(Plutus.V1.Ledger.Value.AssetClass,
                                              PlutusTx.Ratio.Rational)]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad3
                                        @ ()
                                        @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                        (Mlabs.Data.List.mapM_
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           @ (Mlabs.Emulator.Types.Coin,
                                              PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                           $dMonad3
                                           (\ (ds1 [Occ=Once!]
                                                 :: (Mlabs.Emulator.Types.Coin,
                                                     PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)) ->
                                              case ds1 of { (asset, health1) ->
                                              let {
                                                y [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                [LclId]
                                                y = 1 } in
                                              let {
                                                y1 :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                [LclId]
                                                y1
                                                  = PlutusTx.Ratio.:%
                                                      @ GHC.Integer.Type.Integer
                                                      y
                                                      PlutusTx.Ratio.fromInteger1 } in
                                              join {
                                                $j [Occ=Once*T[0]] :: Mlabs.Lending.Logic.State.St ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Mlabs.Lending.Logic.State.modifyHealthReport
                                                      (let {
                                                         key [Occ=OnceL]
                                                           :: Mlabs.Lending.Logic.Types.BadBorrow
                                                         [LclId]
                                                         key
                                                           = Mlabs.Lending.Logic.Types.$WBadBorrow
                                                               uid asset } in
                                                       \ (ds2 [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Lending.Logic.Types.BadBorrow
                                                                 PlutusTx.Ratio.Rational) ->
                                                         letrec {
                                                           go [Occ=LoopBreaker]
                                                             :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                  PlutusTx.Ratio.Rational)]
                                                                -> [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)]
                                                           [LclId, Arity=1]
                                                           go
                                                             = \ (ds3 [Occ=Once!]
                                                                    :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                         PlutusTx.Ratio.Rational)]) ->
                                                                 case ds3 of {
                                                                   [] ->
                                                                     GHC.Types.[]
                                                                       @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational);
                                                                   : ds4 [Occ=Once!] rest [Occ=Once*] ->
                                                                     case ds4 of { (k1, v1 [Occ=Once]) ->
                                                                     case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                            k1 key
                                                                     of {
                                                                       GHC.Types.False ->
                                                                         GHC.Types.:
                                                                           @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                              PlutusTx.Ratio.Rational)
                                                                           (k1, v1)
                                                                           (go rest);
                                                                       GHC.Types.True -> rest
                                                                     }
                                                                     }
                                                                 }; } in
                                                         (go
                                                            (ds2
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                         <PlutusTx.Ratio.Rational>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Lending.Logic.Types.BadBorrow
                                                                             PlutusTx.Ratio.Rational)
                                                                          [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                            PlutusTx.Ratio.Rational)])))
                                                         `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                          <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                          <PlutusTx.Ratio.Rational>_R)
                                                                 :: GHC.Types.Coercible
                                                                      [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                        PlutusTx.Ratio.Rational)]
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))) } in
                                              case PlutusTx.Ratio.$fOrdRatio1 health1 y1 of {
                                                GHC.Types.False ->
                                                  case PlutusTx.Ratio.$fOrdRatio_$c<= health1 y1 of {
                                                    GHC.Types.False -> jump $j;
                                                    GHC.Types.True ->
                                                      Mlabs.Lending.Logic.State.modifyHealthReport
                                                        (PlutusTx.AssocMap.insert
                                                           @ Mlabs.Lending.Logic.Types.BadBorrow
                                                           @ (PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                                           (Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                            `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                             <Mlabs.Lending.Logic.Types.BadBorrow>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> GHC.Types.Bool)
                                                                         (PlutusTx.Eq.Eq
                                                                            Mlabs.Lending.Logic.Types.BadBorrow)))
                                                           (Mlabs.Lending.Logic.Types.$WBadBorrow uid asset)
                                                           health1)
                                                  };
                                                GHC.Types.True -> jump $j
                                              }
                                              })
                                           health)
                                        (let {
                                           a1 [Occ=OnceL] :: Mlabs.Lending.Logic.Types.User
                                           [LclId]
                                           a1
                                             = case user of
                                               { Mlabs.Lending.Logic.Types.User ds1 [Occ=Once] _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                               Mlabs.Lending.Logic.Types.$WUser
                                                 ds1
                                                 currentTime
                                                 (health
                                                  `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                   <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                   <PlutusTx.Ratio.Rational>_R)
                                                          :: GHC.Types.Coercible
                                                               [(Plutus.V1.Ledger.Value.AssetClass,
                                                                 PlutusTx.Ratio.Rational)]
                                                               (PlutusTx.AssocMap.Map
                                                                  Plutus.V1.Ledger.Value.AssetClass
                                                                  PlutusTx.Ratio.Rational)))
                                               } } in
                                         let {
                                           a2 [Occ=OnceL]
                                             :: (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                           [LclId]
                                           a2 = (uid, a1) } in
                                         (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            Data.Either.Right
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ ((Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User),
                                                 Mlabs.Lending.Logic.Types.LendingPool)
                                              (a2, st1))
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)))))
                                 } } in
                         let {
                           $dMonad4
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad4
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           withHealthCheck [Occ=Once*!]
                             :: GHC.Integer.Type.Integer
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                           [LclId, Arity=2]
                           withHealthCheck
                             = \ (time :: GHC.Integer.Type.Integer)
                                 (act [Occ=Once]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   Mlabs.Lending.Logic.React.qReact1
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   act
                                   (\ (res [Occ=Once] :: [Mlabs.Emulator.Blockchain.Resp]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        Mlabs.Lending.Logic.React.qReact1
                                        @ ()
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (GHC.Base.>>=
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [(Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)]
                                           @ ()
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              Mlabs.Lending.Logic.React.qReact1
                                              @ [(GHC.Integer.Type.Integer,
                                                  (Mlabs.Emulator.Types.UserId,
                                                   Mlabs.Lending.Logic.Types.User))]
                                              @ [(Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User)]
                                              (let {
                                                 f [Occ=OnceL]
                                                   :: (Mlabs.Emulator.Types.UserId,
                                                       Mlabs.Lending.Logic.Types.User)
                                                      -> (GHC.Integer.Type.Integer,
                                                          (Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User))
                                                 [LclId, Arity=1]
                                                 f = \ (ds [Occ=Once!]
                                                          :: (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)) ->
                                                       case ds of { (uid [Occ=Once], user) ->
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          (case GHC.Types.eq_sel
                                                                  @ *
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ GHC.Integer.Type.Integer
                                                                  Mlabs.Lending.Logic.React.react3
                                                           of co
                                                           { __DEFAULT ->
                                                           case user of
                                                           { Mlabs.Lending.Logic.Types.User _ [Occ=Dead]
                                                                                            ds2 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                           ds2
                                                           }
                                                           })
                                                          time,
                                                        (uid, user))
                                                       } } in
                                               let {
                                                 ds [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User)
                                                 [LclId]
                                                 ds
                                                   = Control.Monad.State.Class.gets
                                                       @ Mlabs.Lending.Logic.Types.LendingPool
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       @ (PlutusTx.AssocMap.Map
                                                            Mlabs.Emulator.Types.UserId
                                                            Mlabs.Lending.Logic.Types.User)
                                                       Mlabs.Lending.Logic.React.react2
                                                       Mlabs.Lending.Logic.Types.$sel:lp'users:LendingPool } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Emulator.Types.UserId
                                                                           Mlabs.Lending.Logic.Types.User))
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Emulator.Types.UserId
                                                                              Mlabs.Lending.Logic.Types.User,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                         (PlutusTx.Functor.$fFunctor[]_$cfmap
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User)
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            f
                                                            (v
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Emulator.Types.UserId>_R
                                                                         <Mlabs.Lending.Logic.Types.User>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Emulator.Types.UserId
                                                                             Mlabs.Lending.Logic.Types.User)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])),
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <[(GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User))]>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  ([(GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User))],
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               [(GHC.Integer.Type.Integer,
                                                                 (Mlabs.Emulator.Types.UserId,
                                                                  Mlabs.Lending.Logic.Types.User))])))
                                              (\ (us [Occ=Once]
                                                    :: [(GHC.Integer.Type.Integer,
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User))]) ->
                                                 let {
                                                   a1 [Occ=OnceL]
                                                     :: [(Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   a1
                                                     = PlutusTx.Functor.$fFunctor[]_$cfmap
                                                         @ (GHC.Integer.Type.Integer,
                                                            (Mlabs.Emulator.Types.UserId,
                                                             Mlabs.Lending.Logic.Types.User))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (PlutusTx.Prelude.snd
                                                            @ GHC.Integer.Type.Integer
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User))
                                                         (Mlabs.Data.List.take
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            userUpdateSpan
                                                            (PlutusTx.List.map
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User)))
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User))
                                                               (PlutusTx.Prelude.snd
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User)))
                                                               (Mlabs.Data.List.sortBy
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (GHC.Integer.Type.Integer,
                                                                      (Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)))
                                                                  (\ (x [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User))))
                                                                     (y [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User)))) ->
                                                                     PlutusTx.Ord.$fOrdInteger_$ccompare
                                                                       (case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        })
                                                                       (case y of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        }))
                                                                  (PlutusTx.List.map
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User))
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (GHC.Integer.Type.Integer,
                                                                         (Mlabs.Emulator.Types.UserId,
                                                                          Mlabs.Lending.Logic.Types.User)))
                                                                     (\ (x :: (GHC.Integer.Type.Integer,
                                                                               (Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User))) ->
                                                                        case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        case a2 of y [Occ=Once]
                                                                        { __DEFAULT ->
                                                                        (y, x)
                                                                        }
                                                                        })
                                                                     us)))) } in
                                                 (\ (st1 [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ([(Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User)],
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (a1, st1))
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <[(Mlabs.Emulator.Types.UserId,
                                                                     Mlabs.Lending.Logic.Types.User)]>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    ([(Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)],
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 [(Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User)]))))
                                           (\ (us [Occ=Once]
                                                 :: [(Mlabs.Emulator.Types.UserId,
                                                      Mlabs.Lending.Logic.Types.User)]) ->
                                              GHC.Base.>>=
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                Mlabs.Lending.Logic.React.qReact1
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.UserId
                                                     Mlabs.Lending.Logic.Types.User)
                                                @ ()
                                                (let {
                                                   ds [Occ=OnceL]
                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          [(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   ds
                                                     = PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                            @ Mlabs.Lending.Logic.Types.LendingPool)
                                                         (updateUserHealth time)
                                                         us } in
                                                 (\ (x [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    case (ds
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <[(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)]>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([(Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User)],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           x
                                                    of {
                                                      Data.Either.Left c1 [Occ=Once] ->
                                                        Data.Either.Left
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          c1;
                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                           (v
                                                            `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                             <Mlabs.Emulator.Types.UserId>_R
                                                                             <Mlabs.Lending.Logic.Types.User>_R)
                                                                    :: GHC.Types.Coercible
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User)]
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            Mlabs.Lending.Logic.Types.User)),
                                                            st1)
                                                           })
                                                    })
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Emulator.Types.UserId
                                                                     Mlabs.Lending.Logic.Types.User>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    (PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User,
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 (PlutusTx.AssocMap.Map
                                                                    Mlabs.Emulator.Types.UserId
                                                                    Mlabs.Lending.Logic.Types.User))))
                                                (\ (newUsers [Occ=OnceL]
                                                      :: PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User) ->
                                                   Mlabs.Lending.Logic.State.modifyUsers
                                                     ((\ (users [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User) ->
                                                         PlutusTx.Functor.$fFunctor[]_$cfmap
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              PlutusTx.These.These
                                                                Mlabs.Lending.Logic.Types.User
                                                                Mlabs.Lending.Logic.Types.User)
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           (\ (ds [Occ=Once!]
                                                                 :: (Mlabs.Emulator.Types.UserId,
                                                                     PlutusTx.These.These
                                                                       Mlabs.Lending.Logic.Types.User
                                                                       Mlabs.Lending.Logic.Types.User)) ->
                                                              case ds of { (c1 [Occ=Once], a1 [Occ=Once!]) ->
                                                              (c1,
                                                               case a1 of {
                                                                 PlutusTx.These.This a2 [Occ=Once] -> a2;
                                                                 PlutusTx.These.That b1 [Occ=Once] -> b1;
                                                                 PlutusTx.These.These a2 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                   a2
                                                               })
                                                              })
                                                           ((PlutusTx.AssocMap.union
                                                               @ Mlabs.Emulator.Types.UserId
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               (Mlabs.Emulator.Types.$fEqUserId_$c==
                                                                `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                                 <Mlabs.Emulator.Types.UserId>_N)
                                                                        :: GHC.Types.Coercible
                                                                             (Mlabs.Emulator.Types.UserId
                                                                              -> Mlabs.Emulator.Types.UserId
                                                                              -> GHC.Types.Bool)
                                                                             (PlutusTx.Eq.Eq
                                                                                Mlabs.Emulator.Types.UserId)))
                                                               newUsers
                                                               users)
                                                            `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                        <Mlabs.Emulator.Types.UserId>_R
                                                                        <PlutusTx.These.These
                                                                           Mlabs.Lending.Logic.Types.User
                                                                           Mlabs.Lending.Logic.Types.User>_R
                                                                    :: GHC.Types.Coercible
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            (PlutusTx.These.These
                                                                               Mlabs.Lending.Logic.Types.User
                                                                               Mlabs.Lending.Logic.Types.User))
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           PlutusTx.These.These
                                                                             Mlabs.Lending.Logic.Types.User
                                                                             Mlabs.Lending.Logic.Types.User)])))
                                                      `cast` (<PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User>_R
                                                              ->_R Sym (PlutusTx.AssocMap.N:Map[0]
                                                                            <Mlabs.Emulator.Types.UserId>_R
                                                                            <Mlabs.Lending.Logic.Types.User>_R)
                                                              :: GHC.Types.Coercible
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> [(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)])
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> PlutusTx.AssocMap.Map
                                                                         Mlabs.Emulator.Types.UserId
                                                                         Mlabs.Lending.Logic.Types.User))))))
                                        (GHC.Base.return
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           res)) } in
                         let {
                           $dMonadError3 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError3
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           calcAmountFor [Occ=OnceL*!]
                             :: forall b.
                                PlutusTx.Ord.Ord b =>
                                (Mlabs.Lending.Logic.Types.Wallet -> b)
                                -> Mlabs.Emulator.Types.UserId
                                -> Mlabs.Emulator.Types.Coin
                                -> b
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     b
                           [LclId, Arity=1]
                           calcAmountFor
                             = \ (@ b) ($dOrd [Occ=OnceL] :: PlutusTx.Ord.Ord b) ->
                                 let {
                                   $dMonad5 [Occ=OnceL]
                                     :: GHC.Base.Monad
                                          (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                   [LclId]
                                   $dMonad5
                                     = Control.Monad.Trans.State.Strict.$fMonadStateT
                                         @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         @ Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.$fMonadEither
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                 \ (extract [Occ=OnceL!] :: Mlabs.Lending.Logic.Types.Wallet -> b)
                                   (uid [Occ=Once] :: Mlabs.Emulator.Types.UserId)
                                   (asset [Occ=Once] :: Mlabs.Emulator.Types.Coin)
                                   (desiredAmount [Occ=OnceL] :: b) ->
                                   GHC.Base.>>=
                                     @ (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                     $dMonad5
                                     @ b
                                     @ b
                                     (let {
                                        ds [Occ=OnceL]
                                          :: Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                               Mlabs.Lending.Logic.Types.Wallet
                                        [LclId]
                                        ds = Mlabs.Lending.Logic.State.getWallet uid asset } in
                                      (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                         case (ds
                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <Mlabs.Lending.Logic.Types.Wallet>_N
                                                       :: GHC.Types.Coercible
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Wallet)
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (Mlabs.Lending.Logic.Types.Wallet,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                x
                                         of {
                                           Data.Either.Left c1 [Occ=Once] ->
                                             Data.Either.Left
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               c1;
                                           Data.Either.Right a1 [Occ=Once!] ->
                                             Data.Either.Right
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                (extract v, st1)
                                                })
                                         })
                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <b>_N)
                                              :: GHC.Types.Coercible
                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                   (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      b)))
                                     (\ (availableAmount [Occ=Once] :: b) ->
                                        let {
                                          a1 [Occ=OnceL] :: b
                                          [LclId]
                                          a1 = PlutusTx.Ord.min @ b $dOrd availableAmount desiredAmount } in
                                        (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           Data.Either.Right
                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                             @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                             (a1, st1))
                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                         <Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                         <b>_N)
                                                :: GHC.Types.Coercible
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        b))) } in
                         let {
                           $dMonadError4 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError4
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonad5
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad5
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError5 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError5
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError6 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError6
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         GHC.Base.>>
                           @ (Control.Monad.Trans.State.Strict.StateT
                                Mlabs.Lending.Logic.Types.LendingPool
                                (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           Mlabs.Lending.Logic.React.qReact1
                           @ ()
                           @ [Mlabs.Emulator.Blockchain.Resp]
                           (Mlabs.Lending.Logic.React.checkInput input)
                           (case input of {
                              Mlabs.Lending.Logic.Types.UserAct t uid act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (case act of {
                                     Mlabs.Lending.Logic.Types.DepositAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds2 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds2 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds2
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds8 [Occ=Once!] ->
                                                     case ds8 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds12 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds12
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ ()
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                 uid ds1 (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                              (GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ Mlabs.Emulator.Types.Coin
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.aToken ds1)
                                                 (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                    GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserve'
                                                         ds1
                                                         (\ (x [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            Data.Either.Right
                                                              @ Mlabs.Lending.Logic.State.Error
                                                              @ Mlabs.Lending.Logic.Types.Reserve
                                                              (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                 t x)))
                                                      (let {
                                                         a1 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                         [LclId]
                                                         a1
                                                           = GHC.Base.foldr
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               (PlutusTx.List.++
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.[]
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.:
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     (Mlabs.Emulator.Blockchain.Mint
                                                                        aCoin ds)
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp))
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           aCoin
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid aCoin ds)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              ds1
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 ds1
                                                                                 ds)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.[]
                                                                           @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                       (\ (st1 [Occ=Once]
                                                             :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool)
                                                            (a1, st1))
                                                       `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                        <Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                        <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                               :: GHC.Types.Coercible
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          ([Mlabs.Emulator.Blockchain.Resp],
                                                                           Mlabs.Lending.Logic.Types.LendingPool))
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       [Mlabs.Emulator.Blockchain.Resp]))))));
                                     Mlabs.Lending.Logic.Types.BorrowAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             join {
                                               $j [Occ=Once!T[1]]
                                                 :: (GHC.Integer.Type.Integer,
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         ((), Mlabs.Lending.Logic.Types.LendingPool)
                                               [LclId[JoinId(1)], Arity=1]
                                               $j (r [Occ=Once!, OS=OneShot]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                 = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                   case PlutusTx.Builtins.Internal.ifThenElse
                                                          @ GHC.Types.Bool
                                                          (PlutusTx.Builtins.Internal.lessThanInteger a1 ds)
                                                          GHC.Types.False
                                                          GHC.Types.True
                                                   of {
                                                     GHC.Types.False ->
                                                       ((Control.Monad.Error.Class.throwError
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonadError6
                                                           @ ()
                                                           (GHC.Magic.noinline
                                                              @ (GHC.Base.String
                                                                 -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                              (GHC.CString.unpackCString#
                                                                 "Not enough liquidity for asset"#)))
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        ())
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           ((),
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         s';
                                                     GHC.Types.True ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), s')
                                                   }
                                                   } } in
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 let {
                                                   r [Occ=Once]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                   [LclId]
                                                   r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve ds4 [Occ=Once!]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                        case ds4 of
                                                        { Mlabs.Lending.Logic.Types.Wallet ds10 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                        ds10
                                                        }
                                                        },
                                                        st1)
                                                       } } in
                                                 jump $j r
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ ()
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds3 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Wallet
                                               [LclId]
                                               ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                             (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                join {
                                                  $j [Occ=Once!T[1]]
                                                    :: (GHC.Integer.Type.Integer,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                  [LclId[JoinId(1)], Arity=1]
                                                  $j (r [Occ=Once!, OS=OneShot]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                    = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                      case PlutusTx.Builtins.Internal.ifThenElse
                                                             @ GHC.Types.Bool
                                                             (PlutusTx.Builtins.Internal.equalsInteger a1 0)
                                                             GHC.Types.True
                                                             GHC.Types.False
                                                      of {
                                                        GHC.Types.False ->
                                                          ((Control.Monad.Error.Class.throwError
                                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonadError5
                                                              @ ()
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "Collateral can not be used as borrow for user"#)))
                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <()>_N
                                                                   :: GHC.Types.Coercible
                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           ())
                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                         -> Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                              ((),
                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                            s';
                                                        GHC.Types.True ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                            (GHC.Tuple.(), s')
                                                      }
                                                      } } in
                                                case (ds3
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Wallet>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Wallet)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Wallet,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       s1
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    let {
                                                      r [Occ=Once]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                      [LclId]
                                                      r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                          (case v of
                                                           { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                              ds5 [Occ=Once]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead] ->
                                                           ds5
                                                           },
                                                           st1)
                                                          } } in
                                                    jump $j r
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             ())))
                                            (GHC.Base.>>
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ ()
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (let {
                                                  msg [Occ=OnceL]
                                                    :: PlutusTx.Builtins.Internal.BuiltinByteString
                                                  [LclId]
                                                  msg
                                                    = GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Not enough collateral to borrow"#) } in
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad5
                                                  @ GHC.Integer.Type.Integer
                                                  @ ()
                                                  (Mlabs.Lending.Logic.State.toAda ds1 ds)
                                                  (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>=
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad5
                                                       @ GHC.Types.Bool
                                                       @ ()
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad5
                                                          @ Mlabs.Lending.Logic.Types.User
                                                          @ GHC.Types.Bool
                                                          (Mlabs.Lending.Logic.State.getUser uid)
                                                          (Mlabs.Lending.Logic.State.getHealthCheck bor ds1))
                                                       (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                                          case isOk of {
                                                            GHC.Types.False ->
                                                              Control.Monad.Error.Class.throwError
                                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                $dMonadError4
                                                                @ ()
                                                                msg;
                                                            GHC.Types.True ->
                                                              (\ (st1 [Occ=Once]
                                                                    :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                                   (GHC.Tuple.(), st1))
                                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                               <Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                               <()>_N)
                                                                      :: GHC.Types.Coercible
                                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                                            -> Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                 ((),
                                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                                           (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                              ()))
                                                          })))
                                               (GHC.Base.>>
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ ()
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (GHC.Base.>>=
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ PlutusTx.Ratio.Rational
                                                     @ ()
                                                     (let {
                                                        ds3 [Occ=OnceL]
                                                          :: Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Reserve
                                                        [LclId]
                                                        ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                                      (\ (x [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         case (ds3
                                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                       :: GHC.Types.Coercible
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               Mlabs.Lending.Logic.Types.Reserve)
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  (Mlabs.Lending.Logic.Types.Reserve,
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                                x
                                                         of {
                                                           Data.Either.Left c1 [Occ=Once] ->
                                                             Data.Either.Left
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               c1;
                                                           Data.Either.Right a1 [Occ=Once!] ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (case a1 of
                                                                { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                                (case v of
                                                                 { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds9 [Occ=Once!] ->
                                                                 case ds9 of
                                                                 { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             ds13 [Occ=Once]
                                                                                                             _ [Occ=Dead] ->
                                                                 ds13
                                                                 }
                                                                 },
                                                                 st1)
                                                                })
                                                         })
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <PlutusTx.Ratio.Rational>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      PlutusTx.Ratio.Rational)))
                                                     (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                                        GHC.Base.>>
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ ()
                                                          @ ()
                                                          (Mlabs.Lending.Logic.State.modifyWallet'
                                                             uid
                                                             ds1
                                                             (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                Data.Either.Right
                                                                  @ Mlabs.Lending.Logic.State.Error
                                                                  @ Mlabs.Lending.Logic.Types.Wallet
                                                                  (case x of
                                                                   { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                      ds4 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      ds6 [Occ=Once] ->
                                                                   Mlabs.Lending.Logic.Types.$WWallet
                                                                     ds3
                                                                     ds4
                                                                     (PlutusTx.Builtins.Internal.addInteger
                                                                        (case x of
                                                                         { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds9 [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                         ds9
                                                                         })
                                                                        ds)
                                                                     ds6
                                                                   })))
                                                          (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                             ds1
                                                             (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                ni
                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                   PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                   ds)))))
                                                  (GHC.Base.>>
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ ()
                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                     (Mlabs.Lending.Logic.State.modifyReserve'
                                                        ds1
                                                        (\ (x [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                           Data.Either.Right
                                                             @ Mlabs.Lending.Logic.State.Error
                                                             @ Mlabs.Lending.Logic.Types.Reserve
                                                             (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                t x)))
                                                     (let {
                                                        a1 [Occ=OnceL]
                                                          :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                        [LclId]
                                                        a1
                                                          = PlutusTx.Builtins.Internal.subtractInteger
                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                              ds } in
                                                      let {
                                                        a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a2
                                                          = Mlabs.Emulator.Blockchain.Move
                                                              Mlabs.Emulator.Types.Self ds1 a1 } in
                                                      let {
                                                        a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a3 = Mlabs.Emulator.Blockchain.Move uid ds1 ds } in
                                                      let {
                                                        a4 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a4
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                              a3
                                                              (GHC.Types.[]
                                                                 @ Mlabs.Emulator.Blockchain.Resp) } in
                                                      let {
                                                        a5 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a5
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                      (\ (st1 [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ([Mlabs.Emulator.Blockchain.Resp],
                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                           (a5, st1))
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         ([Mlabs.Emulator.Blockchain.Resp],
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.RepayAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds9 [Occ=Once!] ->
                                                     case ds9 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds13 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds13
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ GHC.Integer.Type.Integer
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds3 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.Wallet
                                                 [LclId]
                                                 ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds3
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.Wallet>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.Wallet,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds6 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds6
                                                          },
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <GHC.Integer.Type.Integer>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (GHC.Integer.Type.Integer,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               GHC.Integer.Type.Integer)))
                                              (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                 let {
                                                   newBor :: GHC.Integer.Type.Integer
                                                   [LclId]
                                                   newBor
                                                     = PlutusTx.Builtins.Internal.subtractInteger bor ds } in
                                                 GHC.Base.>>
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ ()
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (case PlutusTx.Builtins.Internal.ifThenElse
                                                           @ GHC.Types.Bool
                                                           (PlutusTx.Builtins.Internal.lessThanInteger
                                                              newBor 0)
                                                           GHC.Types.False
                                                           GHC.Types.True
                                                    of {
                                                      GHC.Types.False ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (w [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       newBor)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                       ds4 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds6 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds3 ds4 0 ds6
                                                                    })
                                                             });
                                                      GHC.Types.True ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (x [Occ=Once!]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             Data.Either.Right
                                                               @ Mlabs.Lending.Logic.State.Error
                                                               @ Mlabs.Lending.Logic.Types.Wallet
                                                               (case x of
                                                                { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                   ds4 [Occ=Once]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds6 [Occ=Once] ->
                                                                Mlabs.Lending.Logic.Types.$WWallet
                                                                  ds3 ds4 newBor ds6
                                                                }))
                                                    })
                                                   (GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                         ds1
                                                         (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                                      (GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds1
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                            [LclId]
                                                            a1
                                                              = PlutusTx.Builtins.Internal.subtractInteger
                                                                  PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                  ds } in
                                                          let {
                                                            a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a2
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  uid ds1 a1 } in
                                                          let {
                                                            a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a3
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  Mlabs.Emulator.Types.Self ds1 ds } in
                                                          let {
                                                            a4 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a4
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                  a3
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp) } in
                                                          let {
                                                            a5 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a5
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a5, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.SwapBorrowRateModelAct _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.AddCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'deposit:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       amount)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.addInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self
                                                                     aCoin
                                                                     amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.RemoveCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'collateral:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni amount w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.subtractInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.WithdrawAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            m1 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   PlutusTx.Ratio.Rational
                                            [LclId]
                                            m1 = Mlabs.Lending.Logic.State.getCumulativeBalance uid ds } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (m1
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   PlutusTx.Ratio.Rational)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (PlutusTx.Ratio.Rational,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left l [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   l;
                                               Data.Either.Right r [Occ=Once!] ->
                                                 case r of { (a1, s' [Occ=Once*]) ->
                                                 let {
                                                   y :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                   [LclId]
                                                   y = PlutusTx.Ratio.:%
                                                         @ GHC.Integer.Type.Integer
                                                         ds1
                                                         PlutusTx.Ratio.fromInteger1 } in
                                                 case PlutusTx.Ratio.$fOrdRatio1 a1 y of {
                                                   GHC.Types.False ->
                                                     case PlutusTx.Ratio.$fOrdRatio_$c<= a1 y of {
                                                       GHC.Types.False ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                           (GHC.Tuple.(), s');
                                                       GHC.Types.True ->
                                                         ((Control.Monad.Error.Class.throwError
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                             $dMonadError3
                                                             @ ()
                                                             (GHC.Magic.noinline
                                                                @ (GHC.Base.String
                                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                (GHC.CString.unpackCString#
                                                                   "Not enough deposit to withdraw"#)))
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <()>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          ())
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ((),
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           s'
                                                     };
                                                   GHC.Types.True ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                       (GHC.Tuple.(), s')
                                                 }
                                                 }
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ PlutusTx.Ratio.Rational
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds2 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Reserve
                                               [LclId]
                                               ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds2
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Reserve>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Reserve,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            ds8 [Occ=Once!] ->
                                                        case ds8 of
                                                        { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds12 [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                        ds12
                                                        }
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.Ratio.Rational,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Ratio.Rational)))
                                            (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                               GHC.Base.>>
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ ()
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                    uid
                                                    ds
                                                    (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                       ni
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                          ds1)))
                                                 (GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ Mlabs.Emulator.Types.Coin
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (Mlabs.Lending.Logic.State.aToken ds)
                                                    (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                       GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a1
                                                              = GHC.Base.foldr
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (PlutusTx.List.++
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           ds
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds1))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid ds ds1)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              aCoin
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds1))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 aCoin
                                                                                 ds1)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.:
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (GHC.Base.build
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (\ (@ a2)
                                                                                 (c [Occ=Once!, OS=OneShot]
                                                                                    :: Mlabs.Emulator.Blockchain.Resp
                                                                                       -> a2 -> a2)
                                                                                 (n [Occ=Once, OS=OneShot]
                                                                                    :: a2) ->
                                                                                 c (Mlabs.Emulator.Blockchain.Burn
                                                                                      aCoin ds1)
                                                                                   n))
                                                                           (GHC.Types.[]
                                                                              @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a1, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.FlashLoanAct ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.LiquidationCallAct ds ds1 ds2
                                                                                  ds3 [Occ=OnceL!] ->
                                       let {
                                         $dMonadError7 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError7
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError8
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError8
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError9 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError9
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError10 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError10
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadState
                                           :: Control.Monad.State.Class.MonadState
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadState
                                           = Control.Monad.State.Class.$fMonadStatesStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         borrowUserId :: Mlabs.Emulator.Types.UserId
                                         [LclId]
                                         borrowUserId
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow ds4 [Occ=Once]
                                                                                   _ [Occ=Dead] ->
                                             ds4
                                             } } in
                                       let {
                                         borrowAsset :: Plutus.V1.Ledger.Value.AssetClass
                                         [LclId]
                                         borrowAsset
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow _ [Occ=Dead]
                                                                                   ds5 [Occ=Once] ->
                                             ds5
                                             } } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            (Control.Monad.State.Class.$p1MonadState
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonadState)
                                            @ GHC.Types.Bool
                                            @ ()
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.AssocMap.Map
                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                         PlutusTx.Ratio.Rational)
                                               [LclId]
                                               ds4
                                                 = Control.Monad.State.Class.gets
                                                     @ Mlabs.Lending.Logic.Types.LendingPool
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     @ Mlabs.Lending.Logic.Types.HealthReport
                                                     $dMonadState
                                                     Mlabs.Lending.Logic.Types.$sel:lp'healthReport:LendingPool } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Lending.Logic.Types.BadBorrow
                                                                     PlutusTx.Ratio.Rational>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Lending.Logic.Types.BadBorrow
                                                                            PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                       (joinrec {
                                                          go [Occ=LoopBreakerT[1]]
                                                            :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                 PlutusTx.Ratio.Rational)]
                                                               -> GHC.Types.Bool
                                                          [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                          go (ds5 [Occ=Once!]
                                                                :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)])
                                                            = case ds5 of {
                                                                [] -> GHC.Types.False;
                                                                : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                                  case ds6 of
                                                                  { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                                  case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                         c' ds1
                                                                  of {
                                                                    GHC.Types.False -> jump go xs';
                                                                    GHC.Types.True -> GHC.Types.True
                                                                  }
                                                                  }
                                                              }; } in
                                                        jump go
                                                          (v
                                                           `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                       <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                       <PlutusTx.Ratio.Rational>_R
                                                                   :: GHC.Types.Coercible
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                                           PlutusTx.Ratio.Rational)
                                                                        [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational)])),
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <GHC.Types.Bool>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (GHC.Types.Bool,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             GHC.Types.Bool)))
                                            (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                               case isOk of {
                                                 GHC.Types.False ->
                                                   Control.Monad.Error.Class.throwError
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonadError8
                                                     @ ()
                                                     (GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Bad borrow not present"#));
                                                 GHC.Types.True ->
                                                   (\ (st1 [Occ=Once]
                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                        (GHC.Tuple.(), st1))
                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N)
                                                           :: GHC.Types.Coercible
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      ((),
                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   ()))
                                               }))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ (PlutusTx.AssocMap.Map
                                                 Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.User
                                               [LclId]
                                               ds4
                                                 = Mlabs.Lending.Logic.State.getUser
                                                     (case ds1 of
                                                      { Mlabs.Lending.Logic.Types.BadBorrow ds5 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                      ds5
                                                      }) } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.User>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.User)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.User,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.User ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                        ds5
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Wallet>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.Coin
                                                                   Mlabs.Lending.Logic.Types.Wallet,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             (PlutusTx.AssocMap.Map
                                                                Mlabs.Emulator.Types.Coin
                                                                Mlabs.Lending.Logic.Types.Wallet))))
                                            (\ (wals
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Wallet) ->
                                               GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ GHC.Integer.Type.Integer
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (join {
                                                    $j [Occ=OnceLT[0]]
                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           GHC.Integer.Type.Integer
                                                    [LclId[JoinId(0)]]
                                                    $j
                                                      = Control.Monad.Error.Class.throwError
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonadError7
                                                          @ GHC.Integer.Type.Integer
                                                          (GHC.Magic.noinline
                                                             @ (GHC.Base.String
                                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                             (GHC.CString.unpackCString#
                                                                "Wallet does not have the debt to liquidate"#)) } in
                                                  join {
                                                    $j1 [Occ=OnceL!T[1]]
                                                      :: Mlabs.Lending.Logic.Types.Wallet
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1]
                                                    $j1 (wal [Occ=Once!, OS=OneShot]
                                                           :: Mlabs.Lending.Logic.Types.Wallet)
                                                      = let {
                                                          a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                          [LclId]
                                                          a1
                                                            = case wal of
                                                              { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds6 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                              ds6
                                                              } } in
                                                        (\ (st1 [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                           Data.Either.Right
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (GHC.Integer.Type.Integer,
                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                             (a1, st1))
                                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <GHC.Integer.Type.Integer>_N)
                                                                :: GHC.Types.Coercible
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (GHC.Integer.Type.Integer,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        GHC.Integer.Type.Integer)) } in
                                                  joinrec {
                                                    go [Occ=LoopBreakerT[1]]
                                                      :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                           Mlabs.Lending.Logic.Types.Wallet)]
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                    go (ds4 [Occ=Once!]
                                                          :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                               Mlabs.Lending.Logic.Types.Wallet)])
                                                      = case ds4 of {
                                                          [] -> jump $j;
                                                          : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                            case ds5 of { (c' [Occ=Once], i [Occ=Once]) ->
                                                            case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                   (c'
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                                   (borrowAsset
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                            of {
                                                              GHC.Types.False -> jump go xs';
                                                              GHC.Types.True -> jump $j1 i
                                                            }
                                                            }
                                                        }; } in
                                                  jump go
                                                    (wals
                                                     `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                 <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                 <Mlabs.Lending.Logic.Types.Wallet>_R
                                                             :: GHC.Types.Coercible
                                                                  (PlutusTx.AssocMap.Map
                                                                     Plutus.V1.Ledger.Value.AssetClass
                                                                     Mlabs.Lending.Logic.Types.Wallet)
                                                                  [(Plutus.V1.Ledger.Value.AssetClass,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])))
                                                 (\ (bor [Occ=OnceL] :: GHC.Integer.Type.Integer) ->
                                                    GHC.Base.>>=
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ GHC.Integer.Type.Integer
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (join {
                                                         $j [Occ=OnceLT[0]]
                                                           :: Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                GHC.Integer.Type.Integer
                                                         [LclId[JoinId(0)]]
                                                         $j
                                                           = Control.Monad.Error.Class.throwError
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                                               $dMonadError10
                                                               @ GHC.Integer.Type.Integer
                                                               (GHC.Magic.noinline
                                                                  @ (GHC.Base.String
                                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                  (GHC.CString.unpackCString#
                                                                     "Wallet does not have collateral for liquidation asset"#)) } in
                                                       join {
                                                         $j1 [Occ=OnceL!T[1]]
                                                           :: Mlabs.Lending.Logic.Types.Wallet
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1]
                                                         $j1 (wal [Occ=Once!, OS=OneShot]
                                                                :: Mlabs.Lending.Logic.Types.Wallet)
                                                           = let {
                                                               a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                               [LclId]
                                                               a1
                                                                 = case wal of
                                                                   { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                      ds5 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      _ [Occ=Dead] ->
                                                                   ds5
                                                                   } } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a1, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <GHC.Integer.Type.Integer>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                (GHC.Integer.Type.Integer,
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             GHC.Integer.Type.Integer)) } in
                                                       joinrec {
                                                         go [Occ=LoopBreakerT[1]]
                                                           :: [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Wallet)]
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                         go (ds4 [Occ=Once!]
                                                               :: [(Mlabs.Emulator.Types.Coin,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])
                                                           = case ds4 of {
                                                               [] -> jump $j;
                                                               : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                                 case ds5 of
                                                                 { (c' [Occ=Once], i [Occ=Once]) ->
                                                                 case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                        (c'
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                        (ds
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                 of {
                                                                   GHC.Types.False -> jump go xs';
                                                                   GHC.Types.True -> jump $j1 i
                                                                 }
                                                                 }
                                                             }; } in
                                                       jump go
                                                         (wals
                                                          `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                      <Mlabs.Emulator.Types.Coin>_R
                                                                      <Mlabs.Lending.Logic.Types.Wallet>_R
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Wallet)
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Wallet)])))
                                                      (\ (col :: GHC.Integer.Type.Integer) ->
                                                         GHC.Base.>>
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonad6
                                                           @ ()
                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                           (Mlabs.Control.Check.isPositive
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                                 @ Mlabs.Lending.Logic.Types.LendingPool)
                                                              $dMonadError8
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "liquidation collateral"#))
                                                              col)
                                                           (GHC.Base.>>
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonad6
                                                              @ ()
                                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                                              (case PlutusTx.Builtins.Internal.ifThenElse
                                                                      @ GHC.Types.Bool
                                                                      (PlutusTx.Builtins.Internal.lessThanInteger
                                                                         bor
                                                                         (PlutusTx.Builtins.Internal.multiplyInteger
                                                                            2 ds2))
                                                                      GHC.Types.False
                                                                      GHC.Types.True
                                                               of {
                                                                 GHC.Types.False ->
                                                                   Control.Monad.Error.Class.throwError
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                     $dMonadError9
                                                                     @ ()
                                                                     (GHC.Magic.noinline
                                                                        @ (GHC.Base.String
                                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                        (GHC.CString.unpackCString#
                                                                           "Can not cover more than half of the borrow"#));
                                                                 GHC.Types.True ->
                                                                   (\ (st1 [Occ=Once]
                                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                      Data.Either.Right
                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        @ ((),
                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                        (GHC.Tuple.(), st1))
                                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                    <Data.Either.Either
                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                    <()>_N)
                                                                           :: GHC.Types.Coercible
                                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                                 -> Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      ((),
                                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                   (Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                   ()))
                                                               })
                                                              (GHC.Base.>>=
                                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                 $dMonad6
                                                                 @ GHC.Integer.Type.Integer
                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                 (let {
                                                                    ds4 [Occ=OnceL]
                                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           GHC.Integer.Type.Integer
                                                                    [LclId]
                                                                    ds4
                                                                      = GHC.Base.>>=
                                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                          Mlabs.Lending.Logic.State.aToken2
                                                                          @ GHC.Integer.Type.Integer
                                                                          @ GHC.Integer.Type.Integer
                                                                          (Mlabs.Lending.Logic.State.toAda
                                                                             borrowAsset ds2)
                                                                          (Mlabs.Lending.Logic.State.fromAda
                                                                             ds) } in
                                                                  (\ (x [Occ=Once]
                                                                        :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                     case (ds4
                                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                       <Data.Either.Either
                                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                       <GHC.Integer.Type.Integer>_N
                                                                                   :: GHC.Types.Coercible
                                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                           GHC.Integer.Type.Integer)
                                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                                         -> Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                              (GHC.Integer.Type.Integer,
                                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                                            x
                                                                     of {
                                                                       Data.Either.Left c1 [Occ=Once] ->
                                                                         Data.Either.Left
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           c1;
                                                                       Data.Either.Right a1 [Occ=Once!] ->
                                                                         Data.Either.Right
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           (case a1 of
                                                                            { (v [Occ=Once],
                                                                               st1 [Occ=Once]) ->
                                                                            (PlutusTx.Ord.$fOrdInteger_$cmin
                                                                               col v,
                                                                             st1)
                                                                            })
                                                                     })
                                                                  `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                   <Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                   <GHC.Integer.Type.Integer>_N)
                                                                          :: GHC.Types.Coercible
                                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                                -> Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                     (GHC.Integer.Type.Integer,
                                                                                      Mlabs.Lending.Logic.Types.LendingPool))
                                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                                  (Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                  GHC.Integer.Type.Integer)))
                                                                 (\ (colCovered
                                                                       :: GHC.Integer.Type.Integer) ->
                                                                    GHC.Base.>>=
                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                      $dMonad6
                                                                      @ GHC.Integer.Type.Integer
                                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                                      (GHC.Base.>>=
                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                         $dMonad6
                                                                         @ PlutusTx.Ratio.Rational
                                                                         @ GHC.Integer.Type.Integer
                                                                         (Mlabs.Lending.Logic.State.getLiquidationBonus
                                                                            ds)
                                                                         (\ (rate [Occ=Once!]
                                                                               :: PlutusTx.Ratio.Rational) ->
                                                                            Mlabs.Lending.Logic.State.toAda
                                                                              ds
                                                                              (PlutusTx.Ratio.round
                                                                                 (case rate of
                                                                                  { PlutusTx.Ratio.:% x' [Occ=Once]
                                                                                                      y' [Occ=Once] ->
                                                                                  PlutusTx.Ratio.reduce
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       colCovered x')
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       PlutusTx.Ratio.fromInteger1
                                                                                       y')
                                                                                  }))))
                                                                      (\ (adaBonus
                                                                            :: GHC.Integer.Type.Integer) ->
                                                                         GHC.Base.>>=
                                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                (Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                           $dMonad6
                                                                           @ Mlabs.Emulator.Types.Coin
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (Mlabs.Lending.Logic.State.aToken
                                                                              ds)
                                                                           (\ (aCollateralAsset [Occ=Once]
                                                                                 :: Mlabs.Emulator.Types.Coin) ->
                                                                              GHC.Base.>>
                                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                                     (Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                $dMonad6
                                                                                @ ()
                                                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                (GHC.Base.>>
                                                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                        (Data.Either.Either
                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                   $dMonad6
                                                                                   @ ()
                                                                                   @ ()
                                                                                   (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                      borrowUserId
                                                                                      ds
                                                                                      (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                         Data.Either.Right
                                                                                           @ Mlabs.Lending.Logic.State.Error
                                                                                           @ Mlabs.Lending.Logic.Types.Wallet
                                                                                           (case x of
                                                                                            { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               ds6 [Occ=Once]
                                                                                                                               ds7 [Occ=Once] ->
                                                                                            Mlabs.Lending.Logic.Types.$WWallet
                                                                                              ds4
                                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                 (case x of
                                                                                                  { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                     ds9 [Occ=Once]
                                                                                                                                     _ [Occ=Dead]
                                                                                                                                     _ [Occ=Dead] ->
                                                                                                  ds9
                                                                                                  })
                                                                                                 colCovered)
                                                                                              ds6
                                                                                              ds7
                                                                                            })))
                                                                                   (GHC.Base.>>
                                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                      $dMonad6
                                                                                      @ ()
                                                                                      @ ()
                                                                                      (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                         borrowUserId
                                                                                         borrowAsset
                                                                                         (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                            Data.Either.Right
                                                                                              @ Mlabs.Lending.Logic.State.Error
                                                                                              @ Mlabs.Lending.Logic.Types.Wallet
                                                                                              (case x of
                                                                                               { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                                  ds5 [Occ=Once]
                                                                                                                                  _ [Occ=Dead]
                                                                                                                                  ds7 [Occ=Once] ->
                                                                                               Mlabs.Lending.Logic.Types.$WWallet
                                                                                                 ds4
                                                                                                 ds5
                                                                                                 (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                    (case x
                                                                                                     of
                                                                                                     { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds10 [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                     ds10
                                                                                                     })
                                                                                                    ds2)
                                                                                                 ds7
                                                                                               })))
                                                                                      (GHC.Base.>>=
                                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                                              (Data.Either.Either
                                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                         $dMonad4
                                                                                         @ Mlabs.Lending.Logic.Types.User
                                                                                         @ ()
                                                                                         (Mlabs.Lending.Logic.State.getUser
                                                                                            borrowUserId)
                                                                                         (\ (user [Occ=Once]
                                                                                               :: Mlabs.Lending.Logic.Types.User) ->
                                                                                            GHC.Base.>>=
                                                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                                   (Data.Either.Either
                                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                              $dMonad4
                                                                                              @ Mlabs.Lending.Logic.Types.User
                                                                                              @ ()
                                                                                              (let {
                                                                                                 ds4 [Occ=OnceL]
                                                                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                        (Data.Either.Either
                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                         Mlabs.Lending.Logic.Types.User)
                                                                                                 [LclId]
                                                                                                 ds4
                                                                                                   = updateUserHealth
                                                                                                       t
                                                                                                       (borrowUserId,
                                                                                                        user) } in
                                                                                               (\ (x [Occ=Once]
                                                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                                  case (ds4
                                                                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                    <Data.Either.Either
                                                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                    <(Mlabs.Emulator.Types.UserId,
                                                                                                                      Mlabs.Lending.Logic.Types.User)>_N
                                                                                                                :: GHC.Types.Coercible
                                                                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                        (Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                                         Mlabs.Lending.Logic.Types.User))
                                                                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                      -> Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                           ((Mlabs.Emulator.Types.UserId,
                                                                                                                             Mlabs.Lending.Logic.Types.User),
                                                                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                                                                         x
                                                                                                  of {
                                                                                                    Data.Either.Left c1 [Occ=Once] ->
                                                                                                      Data.Either.Left
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        c1;
                                                                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                                                                      Data.Either.Right
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        (case a1
                                                                                                         of
                                                                                                         { (v [Occ=Once!],
                                                                                                            st1 [Occ=Once]) ->
                                                                                                         (case v
                                                                                                          of
                                                                                                          { (_ [Occ=Dead],
                                                                                                             b1 [Occ=Once]) ->
                                                                                                          b1
                                                                                                          },
                                                                                                          st1)
                                                                                                         })
                                                                                                  })
                                                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                <Data.Either.Either
                                                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                <Mlabs.Lending.Logic.Types.User>_N)
                                                                                                       :: GHC.Types.Coercible
                                                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                             -> Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                  (Mlabs.Lending.Logic.Types.User,
                                                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                                                               (Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                               Mlabs.Lending.Logic.Types.User)))
                                                                                              (\ (newUser [Occ=OnceL]
                                                                                                    :: Mlabs.Lending.Logic.Types.User) ->
                                                                                                 Mlabs.Lending.Logic.State.modifyUser'
                                                                                                   borrowUserId
                                                                                                   (\ _ [Occ=Dead] ->
                                                                                                      Data.Either.Right
                                                                                                        @ Mlabs.Lending.Logic.State.Error
                                                                                                        @ Mlabs.Lending.Logic.Types.User
                                                                                                        newUser))))))
                                                                                (let {
                                                                                   a1 [Occ=OnceL]
                                                                                     :: [Mlabs.Emulator.Blockchain.Resp]
                                                                                   [LclId]
                                                                                   a1
                                                                                     = GHC.Base.foldr
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         (PlutusTx.List.++
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.[]
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.:
                                                                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                            (GHC.Types.:
                                                                                               @ Mlabs.Emulator.Blockchain.Resp
                                                                                               (Mlabs.Emulator.Blockchain.Move
                                                                                                  uid
                                                                                                  borrowAsset
                                                                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                     ds2))
                                                                                               (GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     borrowAsset
                                                                                                     ds2)
                                                                                                  (GHC.Types.[]
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                            (GHC.Types.:
                                                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                               (let {
                                                                                                  coin
                                                                                                    :: Mlabs.Emulator.Types.Coin
                                                                                                  [LclId]
                                                                                                  coin
                                                                                                    = case ds3
                                                                                                      of {
                                                                                                        GHC.Types.False ->
                                                                                                          ds;
                                                                                                        GHC.Types.True ->
                                                                                                          aCollateralAsset
                                                                                                      } } in
                                                                                                GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     coin
                                                                                                     (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                        PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                        colCovered))
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        uid
                                                                                                        coin
                                                                                                        colCovered)
                                                                                                     (GHC.Types.[]
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                               (GHC.Types.:
                                                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        Mlabs.Emulator.Types.Self
                                                                                                        Mlabs.Emulator.Types.adaCoin
                                                                                                        (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                           PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                           adaBonus))
                                                                                                     (GHC.Types.:
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                                                           uid
                                                                                                           Mlabs.Emulator.Types.adaCoin
                                                                                                           adaBonus)
                                                                                                        (GHC.Types.[]
                                                                                                           @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                                  (GHC.Types.[]
                                                                                                     @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                                                 (\ (st1 [Occ=Once]
                                                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                    Data.Either.Right
                                                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                                                      (a1, st1))
                                                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                  <Data.Either.Either
                                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                  <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                                         :: GHC.Types.Coercible
                                                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                                                               -> Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                    ([Mlabs.Emulator.Blockchain.Resp],
                                                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                                 (Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                 [Mlabs.Emulator.Blockchain.Resp]))))))))))))
                                   });
                              Mlabs.Lending.Logic.Types.PriceAct t uid [Occ=Once]
                                                                 act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (let {
                                     m1 [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            ()
                                     [LclId]
                                     m1 = Mlabs.Lending.Logic.State.isTrustedOracle uid } in
                                   let {
                                     k [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            [Mlabs.Emulator.Blockchain.Resp]
                                     [LclId]
                                     k = case act of
                                         { Mlabs.Lending.Logic.Types.SetAssetPriceAct coin [Occ=Once]
                                                                                      rate [Occ=OnceL] ->
                                         let {
                                           m2 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  ()
                                           [LclId]
                                           m2
                                             = Mlabs.Lending.Logic.State.modifyReserve'
                                                 coin
                                                 (\ (x [Occ=Once!] :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                    Data.Either.Right
                                                      @ Mlabs.Lending.Logic.State.Error
                                                      @ Mlabs.Lending.Logic.Types.Reserve
                                                      (case x of
                                                       { Mlabs.Lending.Logic.Types.Reserve ds [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           ds2 [Occ=Once]
                                                                                           ds3 [Occ=Once]
                                                                                           ds4 [Occ=Once]
                                                                                           ds5 [Occ=Once] ->
                                                       Mlabs.Lending.Logic.Types.$WReserve
                                                         ds
                                                         (Mlabs.Lending.Logic.Types.$WCoinRate rate t)
                                                         ds2
                                                         ds3
                                                         ds4
                                                         ds5
                                                       })) } in
                                         (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (m2
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  ())
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   s1
                                            of {
                                              Data.Either.Left l [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  l;
                                              Data.Either.Right r [Occ=Once!] ->
                                                case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, s')
                                                }
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ([Mlabs.Emulator.Blockchain.Resp],
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         [Mlabs.Emulator.Blockchain.Resp]))
                                         } } in
                                   (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                      case (m1
                                            `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                        <Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                        <()>_N
                                                    :: GHC.Types.Coercible
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ())
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                             s1
                                      of {
                                        Data.Either.Left l [Occ=Once] ->
                                          Data.Either.Left
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                               Mlabs.Lending.Logic.Types.LendingPool)
                                            l;
                                        Data.Either.Right r [Occ=Once!] ->
                                          case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                          (k
                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                   :: GHC.Types.Coercible
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp])
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                            s'
                                          }
                                      })
                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                           :: GHC.Types.Coercible
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])));
                              Mlabs.Lending.Logic.Types.GovernAct uid [Occ=Once]
                                                                  act [Occ=Once] ->
                                let {
                                  m1 [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         ()
                                  [LclId]
                                  m1 = Mlabs.Lending.Logic.State.isAdmin uid } in
                                let {
                                  k [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]
                                  [LclId]
                                  k = let {
                                        $dMonadError7
                                          :: Control.Monad.Error.Class.MonadError
                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadError7
                                          = Control.Monad.Error.Class.$fMonadErroreStateT
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Control.Monad.Error.Class.$fMonadErroreEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonadState
                                          :: Control.Monad.State.Class.MonadState
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadState
                                          = Control.Monad.State.Class.$fMonadStatesStateT
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.$fMonadEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonad6
                                          :: GHC.Base.Monad
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonad6
                                          = Control.Monad.Error.Class.$p1MonadError
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonadError7 } in
                                      let {
                                        $d~1 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~1
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Mlabs.Emulator.Types.Coin
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      let {
                                        $d~2 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Plutus.V1.Ledger.Value.TokenName Mlabs.Emulator.Types.Coin
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Plutus.V1.Ledger.Value.TokenName
                                                           Mlabs.Emulator.Types.Coin
                                        [LclId]
                                        $d~2
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     Mlabs.Emulator.Types.Coin>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.TokenName
                                                       Mlabs.Emulator.Types.Coin
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.TokenName
                                                         Mlabs.Emulator.Types.Coin) } in
                                      let {
                                        $d~3 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~3
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.AssetClass
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.AssetClass
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.AssetClass
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      case act
                                           `cast` (Mlabs.Lending.Logic.Types.N:GovernAct[0]
                                                   :: GHC.Types.Coercible
                                                        Mlabs.Lending.Logic.Types.GovernAct
                                                        Mlabs.Lending.Logic.Types.CoinCfg)
                                      of wild1 [Occ=OnceL]
                                      { Mlabs.Lending.Logic.Types.CoinCfg ds _ [Occ=Dead] ds2 [Occ=OnceL]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Base.>>=
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad6
                                        @ Mlabs.Lending.Logic.Types.LendingPool
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (Control.Monad.State.Class.get
                                           @ Mlabs.Lending.Logic.Types.LendingPool
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonadState)
                                        (\ (st :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           GHC.Base.>>
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ ()
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (join {
                                                $j [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Control.Monad.Error.Class.throwError
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonadError7
                                                      @ ()
                                                      (GHC.Magic.noinline
                                                         @ (GHC.Base.String
                                                            -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                         (GHC.CString.unpackCString#
                                                            "Reserve is already present"#)) } in
                                              join {
                                                $j1 [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j1
                                                  = (\ (st1 [Occ=Once]
                                                          :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), st1))
                                                    `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                     <Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                     <()>_N)
                                                            :: GHC.Types.Coercible
                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                  -> Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       ((),
                                                                        Mlabs.Lending.Logic.Types.LendingPool))
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    ())) } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(Mlabs.Emulator.Types.Coin,
                                                       Mlabs.Lending.Logic.Types.Reserve)]
                                                     -> Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ()
                                                [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                go (ds5 [Occ=Once!]
                                                      :: [(Mlabs.Emulator.Types.Coin,
                                                           Mlabs.Lending.Logic.Types.Reserve)])
                                                  = case ds5 of {
                                                      [] -> jump $j;
                                                      : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                        case ds6 of { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                        case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                               (c'
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                               (ds
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                        of {
                                                          GHC.Types.False -> jump go xs';
                                                          GHC.Types.True -> jump $j1
                                                        }
                                                        }
                                                    }; } in
                                              jump go
                                                (case GHC.Types.eq_sel
                                                        @ *
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        $d~3
                                                 of co
                                                 { __DEFAULT ->
                                                 case st of
                                                 { Mlabs.Lending.Logic.Types.LendingPool ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                 ds5
                                                 `cast` (PlutusTx.AssocMap.N:Map[0]
                                                             <Mlabs.Emulator.Types.Coin>_R
                                                             <Mlabs.Lending.Logic.Types.Reserve>_R
                                                         :: GHC.Types.Coercible
                                                              (PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Reserve)
                                                              [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)])
                                                 }
                                                 }))
                                             (GHC.Base.>>
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonad6
                                                @ ()
                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                (Control.Monad.State.Class.put
                                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonadState
                                                   (case st of
                                                    { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                            ds6 [Occ=Once]
                                                                                            ds7 [Occ=Once]
                                                                                            _ [Occ=Dead]
                                                                                            ds9 [Occ=Once]
                                                                                            ds10 [Occ=Once]
                                                                                            ds11 [Occ=Once] ->
                                                    Mlabs.Lending.Logic.Types.$WLendingPool
                                                      (PlutusTx.AssocMap.unionWith
                                                         @ Mlabs.Emulator.Types.Coin
                                                         @ Mlabs.Lending.Logic.Types.Reserve
                                                         (Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.AssetClass>_N)
                                                                  :: GHC.Types.Coercible
                                                                       ((Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                         Plutus.V1.Ledger.Value.TokenName)
                                                                        -> (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                            Plutus.V1.Ledger.Value.TokenName)
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.AssetClass)))
                                                         (\ _ [Occ=Dead]
                                                            (b [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            b)
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 $d~1
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool ds12 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds12
                                                          }
                                                          })
                                                         ((GHC.Base.build
                                                             @ (Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)
                                                             (\ (@ a)
                                                                (c [Occ=Once!, OS=OneShot]
                                                                   :: (Mlabs.Emulator.Types.Coin,
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                      -> a -> a)
                                                                (n [Occ=Once, OS=OneShot] :: a) ->
                                                                c (ds,
                                                                   Mlabs.Lending.Logic.Types.initReserve
                                                                     wild1)
                                                                  n))
                                                          `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                           <Mlabs.Emulator.Types.Coin>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_R)
                                                                  :: GHC.Types.Coercible
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Reserve)]
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Reserve))))
                                                      ds6
                                                      ds7
                                                      (PlutusTx.AssocMap.insert
                                                         @ Plutus.V1.Ledger.Value.TokenName
                                                         @ Mlabs.Emulator.Types.Coin
                                                         (PlutusTx.Builtins.equalsByteString
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.TokenName>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.TokenName)))
                                                         ds2
                                                         ds
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 $d~2
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  ds15 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds15
                                                          }
                                                          }))
                                                      ds9
                                                      ds10
                                                      ds11
                                                    }))
                                                (GHC.Base.return
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp))))
                                      } } in
                                (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   case (m1
                                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                     <Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                     <()>_N
                                                 :: GHC.Types.Coercible
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         ())
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                          s1
                                   of {
                                     Data.Either.Left l [Occ=Once] ->
                                       Data.Either.Left
                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                         @ ([Mlabs.Emulator.Blockchain.Resp],
                                            Mlabs.Lending.Logic.Types.LendingPool)
                                         l;
                                     Data.Either.Right r [Occ=Once!] ->
                                       case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                       (k
                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                :: GHC.Types.Coercible
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        [Mlabs.Emulator.Blockchain.Resp])
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           ([Mlabs.Emulator.Blockchain.Resp],
                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                         s'
                                       }
                                   })
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]));
                              Mlabs.Lending.Logic.Types.QueryAct _ [Occ=Dead] _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   Data.Either.Right
                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                     @ ([Mlabs.Emulator.Blockchain.Resp],
                                        Mlabs.Lending.Logic.Types.LendingPool)
                                     (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]))
                            })
Context: Compiling expr: let {
                           userUpdateSpan [Occ=OnceL] :: GHC.Integer.Type.Integer
                           [LclId]
                           userUpdateSpan = 10 } in
                         let {
                           $dMonad3
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad3
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $d~ [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet
                                GHC.Types.~ PlutusTx.AssocMap.Map
                                              Plutus.V1.Ledger.Value.AssetClass
                                              Mlabs.Lending.Logic.Types.Wallet
                           [LclId]
                           $d~
                             = GHC.Types.Eq#
                                 @ *
                                 @ (PlutusTx.AssocMap.Map
                                      Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
                                 @~ (<PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.AssetClass
                                        Mlabs.Lending.Logic.Types.Wallet>_N
                                     :: PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet
                                        ~ PlutusTx.AssocMap.Map
                                            Plutus.V1.Ledger.Value.AssetClass
                                            Mlabs.Lending.Logic.Types.Wallet) } in
                         let {
                           updateUserHealth
                             :: GHC.Integer.Type.Integer
                                -> (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                           [LclId, Arity=2]
                           updateUserHealth
                             = \ (currentTime [Occ=OnceL] :: GHC.Integer.Type.Integer)
                                 (ds [Occ=Once!]
                                    :: (Mlabs.Emulator.Types.UserId,
                                        Mlabs.Lending.Logic.Types.User)) ->
                                 case ds of { (uid, user) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   $dMonad3
                                   @ [(Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)]
                                   @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                   (let {
                                      ds1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                      [LclId]
                                      ds1 = 0 } in
                                    case GHC.Types.eq_sel
                                           @ *
                                           @ (PlutusTx.AssocMap.Map
                                                Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                           @ (PlutusTx.AssocMap.Map
                                                Plutus.V1.Ledger.Value.AssetClass
                                                Mlabs.Lending.Logic.Types.Wallet)
                                           $d~
                                    of co
                                    { __DEFAULT ->
                                    case user of
                                    { Mlabs.Lending.Logic.Types.User ds2 [Occ=Once] _ [Occ=Dead]
                                                                     _ [Occ=Dead] ->
                                    PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                      @ (Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                      @ Plutus.V1.Ledger.Value.AssetClass
                                      @ (Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)
                                      (Mlabs.Control.Monad.State.$fApplicativeStateT
                                         @ Mlabs.Lending.Logic.Types.LendingPool)
                                      (\ (asset :: Plutus.V1.Ledger.Value.AssetClass) ->
                                         let {
                                           ds5 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  PlutusTx.Ratio.Rational
                                           [LclId]
                                           ds5 = Mlabs.Lending.Logic.State.getHealth 0 asset user } in
                                         (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (ds5
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Ratio.Rational)
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     (PlutusTx.Ratio.Rational,
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   x
                                            of {
                                              Data.Either.Left c1 [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  c1;
                                              Data.Either.Right a1 [Occ=Once!] ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                      PlutusTx.Ratio.Rational),
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                   ((asset, v), st1)
                                                   })
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Plutus.V1.Ledger.Value.AssetClass,
                                                            PlutusTx.Ratio.Rational)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Plutus.V1.Ledger.Value.AssetClass,
                                                              PlutusTx.Ratio.Rational),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Plutus.V1.Ledger.Value.AssetClass,
                                                          PlutusTx.Ratio.Rational))))
                                      (PlutusTx.Functor.$fFunctor[]_$cfmap
                                         @ (Plutus.V1.Ledger.Value.AssetClass,
                                            Mlabs.Lending.Logic.Types.Wallet)
                                         @ Plutus.V1.Ledger.Value.AssetClass
                                         (\ (ds5 [Occ=Once!]
                                               :: (Plutus.V1.Ledger.Value.AssetClass,
                                                   Mlabs.Lending.Logic.Types.Wallet)) ->
                                            case ds5 of { (k1 [Occ=Once], _ [Occ=Dead]) -> k1 })
                                         (PlutusTx.List.foldr
                                            @ (Plutus.V1.Ledger.Value.AssetClass,
                                               Mlabs.Lending.Logic.Types.Wallet)
                                            @ [(Plutus.V1.Ledger.Value.AssetClass,
                                                Mlabs.Lending.Logic.Types.Wallet)]
                                            (\ (e :: (Plutus.V1.Ledger.Value.AssetClass,
                                                      Mlabs.Lending.Logic.Types.Wallet))
                                               (xs [Occ=Once*, OS=OneShot]
                                                  :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                       Mlabs.Lending.Logic.Types.Wallet)]) ->
                                               case PlutusTx.Builtins.Internal.ifThenElse
                                                      @ GHC.Types.Bool
                                                      (PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                                         (case e of { (_ [Occ=Dead], b1 [Occ=Once!]) ->
                                                          case b1 of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds8
                                                          }
                                                          })
                                                         ds1)
                                                      GHC.Types.False
                                                      GHC.Types.True
                                               of {
                                                 GHC.Types.False -> xs;
                                                 GHC.Types.True ->
                                                   GHC.Types.:
                                                     @ (Plutus.V1.Ledger.Value.AssetClass,
                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                     e
                                                     xs
                                               })
                                            (GHC.Types.[]
                                               @ (Plutus.V1.Ledger.Value.AssetClass,
                                                  Mlabs.Lending.Logic.Types.Wallet))
                                            (ds2
                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                         <Plutus.V1.Ledger.Value.AssetClass>_R
                                                         <Mlabs.Lending.Logic.Types.Wallet>_R
                                                     :: GHC.Types.Coercible
                                                          (PlutusTx.AssocMap.Map
                                                             Plutus.V1.Ledger.Value.AssetClass
                                                             Mlabs.Lending.Logic.Types.Wallet)
                                                          [(Plutus.V1.Ledger.Value.AssetClass,
                                                            Mlabs.Lending.Logic.Types.Wallet)]))))
                                    }
                                    })
                                   (\ (health
                                         :: [(Plutus.V1.Ledger.Value.AssetClass,
                                              PlutusTx.Ratio.Rational)]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad3
                                        @ ()
                                        @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                        (Mlabs.Data.List.mapM_
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           @ (Mlabs.Emulator.Types.Coin,
                                              PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                           $dMonad3
                                           (\ (ds1 [Occ=Once!]
                                                 :: (Mlabs.Emulator.Types.Coin,
                                                     PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)) ->
                                              case ds1 of { (asset, health1) ->
                                              let {
                                                y [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                [LclId]
                                                y = 1 } in
                                              let {
                                                y1 :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                [LclId]
                                                y1
                                                  = PlutusTx.Ratio.:%
                                                      @ GHC.Integer.Type.Integer
                                                      y
                                                      PlutusTx.Ratio.fromInteger1 } in
                                              join {
                                                $j [Occ=Once*T[0]] :: Mlabs.Lending.Logic.State.St ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Mlabs.Lending.Logic.State.modifyHealthReport
                                                      (let {
                                                         key [Occ=OnceL]
                                                           :: Mlabs.Lending.Logic.Types.BadBorrow
                                                         [LclId]
                                                         key
                                                           = Mlabs.Lending.Logic.Types.$WBadBorrow
                                                               uid asset } in
                                                       \ (ds2 [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Lending.Logic.Types.BadBorrow
                                                                 PlutusTx.Ratio.Rational) ->
                                                         letrec {
                                                           go [Occ=LoopBreaker]
                                                             :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                  PlutusTx.Ratio.Rational)]
                                                                -> [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)]
                                                           [LclId, Arity=1]
                                                           go
                                                             = \ (ds3 [Occ=Once!]
                                                                    :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                         PlutusTx.Ratio.Rational)]) ->
                                                                 case ds3 of {
                                                                   [] ->
                                                                     GHC.Types.[]
                                                                       @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational);
                                                                   : ds4 [Occ=Once!] rest [Occ=Once*] ->
                                                                     case ds4 of { (k1, v1 [Occ=Once]) ->
                                                                     case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                            k1 key
                                                                     of {
                                                                       GHC.Types.False ->
                                                                         GHC.Types.:
                                                                           @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                              PlutusTx.Ratio.Rational)
                                                                           (k1, v1)
                                                                           (go rest);
                                                                       GHC.Types.True -> rest
                                                                     }
                                                                     }
                                                                 }; } in
                                                         (go
                                                            (ds2
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                         <PlutusTx.Ratio.Rational>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Lending.Logic.Types.BadBorrow
                                                                             PlutusTx.Ratio.Rational)
                                                                          [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                            PlutusTx.Ratio.Rational)])))
                                                         `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                          <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                          <PlutusTx.Ratio.Rational>_R)
                                                                 :: GHC.Types.Coercible
                                                                      [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                        PlutusTx.Ratio.Rational)]
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))) } in
                                              case PlutusTx.Ratio.$fOrdRatio1 health1 y1 of {
                                                GHC.Types.False ->
                                                  case PlutusTx.Ratio.$fOrdRatio_$c<= health1 y1 of {
                                                    GHC.Types.False -> jump $j;
                                                    GHC.Types.True ->
                                                      Mlabs.Lending.Logic.State.modifyHealthReport
                                                        (PlutusTx.AssocMap.insert
                                                           @ Mlabs.Lending.Logic.Types.BadBorrow
                                                           @ (PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                                           (Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                            `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                             <Mlabs.Lending.Logic.Types.BadBorrow>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> Mlabs.Lending.Logic.Types.BadBorrow
                                                                          -> GHC.Types.Bool)
                                                                         (PlutusTx.Eq.Eq
                                                                            Mlabs.Lending.Logic.Types.BadBorrow)))
                                                           (Mlabs.Lending.Logic.Types.$WBadBorrow uid asset)
                                                           health1)
                                                  };
                                                GHC.Types.True -> jump $j
                                              }
                                              })
                                           health)
                                        (let {
                                           a1 [Occ=OnceL] :: Mlabs.Lending.Logic.Types.User
                                           [LclId]
                                           a1
                                             = case user of
                                               { Mlabs.Lending.Logic.Types.User ds1 [Occ=Once] _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                               Mlabs.Lending.Logic.Types.$WUser
                                                 ds1
                                                 currentTime
                                                 (health
                                                  `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                   <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                   <PlutusTx.Ratio.Rational>_R)
                                                          :: GHC.Types.Coercible
                                                               [(Plutus.V1.Ledger.Value.AssetClass,
                                                                 PlutusTx.Ratio.Rational)]
                                                               (PlutusTx.AssocMap.Map
                                                                  Plutus.V1.Ledger.Value.AssetClass
                                                                  PlutusTx.Ratio.Rational)))
                                               } } in
                                         let {
                                           a2 [Occ=OnceL]
                                             :: (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                           [LclId]
                                           a2 = (uid, a1) } in
                                         (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            Data.Either.Right
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ ((Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User),
                                                 Mlabs.Lending.Logic.Types.LendingPool)
                                              (a2, st1))
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User),
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)))))
                                 } } in
                         let {
                           $dMonad4
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad4
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           withHealthCheck [Occ=Once*!]
                             :: GHC.Integer.Type.Integer
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     [Mlabs.Emulator.Blockchain.Resp]
                           [LclId, Arity=2]
                           withHealthCheck
                             = \ (time :: GHC.Integer.Type.Integer)
                                 (act [Occ=Once]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]) ->
                                 GHC.Base.>>=
                                   @ (Control.Monad.Trans.State.Strict.StateT
                                        Mlabs.Lending.Logic.Types.LendingPool
                                        (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                   Mlabs.Lending.Logic.React.qReact1
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                   act
                                   (\ (res [Occ=Once] :: [Mlabs.Emulator.Blockchain.Resp]) ->
                                      GHC.Base.>>
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        Mlabs.Lending.Logic.React.qReact1
                                        @ ()
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (GHC.Base.>>=
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [(Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)]
                                           @ ()
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              Mlabs.Lending.Logic.React.qReact1
                                              @ [(GHC.Integer.Type.Integer,
                                                  (Mlabs.Emulator.Types.UserId,
                                                   Mlabs.Lending.Logic.Types.User))]
                                              @ [(Mlabs.Emulator.Types.UserId,
                                                  Mlabs.Lending.Logic.Types.User)]
                                              (let {
                                                 f [Occ=OnceL]
                                                   :: (Mlabs.Emulator.Types.UserId,
                                                       Mlabs.Lending.Logic.Types.User)
                                                      -> (GHC.Integer.Type.Integer,
                                                          (Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User))
                                                 [LclId, Arity=1]
                                                 f = \ (ds [Occ=Once!]
                                                          :: (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)) ->
                                                       case ds of { (uid [Occ=Once], user) ->
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          (case GHC.Types.eq_sel
                                                                  @ *
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ GHC.Integer.Type.Integer
                                                                  Mlabs.Lending.Logic.React.react3
                                                           of co
                                                           { __DEFAULT ->
                                                           case user of
                                                           { Mlabs.Lending.Logic.Types.User _ [Occ=Dead]
                                                                                            ds2 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                           ds2
                                                           }
                                                           })
                                                          time,
                                                        (uid, user))
                                                       } } in
                                               let {
                                                 ds [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User)
                                                 [LclId]
                                                 ds
                                                   = Control.Monad.State.Class.gets
                                                       @ Mlabs.Lending.Logic.Types.LendingPool
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       @ (PlutusTx.AssocMap.Map
                                                            Mlabs.Emulator.Types.UserId
                                                            Mlabs.Lending.Logic.Types.User)
                                                       Mlabs.Lending.Logic.React.react2
                                                       Mlabs.Lending.Logic.Types.$sel:lp'users:LendingPool } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Emulator.Types.UserId
                                                                           Mlabs.Lending.Logic.Types.User))
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Emulator.Types.UserId
                                                                              Mlabs.Lending.Logic.Types.User,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(GHC.Integer.Type.Integer,
                                                             (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User))],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                         (PlutusTx.Functor.$fFunctor[]_$cfmap
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User)
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            f
                                                            (v
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Emulator.Types.UserId>_R
                                                                         <Mlabs.Lending.Logic.Types.User>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Emulator.Types.UserId
                                                                             Mlabs.Lending.Logic.Types.User)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])),
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <[(GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User))]>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  ([(GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User))],
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               [(GHC.Integer.Type.Integer,
                                                                 (Mlabs.Emulator.Types.UserId,
                                                                  Mlabs.Lending.Logic.Types.User))])))
                                              (\ (us [Occ=Once]
                                                    :: [(GHC.Integer.Type.Integer,
                                                         (Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User))]) ->
                                                 let {
                                                   a1 [Occ=OnceL]
                                                     :: [(Mlabs.Emulator.Types.UserId,
                                                          Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   a1
                                                     = PlutusTx.Functor.$fFunctor[]_$cfmap
                                                         @ (GHC.Integer.Type.Integer,
                                                            (Mlabs.Emulator.Types.UserId,
                                                             Mlabs.Lending.Logic.Types.User))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (PlutusTx.Prelude.snd
                                                            @ GHC.Integer.Type.Integer
                                                            @ (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User))
                                                         (Mlabs.Data.List.take
                                                            @ (GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))
                                                            userUpdateSpan
                                                            (PlutusTx.List.map
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User)))
                                                               @ (GHC.Integer.Type.Integer,
                                                                  (Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User))
                                                               (PlutusTx.Prelude.snd
                                                                  @ GHC.Integer.Type.Integer
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User)))
                                                               (Mlabs.Data.List.sortBy
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     (GHC.Integer.Type.Integer,
                                                                      (Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)))
                                                                  (\ (x [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User))))
                                                                     (y [Occ=Once!]
                                                                        :: (GHC.Integer.Type.Integer,
                                                                            (GHC.Integer.Type.Integer,
                                                                             (Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User)))) ->
                                                                     PlutusTx.Ord.$fOrdInteger_$ccompare
                                                                       (case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        })
                                                                       (case y of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        a2
                                                                        }))
                                                                  (PlutusTx.List.map
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User))
                                                                     @ (GHC.Integer.Type.Integer,
                                                                        (GHC.Integer.Type.Integer,
                                                                         (Mlabs.Emulator.Types.UserId,
                                                                          Mlabs.Lending.Logic.Types.User)))
                                                                     (\ (x :: (GHC.Integer.Type.Integer,
                                                                               (Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User))) ->
                                                                        case x of
                                                                        { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                        case a2 of y [Occ=Once]
                                                                        { __DEFAULT ->
                                                                        (y, x)
                                                                        }
                                                                        })
                                                                     us)))) } in
                                                 (\ (st1 [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ([(Mlabs.Emulator.Types.UserId,
                                                           Mlabs.Lending.Logic.Types.User)],
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (a1, st1))
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <[(Mlabs.Emulator.Types.UserId,
                                                                     Mlabs.Lending.Logic.Types.User)]>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    ([(Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)],
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 [(Mlabs.Emulator.Types.UserId,
                                                                   Mlabs.Lending.Logic.Types.User)]))))
                                           (\ (us [Occ=Once]
                                                 :: [(Mlabs.Emulator.Types.UserId,
                                                      Mlabs.Lending.Logic.Types.User)]) ->
                                              GHC.Base.>>=
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                Mlabs.Lending.Logic.React.qReact1
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.UserId
                                                     Mlabs.Lending.Logic.Types.User)
                                                @ ()
                                                (let {
                                                   ds [Occ=OnceL]
                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          [(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)]
                                                   [LclId]
                                                   ds
                                                     = PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         @ (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)
                                                         (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                            @ Mlabs.Lending.Logic.Types.LendingPool)
                                                         (updateUserHealth time)
                                                         us } in
                                                 (\ (x [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    case (ds
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <[(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)]>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [(Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)])
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([(Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User)],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           x
                                                    of {
                                                      Data.Either.Left c1 [Occ=Once] ->
                                                        Data.Either.Left
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          c1;
                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.UserId
                                                               Mlabs.Lending.Logic.Types.User,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                           (v
                                                            `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                             <Mlabs.Emulator.Types.UserId>_R
                                                                             <Mlabs.Lending.Logic.Types.User>_R)
                                                                    :: GHC.Types.Coercible
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User)]
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            Mlabs.Lending.Logic.Types.User)),
                                                            st1)
                                                           })
                                                    })
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Emulator.Types.UserId
                                                                     Mlabs.Lending.Logic.Types.User>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    (PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User,
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 (PlutusTx.AssocMap.Map
                                                                    Mlabs.Emulator.Types.UserId
                                                                    Mlabs.Lending.Logic.Types.User))))
                                                (\ (newUsers [Occ=OnceL]
                                                      :: PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.UserId
                                                           Mlabs.Lending.Logic.Types.User) ->
                                                   Mlabs.Lending.Logic.State.modifyUsers
                                                     ((\ (users [Occ=Once]
                                                            :: PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User) ->
                                                         PlutusTx.Functor.$fFunctor[]_$cfmap
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              PlutusTx.These.These
                                                                Mlabs.Lending.Logic.Types.User
                                                                Mlabs.Lending.Logic.Types.User)
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           (\ (ds [Occ=Once!]
                                                                 :: (Mlabs.Emulator.Types.UserId,
                                                                     PlutusTx.These.These
                                                                       Mlabs.Lending.Logic.Types.User
                                                                       Mlabs.Lending.Logic.Types.User)) ->
                                                              case ds of { (c1 [Occ=Once], a1 [Occ=Once!]) ->
                                                              (c1,
                                                               case a1 of {
                                                                 PlutusTx.These.This a2 [Occ=Once] -> a2;
                                                                 PlutusTx.These.That b1 [Occ=Once] -> b1;
                                                                 PlutusTx.These.These a2 [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                   a2
                                                               })
                                                              })
                                                           ((PlutusTx.AssocMap.union
                                                               @ Mlabs.Emulator.Types.UserId
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               @ Mlabs.Lending.Logic.Types.User
                                                               (Mlabs.Emulator.Types.$fEqUserId_$c==
                                                                `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                                 <Mlabs.Emulator.Types.UserId>_N)
                                                                        :: GHC.Types.Coercible
                                                                             (Mlabs.Emulator.Types.UserId
                                                                              -> Mlabs.Emulator.Types.UserId
                                                                              -> GHC.Types.Bool)
                                                                             (PlutusTx.Eq.Eq
                                                                                Mlabs.Emulator.Types.UserId)))
                                                               newUsers
                                                               users)
                                                            `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                        <Mlabs.Emulator.Types.UserId>_R
                                                                        <PlutusTx.These.These
                                                                           Mlabs.Lending.Logic.Types.User
                                                                           Mlabs.Lending.Logic.Types.User>_R
                                                                    :: GHC.Types.Coercible
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.UserId
                                                                            (PlutusTx.These.These
                                                                               Mlabs.Lending.Logic.Types.User
                                                                               Mlabs.Lending.Logic.Types.User))
                                                                         [(Mlabs.Emulator.Types.UserId,
                                                                           PlutusTx.These.These
                                                                             Mlabs.Lending.Logic.Types.User
                                                                             Mlabs.Lending.Logic.Types.User)])))
                                                      `cast` (<PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User>_R
                                                              ->_R Sym (PlutusTx.AssocMap.N:Map[0]
                                                                            <Mlabs.Emulator.Types.UserId>_R
                                                                            <Mlabs.Lending.Logic.Types.User>_R)
                                                              :: GHC.Types.Coercible
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> [(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)])
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User
                                                                    -> PlutusTx.AssocMap.Map
                                                                         Mlabs.Emulator.Types.UserId
                                                                         Mlabs.Lending.Logic.Types.User))))))
                                        (GHC.Base.return
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           res)) } in
                         let {
                           $dMonadError3 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError3
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           calcAmountFor [Occ=OnceL*!]
                             :: forall b.
                                PlutusTx.Ord.Ord b =>
                                (Mlabs.Lending.Logic.Types.Wallet -> b)
                                -> Mlabs.Emulator.Types.UserId
                                -> Mlabs.Emulator.Types.Coin
                                -> b
                                -> Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                     b
                           [LclId, Arity=1]
                           calcAmountFor
                             = \ (@ b) ($dOrd [Occ=OnceL] :: PlutusTx.Ord.Ord b) ->
                                 let {
                                   $dMonad5 [Occ=OnceL]
                                     :: GHC.Base.Monad
                                          (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                   [LclId]
                                   $dMonad5
                                     = Control.Monad.Trans.State.Strict.$fMonadStateT
                                         @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         @ Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.$fMonadEither
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                 \ (extract [Occ=OnceL!] :: Mlabs.Lending.Logic.Types.Wallet -> b)
                                   (uid [Occ=Once] :: Mlabs.Emulator.Types.UserId)
                                   (asset [Occ=Once] :: Mlabs.Emulator.Types.Coin)
                                   (desiredAmount [Occ=OnceL] :: b) ->
                                   GHC.Base.>>=
                                     @ (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                     $dMonad5
                                     @ b
                                     @ b
                                     (let {
                                        ds [Occ=OnceL]
                                          :: Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                               Mlabs.Lending.Logic.Types.Wallet
                                        [LclId]
                                        ds = Mlabs.Lending.Logic.State.getWallet uid asset } in
                                      (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                         case (ds
                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <Mlabs.Lending.Logic.Types.Wallet>_N
                                                       :: GHC.Types.Coercible
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Wallet)
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (Mlabs.Lending.Logic.Types.Wallet,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                x
                                         of {
                                           Data.Either.Left c1 [Occ=Once] ->
                                             Data.Either.Left
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               c1;
                                           Data.Either.Right a1 [Occ=Once!] ->
                                             Data.Either.Right
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                (extract v, st1)
                                                })
                                         })
                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <b>_N)
                                              :: GHC.Types.Coercible
                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                   (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      b)))
                                     (\ (availableAmount [Occ=Once] :: b) ->
                                        let {
                                          a1 [Occ=OnceL] :: b
                                          [LclId]
                                          a1 = PlutusTx.Ord.min @ b $dOrd availableAmount desiredAmount } in
                                        (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           Data.Either.Right
                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                             @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                             (a1, st1))
                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                         <Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                         <b>_N)
                                                :: GHC.Types.Coercible
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        b))) } in
                         let {
                           $dMonadError4 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError4
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonad5
                             :: GHC.Base.Monad
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonad5
                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Data.Either.$fMonadEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError5 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError5
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         let {
                           $dMonadError6 [Occ=OnceL]
                             :: Control.Monad.Error.Class.MonadError
                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                  (Control.Monad.Trans.State.Strict.StateT
                                     Mlabs.Lending.Logic.Types.LendingPool
                                     (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           [LclId]
                           $dMonadError6
                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                 @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                         GHC.Base.>>
                           @ (Control.Monad.Trans.State.Strict.StateT
                                Mlabs.Lending.Logic.Types.LendingPool
                                (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                           Mlabs.Lending.Logic.React.qReact1
                           @ ()
                           @ [Mlabs.Emulator.Blockchain.Resp]
                           (Mlabs.Lending.Logic.React.checkInput input)
                           (case input of {
                              Mlabs.Lending.Logic.Types.UserAct t uid act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (case act of {
                                     Mlabs.Lending.Logic.Types.DepositAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds2 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds2 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds2
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds8 [Occ=Once!] ->
                                                     case ds8 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds12 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds12
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ ()
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                 uid ds1 (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                              (GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ Mlabs.Emulator.Types.Coin
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.aToken ds1)
                                                 (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                    GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserve'
                                                         ds1
                                                         (\ (x [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            Data.Either.Right
                                                              @ Mlabs.Lending.Logic.State.Error
                                                              @ Mlabs.Lending.Logic.Types.Reserve
                                                              (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                 t x)))
                                                      (let {
                                                         a1 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                         [LclId]
                                                         a1
                                                           = GHC.Base.foldr
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                               (PlutusTx.List.++
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.[]
                                                                  @ Mlabs.Emulator.Blockchain.Resp)
                                                               (GHC.Types.:
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     (Mlabs.Emulator.Blockchain.Mint
                                                                        aCoin ds)
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp))
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           aCoin
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid aCoin ds)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              ds1
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 ds1
                                                                                 ds)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.[]
                                                                           @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                       (\ (st1 [Occ=Once]
                                                             :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool)
                                                            (a1, st1))
                                                       `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                        <Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                        <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                               :: GHC.Types.Coercible
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          ([Mlabs.Emulator.Blockchain.Resp],
                                                                           Mlabs.Lending.Logic.Types.LendingPool))
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       [Mlabs.Emulator.Blockchain.Resp]))))));
                                     Mlabs.Lending.Logic.Types.BorrowAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             join {
                                               $j [Occ=Once!T[1]]
                                                 :: (GHC.Integer.Type.Integer,
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                    -> Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                         ((), Mlabs.Lending.Logic.Types.LendingPool)
                                               [LclId[JoinId(1)], Arity=1]
                                               $j (r [Occ=Once!, OS=OneShot]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                 = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                   case PlutusTx.Builtins.Internal.ifThenElse
                                                          @ GHC.Types.Bool
                                                          (PlutusTx.Builtins.Internal.lessThanInteger a1 ds)
                                                          GHC.Types.False
                                                          GHC.Types.True
                                                   of {
                                                     GHC.Types.False ->
                                                       ((Control.Monad.Error.Class.throwError
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonadError6
                                                           @ ()
                                                           (GHC.Magic.noinline
                                                              @ (GHC.Base.String
                                                                 -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                              (GHC.CString.unpackCString#
                                                                 "Not enough liquidity for asset"#)))
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        ())
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           ((),
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         s';
                                                     GHC.Types.True ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), s')
                                                   }
                                                   } } in
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 let {
                                                   r [Occ=Once]
                                                     :: (GHC.Integer.Type.Integer,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                   [LclId]
                                                   r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve ds4 [Occ=Once!]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                        case ds4 of
                                                        { Mlabs.Lending.Logic.Types.Wallet ds10 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                        ds10
                                                        }
                                                        },
                                                        st1)
                                                       } } in
                                                 jump $j r
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ ()
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds3 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Wallet
                                               [LclId]
                                               ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                             (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                join {
                                                  $j [Occ=Once!T[1]]
                                                    :: (GHC.Integer.Type.Integer,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                  [LclId[JoinId(1)], Arity=1]
                                                  $j (r [Occ=Once!, OS=OneShot]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                    = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                      case PlutusTx.Builtins.Internal.ifThenElse
                                                             @ GHC.Types.Bool
                                                             (PlutusTx.Builtins.Internal.equalsInteger a1 0)
                                                             GHC.Types.True
                                                             GHC.Types.False
                                                      of {
                                                        GHC.Types.False ->
                                                          ((Control.Monad.Error.Class.throwError
                                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonadError5
                                                              @ ()
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "Collateral can not be used as borrow for user"#)))
                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <()>_N
                                                                   :: GHC.Types.Coercible
                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           ())
                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                         -> Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                              ((),
                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                            s';
                                                        GHC.Types.True ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                            (GHC.Tuple.(), s')
                                                      }
                                                      } } in
                                                case (ds3
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Wallet>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Wallet)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Wallet,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       s1
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    let {
                                                      r [Occ=Once]
                                                        :: (GHC.Integer.Type.Integer,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                      [LclId]
                                                      r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                          (case v of
                                                           { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                              ds5 [Occ=Once]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead] ->
                                                           ds5
                                                           },
                                                           st1)
                                                          } } in
                                                    jump $j r
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             ())))
                                            (GHC.Base.>>
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ ()
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (let {
                                                  msg [Occ=OnceL]
                                                    :: PlutusTx.Builtins.Internal.BuiltinByteString
                                                  [LclId]
                                                  msg
                                                    = GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Not enough collateral to borrow"#) } in
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad5
                                                  @ GHC.Integer.Type.Integer
                                                  @ ()
                                                  (Mlabs.Lending.Logic.State.toAda ds1 ds)
                                                  (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>=
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad5
                                                       @ GHC.Types.Bool
                                                       @ ()
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad5
                                                          @ Mlabs.Lending.Logic.Types.User
                                                          @ GHC.Types.Bool
                                                          (Mlabs.Lending.Logic.State.getUser uid)
                                                          (Mlabs.Lending.Logic.State.getHealthCheck bor ds1))
                                                       (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                                          case isOk of {
                                                            GHC.Types.False ->
                                                              Control.Monad.Error.Class.throwError
                                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                $dMonadError4
                                                                @ ()
                                                                msg;
                                                            GHC.Types.True ->
                                                              (\ (st1 [Occ=Once]
                                                                    :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                                   (GHC.Tuple.(), st1))
                                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                               <Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                               <()>_N)
                                                                      :: GHC.Types.Coercible
                                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                                            -> Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                 ((),
                                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                                           (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                              ()))
                                                          })))
                                               (GHC.Base.>>
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ ()
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (GHC.Base.>>=
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ PlutusTx.Ratio.Rational
                                                     @ ()
                                                     (let {
                                                        ds3 [Occ=OnceL]
                                                          :: Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               Mlabs.Lending.Logic.Types.Reserve
                                                        [LclId]
                                                        ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                                      (\ (x [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         case (ds3
                                                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                       :: GHC.Types.Coercible
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               Mlabs.Lending.Logic.Types.Reserve)
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  (Mlabs.Lending.Logic.Types.Reserve,
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                                                x
                                                         of {
                                                           Data.Either.Left c1 [Occ=Once] ->
                                                             Data.Either.Left
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               c1;
                                                           Data.Either.Right a1 [Occ=Once!] ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (case a1 of
                                                                { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                                (case v of
                                                                 { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds9 [Occ=Once!] ->
                                                                 case ds9 of
                                                                 { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead]
                                                                                                             ds13 [Occ=Once]
                                                                                                             _ [Occ=Dead] ->
                                                                 ds13
                                                                 }
                                                                 },
                                                                 st1)
                                                                })
                                                         })
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <PlutusTx.Ratio.Rational>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      PlutusTx.Ratio.Rational)))
                                                     (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                                        GHC.Base.>>
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ ()
                                                          @ ()
                                                          (Mlabs.Lending.Logic.State.modifyWallet'
                                                             uid
                                                             ds1
                                                             (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                Data.Either.Right
                                                                  @ Mlabs.Lending.Logic.State.Error
                                                                  @ Mlabs.Lending.Logic.Types.Wallet
                                                                  (case x of
                                                                   { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                      ds4 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      ds6 [Occ=Once] ->
                                                                   Mlabs.Lending.Logic.Types.$WWallet
                                                                     ds3
                                                                     ds4
                                                                     (PlutusTx.Builtins.Internal.addInteger
                                                                        (case x of
                                                                         { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                            _ [Occ=Dead]
                                                                                                            ds9 [Occ=Once]
                                                                                                            _ [Occ=Dead] ->
                                                                         ds9
                                                                         })
                                                                        ds)
                                                                     ds6
                                                                   })))
                                                          (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                             ds1
                                                             (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                ni
                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                   PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                   ds)))))
                                                  (GHC.Base.>>
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ ()
                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                     (Mlabs.Lending.Logic.State.modifyReserve'
                                                        ds1
                                                        (\ (x [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                           Data.Either.Right
                                                             @ Mlabs.Lending.Logic.State.Error
                                                             @ Mlabs.Lending.Logic.Types.Reserve
                                                             (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                t x)))
                                                     (let {
                                                        a1 [Occ=OnceL]
                                                          :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                        [LclId]
                                                        a1
                                                          = PlutusTx.Builtins.Internal.subtractInteger
                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                              ds } in
                                                      let {
                                                        a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a2
                                                          = Mlabs.Emulator.Blockchain.Move
                                                              Mlabs.Emulator.Types.Self ds1 a1 } in
                                                      let {
                                                        a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                        [LclId]
                                                        a3 = Mlabs.Emulator.Blockchain.Move uid ds1 ds } in
                                                      let {
                                                        a4 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a4
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                              a3
                                                              (GHC.Types.[]
                                                                 @ Mlabs.Emulator.Blockchain.Resp) } in
                                                      let {
                                                        a5 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                        [LclId]
                                                        a5
                                                          = GHC.Types.:
                                                              @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                      (\ (st1 [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ([Mlabs.Emulator.Blockchain.Resp],
                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                           (a5, st1))
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         ([Mlabs.Emulator.Blockchain.Resp],
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.RepayAct ds ds1 _ [Occ=Dead] ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>=
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ PlutusTx.Ratio.Rational
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            ds3 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   Mlabs.Lending.Logic.Types.Reserve
                                            [LclId]
                                            ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                          (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (ds3
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (Mlabs.Lending.Logic.Types.Reserve,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    x
                                             of {
                                               Data.Either.Left c1 [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   c1;
                                               Data.Either.Right a1 [Occ=Once!] ->
                                                 Data.Either.Right
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ (PlutusTx.Ratio.Rational,
                                                      Mlabs.Lending.Logic.Types.LendingPool)
                                                   (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                    (case v of
                                                     { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         ds9 [Occ=Once!] ->
                                                     case ds9 of
                                                     { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds13 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                     ds13
                                                     }
                                                     },
                                                     st1)
                                                    })
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <PlutusTx.Ratio.Rational>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (PlutusTx.Ratio.Rational,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Ratio.Rational)))
                                         (\ (ni :: PlutusTx.Ratio.Rational) ->
                                            GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ GHC.Integer.Type.Integer
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds3 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.Wallet
                                                 [LclId]
                                                 ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds3
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.Wallet>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.Wallet,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds6 [Occ=Once]
                                                                                             _ [Occ=Dead] ->
                                                          ds6
                                                          },
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <GHC.Integer.Type.Integer>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (GHC.Integer.Type.Integer,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               GHC.Integer.Type.Integer)))
                                              (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                 let {
                                                   newBor :: GHC.Integer.Type.Integer
                                                   [LclId]
                                                   newBor
                                                     = PlutusTx.Builtins.Internal.subtractInteger bor ds } in
                                                 GHC.Base.>>
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ ()
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (case PlutusTx.Builtins.Internal.ifThenElse
                                                           @ GHC.Types.Bool
                                                           (PlutusTx.Builtins.Internal.lessThanInteger
                                                              newBor 0)
                                                           GHC.Types.False
                                                           GHC.Types.True
                                                    of {
                                                      GHC.Types.False ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (w [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       newBor)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                       ds4 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds6 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds3 ds4 0 ds6
                                                                    })
                                                             });
                                                      GHC.Types.True ->
                                                        Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds1
                                                          (\ (x [Occ=Once!]
                                                                :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             Data.Either.Right
                                                               @ Mlabs.Lending.Logic.State.Error
                                                               @ Mlabs.Lending.Logic.Types.Wallet
                                                               (case x of
                                                                { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                   ds4 [Occ=Once]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds6 [Occ=Once] ->
                                                                Mlabs.Lending.Logic.Types.$WWallet
                                                                  ds3 ds4 newBor ds6
                                                                }))
                                                    })
                                                   (GHC.Base.>>
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ ()
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                         ds1
                                                         (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                                      (GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds1
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                            [LclId]
                                                            a1
                                                              = PlutusTx.Builtins.Internal.subtractInteger
                                                                  PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                  ds } in
                                                          let {
                                                            a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a2
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  uid ds1 a1 } in
                                                          let {
                                                            a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                            [LclId]
                                                            a3
                                                              = Mlabs.Emulator.Blockchain.Move
                                                                  Mlabs.Emulator.Types.Self ds1 ds } in
                                                          let {
                                                            a4 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a4
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                  a3
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp) } in
                                                          let {
                                                            a5 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a5
                                                              = GHC.Types.:
                                                                  @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a5, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.SwapBorrowRateModelAct _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.AddCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'deposit:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWallet'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni
                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       amount)
                                                                    w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.addInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self
                                                                     aCoin
                                                                     amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.RemoveCollateralAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @ GHC.Types.Bool
                                              (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                              GHC.Types.True
                                              GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ PlutusTx.Ratio.Rational
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (let {
                                                ds2 [Occ=OnceL]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                [LclId]
                                                ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                              (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                 case (ds2
                                                       `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                   <Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                   <Mlabs.Lending.Logic.Types.Reserve>_N
                                                               :: GHC.Types.Coercible
                                                                    (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                    (Mlabs.Lending.Logic.Types.LendingPool
                                                                     -> Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          (Mlabs.Lending.Logic.Types.Reserve,
                                                                           Mlabs.Lending.Logic.Types.LendingPool))))
                                                        x
                                                 of {
                                                   Data.Either.Left c1 [Occ=Once] ->
                                                     Data.Either.Left
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       c1;
                                                   Data.Either.Right a1 [Occ=Once!] ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (PlutusTx.Ratio.Rational,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                       (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                        (case v of
                                                         { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             ds8 [Occ=Once!] ->
                                                         case ds8 of
                                                         { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds12 [Occ=Once]
                                                                                                     _ [Occ=Dead] ->
                                                         ds12
                                                         }
                                                         },
                                                         st1)
                                                        })
                                                 })
                                              `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N)
                                                      :: GHC.Types.Coercible
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 (PlutusTx.Ratio.Rational,
                                                                  Mlabs.Lending.Logic.Types.LendingPool))
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              PlutusTx.Ratio.Rational)))
                                             (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ GHC.Integer.Type.Integer
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (calcAmountFor
                                                     @ GHC.Integer.Type.Integer
                                                     PlutusTx.Ord.$fOrdInteger
                                                     Mlabs.Lending.Logic.Types.$sel:wallet'collateral:Wallet
                                                     uid
                                                     ds
                                                     ds1)
                                                  (\ (amount :: GHC.Integer.Type.Integer) ->
                                                     GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                          uid
                                                          ds
                                                          (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                             case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                    ni amount w
                                                             of {
                                                               Data.Either.Left l [Occ=Once] ->
                                                                 Data.Either.Left
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   l;
                                                               Data.Either.Right r [Occ=Once!] ->
                                                                 Data.Either.Right
                                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   @ Mlabs.Lending.Logic.Types.Wallet
                                                                   (case r of
                                                                    { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds4 [Occ=Once]
                                                                                                       ds5 [Occ=Once] ->
                                                                    Mlabs.Lending.Logic.Types.$WWallet
                                                                      ds2
                                                                      (PlutusTx.Builtins.Internal.subtractInteger
                                                                         (case w of
                                                                          { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                             ds7 [Occ=Once]
                                                                                                             _ [Occ=Dead]
                                                                                                             _ [Occ=Dead] ->
                                                                          ds7
                                                                          })
                                                                         amount)
                                                                      ds4
                                                                      ds5
                                                                    })
                                                             }))
                                                       (GHC.Base.>>=
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonad6
                                                          @ Mlabs.Emulator.Types.Coin
                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                          (Mlabs.Lending.Logic.State.aToken ds)
                                                          (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                             let {
                                                               a1 [Occ=OnceL]
                                                                 :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                               [LclId]
                                                               a1
                                                                 = PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     amount } in
                                                             let {
                                                               a2 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a2
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     Mlabs.Emulator.Types.Self aCoin a1 } in
                                                             let {
                                                               a3 [Occ=OnceL]
                                                                 :: Mlabs.Emulator.Blockchain.Resp
                                                               [LclId]
                                                               a3
                                                                 = Mlabs.Emulator.Blockchain.Move
                                                                     uid aCoin amount } in
                                                             let {
                                                               a4 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a4
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a3
                                                                     (GHC.Types.[]
                                                                        @ Mlabs.Emulator.Blockchain.Resp) } in
                                                             let {
                                                               a5 [Occ=OnceL]
                                                                 :: [Mlabs.Emulator.Blockchain.Resp]
                                                               [LclId]
                                                               a5
                                                                 = GHC.Types.:
                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                     a2
                                                                     a4 } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a5, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             [Mlabs.Emulator.Blockchain.Resp]))))));
                                         GHC.Types.True ->
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                       };
                                     Mlabs.Lending.Logic.Types.WithdrawAct ds ds1 ->
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (let {
                                            m1 [Occ=OnceL]
                                              :: Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   PlutusTx.Ratio.Rational
                                            [LclId]
                                            m1 = Mlabs.Lending.Logic.State.getCumulativeBalance uid ds } in
                                          (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             case (m1
                                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                               <Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                               <PlutusTx.Ratio.Rational>_N
                                                           :: GHC.Types.Coercible
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   PlutusTx.Ratio.Rational)
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (PlutusTx.Ratio.Rational,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                                    s1
                                             of {
                                               Data.Either.Left l [Occ=Once] ->
                                                 Data.Either.Left
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                   @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                   l;
                                               Data.Either.Right r [Occ=Once!] ->
                                                 case r of { (a1, s' [Occ=Once*]) ->
                                                 let {
                                                   y :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                   [LclId]
                                                   y = PlutusTx.Ratio.:%
                                                         @ GHC.Integer.Type.Integer
                                                         ds1
                                                         PlutusTx.Ratio.fromInteger1 } in
                                                 case PlutusTx.Ratio.$fOrdRatio1 a1 y of {
                                                   GHC.Types.False ->
                                                     case PlutusTx.Ratio.$fOrdRatio_$c<= a1 y of {
                                                       GHC.Types.False ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                           (GHC.Tuple.(), s');
                                                       GHC.Types.True ->
                                                         ((Control.Monad.Error.Class.throwError
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                             $dMonadError3
                                                             @ ()
                                                             (GHC.Magic.noinline
                                                                @ (GHC.Base.String
                                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                (GHC.CString.unpackCString#
                                                                   "Not enough deposit to withdraw"#)))
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <()>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          ())
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ((),
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           s'
                                                     };
                                                   GHC.Types.True ->
                                                     Data.Either.Right
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                       (GHC.Tuple.(), s')
                                                 }
                                                 }
                                             })
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <()>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ())))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ PlutusTx.Ratio.Rational
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds2 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.Reserve
                                               [LclId]
                                               ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds2
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.Reserve>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.Reserve,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.Ratio.Rational,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            _ [Occ=Dead]
                                                                                            ds8 [Occ=Once!] ->
                                                        case ds8 of
                                                        { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds12 [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                        ds12
                                                        }
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.Ratio.Rational>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.Ratio.Rational,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Ratio.Rational)))
                                            (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                               GHC.Base.>>
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ ()
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                    uid
                                                    ds
                                                    (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                       ni
                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                          PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                          ds1)))
                                                 (GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ Mlabs.Emulator.Types.Coin
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (Mlabs.Lending.Logic.State.aToken ds)
                                                    (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                       GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyReserve'
                                                            ds
                                                            (\ (x [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Reserve
                                                                 (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                    t x)))
                                                         (let {
                                                            a1 [Occ=OnceL]
                                                              :: [Mlabs.Emulator.Blockchain.Resp]
                                                            [LclId]
                                                            a1
                                                              = GHC.Base.foldr
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                  (PlutusTx.List.++
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.[]
                                                                     @ Mlabs.Emulator.Blockchain.Resp)
                                                                  (GHC.Types.:
                                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                                     (GHC.Types.:
                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                           Mlabs.Emulator.Types.Self
                                                                           ds
                                                                           (PlutusTx.Builtins.Internal.subtractInteger
                                                                              PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                              ds1))
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid ds ds1)
                                                                           (GHC.Types.[]
                                                                              @ Mlabs.Emulator.Blockchain.Resp)))
                                                                     (GHC.Types.:
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Types.:
                                                                           @ Mlabs.Emulator.Blockchain.Resp
                                                                           (Mlabs.Emulator.Blockchain.Move
                                                                              uid
                                                                              aCoin
                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                 PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                 ds1))
                                                                           (GHC.Types.:
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (Mlabs.Emulator.Blockchain.Move
                                                                                 Mlabs.Emulator.Types.Self
                                                                                 aCoin
                                                                                 ds1)
                                                                              (GHC.Types.[]
                                                                                 @ Mlabs.Emulator.Blockchain.Resp)))
                                                                        (GHC.Types.:
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (GHC.Base.build
                                                                              @ Mlabs.Emulator.Blockchain.Resp
                                                                              (\ (@ a2)
                                                                                 (c [Occ=Once!, OS=OneShot]
                                                                                    :: Mlabs.Emulator.Blockchain.Resp
                                                                                       -> a2 -> a2)
                                                                                 (n [Occ=Once, OS=OneShot]
                                                                                    :: a2) ->
                                                                                 c (Mlabs.Emulator.Blockchain.Burn
                                                                                      aCoin ds1)
                                                                                   n))
                                                                           (GHC.Types.[]
                                                                              @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a1, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          [Mlabs.Emulator.Blockchain.Resp])))))));
                                     Mlabs.Lending.Logic.Types.FlashLoanAct ->
                                       GHC.Base.return
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         Mlabs.Lending.Logic.React.qReact1
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                     Mlabs.Lending.Logic.Types.LiquidationCallAct ds ds1 ds2
                                                                                  ds3 [Occ=OnceL!] ->
                                       let {
                                         $dMonadError7 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError7
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError8
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError8
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError9 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError9
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadError10 [Occ=OnceL]
                                           :: Control.Monad.Error.Class.MonadError
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadError10
                                           = Control.Monad.Error.Class.$fMonadErroreStateT
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Error.Class.$fMonadErroreEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonadState
                                           :: Control.Monad.State.Class.MonadState
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonadState
                                           = Control.Monad.State.Class.$fMonadStatesStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         $dMonad6
                                           :: GHC.Base.Monad
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                         [LclId]
                                         $dMonad6
                                           = Control.Monad.Trans.State.Strict.$fMonadStateT
                                               @ (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.$fMonadEither
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                       let {
                                         borrowUserId :: Mlabs.Emulator.Types.UserId
                                         [LclId]
                                         borrowUserId
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow ds4 [Occ=Once]
                                                                                   _ [Occ=Dead] ->
                                             ds4
                                             } } in
                                       let {
                                         borrowAsset :: Plutus.V1.Ledger.Value.AssetClass
                                         [LclId]
                                         borrowAsset
                                           = case ds1 of
                                             { Mlabs.Lending.Logic.Types.BadBorrow _ [Occ=Dead]
                                                                                   ds5 [Occ=Once] ->
                                             ds5
                                             } } in
                                       GHC.Base.>>
                                         @ (Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                         $dMonad6
                                         @ ()
                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            (Control.Monad.State.Class.$p1MonadState
                                               @ Mlabs.Lending.Logic.Types.LendingPool
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonadState)
                                            @ GHC.Types.Bool
                                            @ ()
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.AssocMap.Map
                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                         PlutusTx.Ratio.Rational)
                                               [LclId]
                                               ds4
                                                 = Control.Monad.State.Class.gets
                                                     @ Mlabs.Lending.Logic.Types.LendingPool
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     @ Mlabs.Lending.Logic.Types.HealthReport
                                                     $dMonadState
                                                     Mlabs.Lending.Logic.Types.$sel:lp'healthReport:LendingPool } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <PlutusTx.AssocMap.Map
                                                                     Mlabs.Lending.Logic.Types.BadBorrow
                                                                     PlutusTx.Ratio.Rational>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Lending.Logic.Types.BadBorrow
                                                                         PlutusTx.Ratio.Rational))
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Lending.Logic.Types.BadBorrow
                                                                            PlutusTx.Ratio.Rational,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (GHC.Types.Bool,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                       (joinrec {
                                                          go [Occ=LoopBreakerT[1]]
                                                            :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                 PlutusTx.Ratio.Rational)]
                                                               -> GHC.Types.Bool
                                                          [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                          go (ds5 [Occ=Once!]
                                                                :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                     PlutusTx.Ratio.Rational)])
                                                            = case ds5 of {
                                                                [] -> GHC.Types.False;
                                                                : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                                  case ds6 of
                                                                  { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                                  case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                         c' ds1
                                                                  of {
                                                                    GHC.Types.False -> jump go xs';
                                                                    GHC.Types.True -> GHC.Types.True
                                                                  }
                                                                  }
                                                              }; } in
                                                        jump go
                                                          (v
                                                           `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                       <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                       <PlutusTx.Ratio.Rational>_R
                                                                   :: GHC.Types.Coercible
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                                           PlutusTx.Ratio.Rational)
                                                                        [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational)])),
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <GHC.Types.Bool>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (GHC.Types.Bool,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             GHC.Types.Bool)))
                                            (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                               case isOk of {
                                                 GHC.Types.False ->
                                                   Control.Monad.Error.Class.throwError
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonadError8
                                                     @ ()
                                                     (GHC.Magic.noinline
                                                        @ (GHC.Base.String
                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                        (GHC.CString.unpackCString#
                                                           "Bad borrow not present"#));
                                                 GHC.Types.True ->
                                                   (\ (st1 [Occ=Once]
                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                        (GHC.Tuple.(), st1))
                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <()>_N)
                                                           :: GHC.Types.Coercible
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      ((),
                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   ()))
                                               }))
                                         (GHC.Base.>>=
                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                            $dMonad6
                                            @ (PlutusTx.AssocMap.Map
                                                 Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                            (let {
                                               ds4 [Occ=OnceL]
                                                 :: Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      Mlabs.Lending.Logic.Types.User
                                               [LclId]
                                               ds4
                                                 = Mlabs.Lending.Logic.State.getUser
                                                     (case ds1 of
                                                      { Mlabs.Lending.Logic.Types.BadBorrow ds5 [Occ=Once]
                                                                                            _ [Occ=Dead] ->
                                                      ds5
                                                      }) } in
                                             (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                case (ds4
                                                      `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <Mlabs.Lending.Logic.Types.User>_N
                                                              :: GHC.Types.Coercible
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      Mlabs.Lending.Logic.Types.User)
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         (Mlabs.Lending.Logic.Types.User,
                                                                          Mlabs.Lending.Logic.Types.LendingPool))))
                                                       x
                                                of {
                                                  Data.Either.Left c1 [Occ=Once] ->
                                                    Data.Either.Left
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      c1;
                                                  Data.Either.Right a1 [Occ=Once!] ->
                                                    Data.Either.Right
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Wallet,
                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                      (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                       (case v of
                                                        { Mlabs.Lending.Logic.Types.User ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                        ds5
                                                        },
                                                        st1)
                                                       })
                                                })
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Wallet>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                (PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.Coin
                                                                   Mlabs.Lending.Logic.Types.Wallet,
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             (PlutusTx.AssocMap.Map
                                                                Mlabs.Emulator.Types.Coin
                                                                Mlabs.Lending.Logic.Types.Wallet))))
                                            (\ (wals
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Wallet) ->
                                               GHC.Base.>>=
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ GHC.Integer.Type.Integer
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (join {
                                                    $j [Occ=OnceLT[0]]
                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           GHC.Integer.Type.Integer
                                                    [LclId[JoinId(0)]]
                                                    $j
                                                      = Control.Monad.Error.Class.throwError
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                          $dMonadError7
                                                          @ GHC.Integer.Type.Integer
                                                          (GHC.Magic.noinline
                                                             @ (GHC.Base.String
                                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                             (GHC.CString.unpackCString#
                                                                "Wallet does not have the debt to liquidate"#)) } in
                                                  join {
                                                    $j1 [Occ=OnceL!T[1]]
                                                      :: Mlabs.Lending.Logic.Types.Wallet
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1]
                                                    $j1 (wal [Occ=Once!, OS=OneShot]
                                                           :: Mlabs.Lending.Logic.Types.Wallet)
                                                      = let {
                                                          a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                          [LclId]
                                                          a1
                                                            = case wal of
                                                              { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds6 [Occ=Once]
                                                                                                 _ [Occ=Dead] ->
                                                              ds6
                                                              } } in
                                                        (\ (st1 [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                           Data.Either.Right
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (GHC.Integer.Type.Integer,
                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                             (a1, st1))
                                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <GHC.Integer.Type.Integer>_N)
                                                                :: GHC.Types.Coercible
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (GHC.Integer.Type.Integer,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        GHC.Integer.Type.Integer)) } in
                                                  joinrec {
                                                    go [Occ=LoopBreakerT[1]]
                                                      :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                           Mlabs.Lending.Logic.Types.Wallet)]
                                                         -> Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              GHC.Integer.Type.Integer
                                                    [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                    go (ds4 [Occ=Once!]
                                                          :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                               Mlabs.Lending.Logic.Types.Wallet)])
                                                      = case ds4 of {
                                                          [] -> jump $j;
                                                          : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                            case ds5 of { (c' [Occ=Once], i [Occ=Once]) ->
                                                            case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                   (c'
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                                   (borrowAsset
                                                                    `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                            :: GHC.Types.Coercible
                                                                                 Plutus.V1.Ledger.Value.AssetClass
                                                                                 (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                  Plutus.V1.Ledger.Value.TokenName)))
                                                            of {
                                                              GHC.Types.False -> jump go xs';
                                                              GHC.Types.True -> jump $j1 i
                                                            }
                                                            }
                                                        }; } in
                                                  jump go
                                                    (wals
                                                     `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                 <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                 <Mlabs.Lending.Logic.Types.Wallet>_R
                                                             :: GHC.Types.Coercible
                                                                  (PlutusTx.AssocMap.Map
                                                                     Plutus.V1.Ledger.Value.AssetClass
                                                                     Mlabs.Lending.Logic.Types.Wallet)
                                                                  [(Plutus.V1.Ledger.Value.AssetClass,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])))
                                                 (\ (bor [Occ=OnceL] :: GHC.Integer.Type.Integer) ->
                                                    GHC.Base.>>=
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ GHC.Integer.Type.Integer
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (join {
                                                         $j [Occ=OnceLT[0]]
                                                           :: Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                GHC.Integer.Type.Integer
                                                         [LclId[JoinId(0)]]
                                                         $j
                                                           = Control.Monad.Error.Class.throwError
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                                               $dMonadError10
                                                               @ GHC.Integer.Type.Integer
                                                               (GHC.Magic.noinline
                                                                  @ (GHC.Base.String
                                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                  (GHC.CString.unpackCString#
                                                                     "Wallet does not have collateral for liquidation asset"#)) } in
                                                       join {
                                                         $j1 [Occ=OnceL!T[1]]
                                                           :: Mlabs.Lending.Logic.Types.Wallet
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1]
                                                         $j1 (wal [Occ=Once!, OS=OneShot]
                                                                :: Mlabs.Lending.Logic.Types.Wallet)
                                                           = let {
                                                               a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                               [LclId]
                                                               a1
                                                                 = case wal of
                                                                   { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                      ds5 [Occ=Once]
                                                                                                      _ [Occ=Dead]
                                                                                                      _ [Occ=Dead] ->
                                                                   ds5
                                                                   } } in
                                                             (\ (st1 [Occ=Once]
                                                                   :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                Data.Either.Right
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ (GHC.Integer.Type.Integer,
                                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                                  (a1, st1))
                                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                              <Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                              <GHC.Integer.Type.Integer>_N)
                                                                     :: GHC.Types.Coercible
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                (GHC.Integer.Type.Integer,
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             GHC.Integer.Type.Integer)) } in
                                                       joinrec {
                                                         go [Occ=LoopBreakerT[1]]
                                                           :: [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Wallet)]
                                                              -> Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   GHC.Integer.Type.Integer
                                                         [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                         go (ds4 [Occ=Once!]
                                                               :: [(Mlabs.Emulator.Types.Coin,
                                                                    Mlabs.Lending.Logic.Types.Wallet)])
                                                           = case ds4 of {
                                                               [] -> jump $j;
                                                               : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                                 case ds5 of
                                                                 { (c' [Occ=Once], i [Occ=Once]) ->
                                                                 case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                        (c'
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                        (ds
                                                                         `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                 :: GHC.Types.Coercible
                                                                                      Plutus.V1.Ledger.Value.AssetClass
                                                                                      (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                       Plutus.V1.Ledger.Value.TokenName)))
                                                                 of {
                                                                   GHC.Types.False -> jump go xs';
                                                                   GHC.Types.True -> jump $j1 i
                                                                 }
                                                                 }
                                                             }; } in
                                                       jump go
                                                         (wals
                                                          `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                      <Mlabs.Emulator.Types.Coin>_R
                                                                      <Mlabs.Lending.Logic.Types.Wallet>_R
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Wallet)
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Wallet)])))
                                                      (\ (col :: GHC.Integer.Type.Integer) ->
                                                         GHC.Base.>>
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonad6
                                                           @ ()
                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                           (Mlabs.Control.Check.isPositive
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                                 @ Mlabs.Lending.Logic.Types.LendingPool)
                                                              $dMonadError8
                                                              (GHC.Magic.noinline
                                                                 @ (GHC.Base.String
                                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                 (GHC.CString.unpackCString#
                                                                    "liquidation collateral"#))
                                                              col)
                                                           (GHC.Base.>>
                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                              $dMonad6
                                                              @ ()
                                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                                              (case PlutusTx.Builtins.Internal.ifThenElse
                                                                      @ GHC.Types.Bool
                                                                      (PlutusTx.Builtins.Internal.lessThanInteger
                                                                         bor
                                                                         (PlutusTx.Builtins.Internal.multiplyInteger
                                                                            2 ds2))
                                                                      GHC.Types.False
                                                                      GHC.Types.True
                                                               of {
                                                                 GHC.Types.False ->
                                                                   Control.Monad.Error.Class.throwError
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                     $dMonadError9
                                                                     @ ()
                                                                     (GHC.Magic.noinline
                                                                        @ (GHC.Base.String
                                                                           -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                        (GHC.CString.unpackCString#
                                                                           "Can not cover more than half of the borrow"#));
                                                                 GHC.Types.True ->
                                                                   (\ (st1 [Occ=Once]
                                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                      Data.Either.Right
                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        @ ((),
                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                        (GHC.Tuple.(), st1))
                                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                    <Data.Either.Either
                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                    <()>_N)
                                                                           :: GHC.Types.Coercible
                                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                                 -> Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      ((),
                                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                   (Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                   ()))
                                                               })
                                                              (GHC.Base.>>=
                                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                 $dMonad6
                                                                 @ GHC.Integer.Type.Integer
                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                 (let {
                                                                    ds4 [Occ=OnceL]
                                                                      :: Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                           GHC.Integer.Type.Integer
                                                                    [LclId]
                                                                    ds4
                                                                      = GHC.Base.>>=
                                                                          @ (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                          Mlabs.Lending.Logic.State.aToken2
                                                                          @ GHC.Integer.Type.Integer
                                                                          @ GHC.Integer.Type.Integer
                                                                          (Mlabs.Lending.Logic.State.toAda
                                                                             borrowAsset ds2)
                                                                          (Mlabs.Lending.Logic.State.fromAda
                                                                             ds) } in
                                                                  (\ (x [Occ=Once]
                                                                        :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                     case (ds4
                                                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                       <Data.Either.Either
                                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                       <GHC.Integer.Type.Integer>_N
                                                                                   :: GHC.Types.Coercible
                                                                                        (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                           GHC.Integer.Type.Integer)
                                                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                                                         -> Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                              (GHC.Integer.Type.Integer,
                                                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                                                            x
                                                                     of {
                                                                       Data.Either.Left c1 [Occ=Once] ->
                                                                         Data.Either.Left
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           c1;
                                                                       Data.Either.Right a1 [Occ=Once!] ->
                                                                         Data.Either.Right
                                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           @ (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                                           (case a1 of
                                                                            { (v [Occ=Once],
                                                                               st1 [Occ=Once]) ->
                                                                            (PlutusTx.Ord.$fOrdInteger_$cmin
                                                                               col v,
                                                                             st1)
                                                                            })
                                                                     })
                                                                  `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                   <Data.Either.Either
                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                   <GHC.Integer.Type.Integer>_N)
                                                                          :: GHC.Types.Coercible
                                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                                -> Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                     (GHC.Integer.Type.Integer,
                                                                                      Mlabs.Lending.Logic.Types.LendingPool))
                                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                                  (Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                  GHC.Integer.Type.Integer)))
                                                                 (\ (colCovered
                                                                       :: GHC.Integer.Type.Integer) ->
                                                                    GHC.Base.>>=
                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                           (Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                      $dMonad6
                                                                      @ GHC.Integer.Type.Integer
                                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                                      (GHC.Base.>>=
                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                              (Data.Either.Either
                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                         $dMonad6
                                                                         @ PlutusTx.Ratio.Rational
                                                                         @ GHC.Integer.Type.Integer
                                                                         (Mlabs.Lending.Logic.State.getLiquidationBonus
                                                                            ds)
                                                                         (\ (rate [Occ=Once!]
                                                                               :: PlutusTx.Ratio.Rational) ->
                                                                            Mlabs.Lending.Logic.State.toAda
                                                                              ds
                                                                              (PlutusTx.Ratio.round
                                                                                 (case rate of
                                                                                  { PlutusTx.Ratio.:% x' [Occ=Once]
                                                                                                      y' [Occ=Once] ->
                                                                                  PlutusTx.Ratio.reduce
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       colCovered x')
                                                                                    (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                       PlutusTx.Ratio.fromInteger1
                                                                                       y')
                                                                                  }))))
                                                                      (\ (adaBonus
                                                                            :: GHC.Integer.Type.Integer) ->
                                                                         GHC.Base.>>=
                                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                (Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                           $dMonad6
                                                                           @ Mlabs.Emulator.Types.Coin
                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                           (Mlabs.Lending.Logic.State.aToken
                                                                              ds)
                                                                           (\ (aCollateralAsset [Occ=Once]
                                                                                 :: Mlabs.Emulator.Types.Coin) ->
                                                                              GHC.Base.>>
                                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                                     (Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                $dMonad6
                                                                                @ ()
                                                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                (GHC.Base.>>
                                                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                        (Data.Either.Either
                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                   $dMonad6
                                                                                   @ ()
                                                                                   @ ()
                                                                                   (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                      borrowUserId
                                                                                      ds
                                                                                      (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                         Data.Either.Right
                                                                                           @ Mlabs.Lending.Logic.State.Error
                                                                                           @ Mlabs.Lending.Logic.Types.Wallet
                                                                                           (case x of
                                                                                            { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                               _ [Occ=Dead]
                                                                                                                               ds6 [Occ=Once]
                                                                                                                               ds7 [Occ=Once] ->
                                                                                            Mlabs.Lending.Logic.Types.$WWallet
                                                                                              ds4
                                                                                              (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                 (case x of
                                                                                                  { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                     ds9 [Occ=Once]
                                                                                                                                     _ [Occ=Dead]
                                                                                                                                     _ [Occ=Dead] ->
                                                                                                  ds9
                                                                                                  })
                                                                                                 colCovered)
                                                                                              ds6
                                                                                              ds7
                                                                                            })))
                                                                                   (GHC.Base.>>
                                                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                                                           (Data.Either.Either
                                                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                      $dMonad6
                                                                                      @ ()
                                                                                      @ ()
                                                                                      (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                         borrowUserId
                                                                                         borrowAsset
                                                                                         (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                            Data.Either.Right
                                                                                              @ Mlabs.Lending.Logic.State.Error
                                                                                              @ Mlabs.Lending.Logic.Types.Wallet
                                                                                              (case x of
                                                                                               { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                                  ds5 [Occ=Once]
                                                                                                                                  _ [Occ=Dead]
                                                                                                                                  ds7 [Occ=Once] ->
                                                                                               Mlabs.Lending.Logic.Types.$WWallet
                                                                                                 ds4
                                                                                                 ds5
                                                                                                 (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                    (case x
                                                                                                     of
                                                                                                     { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                        _ [Occ=Dead]
                                                                                                                                        ds10 [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                     ds10
                                                                                                     })
                                                                                                    ds2)
                                                                                                 ds7
                                                                                               })))
                                                                                      (GHC.Base.>>=
                                                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                                                              (Data.Either.Either
                                                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                         $dMonad4
                                                                                         @ Mlabs.Lending.Logic.Types.User
                                                                                         @ ()
                                                                                         (Mlabs.Lending.Logic.State.getUser
                                                                                            borrowUserId)
                                                                                         (\ (user [Occ=Once]
                                                                                               :: Mlabs.Lending.Logic.Types.User) ->
                                                                                            GHC.Base.>>=
                                                                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                                   (Data.Either.Either
                                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                              $dMonad4
                                                                                              @ Mlabs.Lending.Logic.Types.User
                                                                                              @ ()
                                                                                              (let {
                                                                                                 ds4 [Occ=OnceL]
                                                                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                        (Data.Either.Either
                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                         Mlabs.Lending.Logic.Types.User)
                                                                                                 [LclId]
                                                                                                 ds4
                                                                                                   = updateUserHealth
                                                                                                       t
                                                                                                       (borrowUserId,
                                                                                                        user) } in
                                                                                               (\ (x [Occ=Once]
                                                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                                  case (ds4
                                                                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                    <Data.Either.Either
                                                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                    <(Mlabs.Emulator.Types.UserId,
                                                                                                                      Mlabs.Lending.Logic.Types.User)>_N
                                                                                                                :: GHC.Types.Coercible
                                                                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                        (Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                                        (Mlabs.Emulator.Types.UserId,
                                                                                                                         Mlabs.Lending.Logic.Types.User))
                                                                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                      -> Data.Either.Either
                                                                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                           ((Mlabs.Emulator.Types.UserId,
                                                                                                                             Mlabs.Lending.Logic.Types.User),
                                                                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                                                                         x
                                                                                                  of {
                                                                                                    Data.Either.Left c1 [Occ=Once] ->
                                                                                                      Data.Either.Left
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        c1;
                                                                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                                                                      Data.Either.Right
                                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                        @ (Mlabs.Lending.Logic.Types.User,
                                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                        (case a1
                                                                                                         of
                                                                                                         { (v [Occ=Once!],
                                                                                                            st1 [Occ=Once]) ->
                                                                                                         (case v
                                                                                                          of
                                                                                                          { (_ [Occ=Dead],
                                                                                                             b1 [Occ=Once]) ->
                                                                                                          b1
                                                                                                          },
                                                                                                          st1)
                                                                                                         })
                                                                                                  })
                                                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                <Data.Either.Either
                                                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                <Mlabs.Lending.Logic.Types.User>_N)
                                                                                                       :: GHC.Types.Coercible
                                                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                             -> Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                  (Mlabs.Lending.Logic.Types.User,
                                                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                                                               (Data.Either.Either
                                                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                               Mlabs.Lending.Logic.Types.User)))
                                                                                              (\ (newUser [Occ=OnceL]
                                                                                                    :: Mlabs.Lending.Logic.Types.User) ->
                                                                                                 Mlabs.Lending.Logic.State.modifyUser'
                                                                                                   borrowUserId
                                                                                                   (\ _ [Occ=Dead] ->
                                                                                                      Data.Either.Right
                                                                                                        @ Mlabs.Lending.Logic.State.Error
                                                                                                        @ Mlabs.Lending.Logic.Types.User
                                                                                                        newUser))))))
                                                                                (let {
                                                                                   a1 [Occ=OnceL]
                                                                                     :: [Mlabs.Emulator.Blockchain.Resp]
                                                                                   [LclId]
                                                                                   a1
                                                                                     = GHC.Base.foldr
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                         (PlutusTx.List.++
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.[]
                                                                                            @ Mlabs.Emulator.Blockchain.Resp)
                                                                                         (GHC.Types.:
                                                                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                            (GHC.Types.:
                                                                                               @ Mlabs.Emulator.Blockchain.Resp
                                                                                               (Mlabs.Emulator.Blockchain.Move
                                                                                                  uid
                                                                                                  borrowAsset
                                                                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                     ds2))
                                                                                               (GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     borrowAsset
                                                                                                     ds2)
                                                                                                  (GHC.Types.[]
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                            (GHC.Types.:
                                                                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                               (let {
                                                                                                  coin
                                                                                                    :: Mlabs.Emulator.Types.Coin
                                                                                                  [LclId]
                                                                                                  coin
                                                                                                    = case ds3
                                                                                                      of {
                                                                                                        GHC.Types.False ->
                                                                                                          ds;
                                                                                                        GHC.Types.True ->
                                                                                                          aCollateralAsset
                                                                                                      } } in
                                                                                                GHC.Types.:
                                                                                                  @ Mlabs.Emulator.Blockchain.Resp
                                                                                                  (Mlabs.Emulator.Blockchain.Move
                                                                                                     Mlabs.Emulator.Types.Self
                                                                                                     coin
                                                                                                     (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                        PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                        colCovered))
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        uid
                                                                                                        coin
                                                                                                        colCovered)
                                                                                                     (GHC.Types.[]
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                               (GHC.Types.:
                                                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                                  (GHC.Types.:
                                                                                                     @ Mlabs.Emulator.Blockchain.Resp
                                                                                                     (Mlabs.Emulator.Blockchain.Move
                                                                                                        Mlabs.Emulator.Types.Self
                                                                                                        Mlabs.Emulator.Types.adaCoin
                                                                                                        (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                           PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                           adaBonus))
                                                                                                     (GHC.Types.:
                                                                                                        @ Mlabs.Emulator.Blockchain.Resp
                                                                                                        (Mlabs.Emulator.Blockchain.Move
                                                                                                           uid
                                                                                                           Mlabs.Emulator.Types.adaCoin
                                                                                                           adaBonus)
                                                                                                        (GHC.Types.[]
                                                                                                           @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                                  (GHC.Types.[]
                                                                                                     @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                                                 (\ (st1 [Occ=Once]
                                                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                    Data.Either.Right
                                                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                      @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                                         Mlabs.Lending.Logic.Types.LendingPool)
                                                                                      (a1, st1))
                                                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                  <Data.Either.Either
                                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                  <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                                         :: GHC.Types.Coercible
                                                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                                                               -> Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                    ([Mlabs.Emulator.Blockchain.Resp],
                                                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                                 (Data.Either.Either
                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                 [Mlabs.Emulator.Blockchain.Resp]))))))))))))
                                   });
                              Mlabs.Lending.Logic.Types.PriceAct t uid [Occ=Once]
                                                                 act [Occ=Once!] ->
                                withHealthCheck
                                  t
                                  (let {
                                     m1 [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            ()
                                     [LclId]
                                     m1 = Mlabs.Lending.Logic.State.isTrustedOracle uid } in
                                   let {
                                     k [Occ=OnceL]
                                       :: Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                            [Mlabs.Emulator.Blockchain.Resp]
                                     [LclId]
                                     k = case act of
                                         { Mlabs.Lending.Logic.Types.SetAssetPriceAct coin [Occ=Once]
                                                                                      rate [Occ=OnceL] ->
                                         let {
                                           m2 [Occ=OnceL]
                                             :: Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  ()
                                           [LclId]
                                           m2
                                             = Mlabs.Lending.Logic.State.modifyReserve'
                                                 coin
                                                 (\ (x [Occ=Once!] :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                    Data.Either.Right
                                                      @ Mlabs.Lending.Logic.State.Error
                                                      @ Mlabs.Lending.Logic.Types.Reserve
                                                      (case x of
                                                       { Mlabs.Lending.Logic.Types.Reserve ds [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           ds2 [Occ=Once]
                                                                                           ds3 [Occ=Once]
                                                                                           ds4 [Occ=Once]
                                                                                           ds5 [Occ=Once] ->
                                                       Mlabs.Lending.Logic.Types.$WReserve
                                                         ds
                                                         (Mlabs.Lending.Logic.Types.$WCoinRate rate t)
                                                         ds2
                                                         ds3
                                                         ds4
                                                         ds5
                                                       })) } in
                                         (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                            case (m2
                                                  `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <()>_N
                                                          :: GHC.Types.Coercible
                                                               (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  ())
                                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                                -> Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     ((),
                                                                      Mlabs.Lending.Logic.Types.LendingPool))))
                                                   s1
                                            of {
                                              Data.Either.Left l [Occ=Once] ->
                                                Data.Either.Left
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  l;
                                              Data.Either.Right r [Occ=Once!] ->
                                                case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, s')
                                                }
                                            })
                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                 :: GHC.Types.Coercible
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ([Mlabs.Emulator.Blockchain.Resp],
                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         [Mlabs.Emulator.Blockchain.Resp]))
                                         } } in
                                   (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                      case (m1
                                            `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                        <Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                        <()>_N
                                                    :: GHC.Types.Coercible
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ())
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                             s1
                                      of {
                                        Data.Either.Left l [Occ=Once] ->
                                          Data.Either.Left
                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                            @ ([Mlabs.Emulator.Blockchain.Resp],
                                               Mlabs.Lending.Logic.Types.LendingPool)
                                            l;
                                        Data.Either.Right r [Occ=Once!] ->
                                          case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                          (k
                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                   :: GHC.Types.Coercible
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp])
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))))
                                            s'
                                          }
                                      })
                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                           :: GHC.Types.Coercible
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])));
                              Mlabs.Lending.Logic.Types.GovernAct uid [Occ=Once]
                                                                  act [Occ=Once] ->
                                let {
                                  m1 [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         ()
                                  [LclId]
                                  m1 = Mlabs.Lending.Logic.State.isAdmin uid } in
                                let {
                                  k [Occ=OnceL]
                                    :: Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp]
                                  [LclId]
                                  k = let {
                                        $dMonadError7
                                          :: Control.Monad.Error.Class.MonadError
                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadError7
                                          = Control.Monad.Error.Class.$fMonadErroreStateT
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Control.Monad.Error.Class.$fMonadErroreEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonadState
                                          :: Control.Monad.State.Class.MonadState
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonadState
                                          = Control.Monad.State.Class.$fMonadStatesStateT
                                              @ (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                              @ Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.$fMonadEither
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                      let {
                                        $dMonad6
                                          :: GHC.Base.Monad
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                        [LclId]
                                        $dMonad6
                                          = Control.Monad.Error.Class.$p1MonadError
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonadError7 } in
                                      let {
                                        $d~1 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~1
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Mlabs.Emulator.Types.Coin
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      let {
                                        $d~2 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Plutus.V1.Ledger.Value.TokenName Mlabs.Emulator.Types.Coin
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Plutus.V1.Ledger.Value.TokenName
                                                           Mlabs.Emulator.Types.Coin
                                        [LclId]
                                        $d~2
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @ (PlutusTx.AssocMap.Map
                                                   Plutus.V1.Ledger.Value.TokenName
                                                   Mlabs.Emulator.Types.Coin)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     Mlabs.Emulator.Types.Coin>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.TokenName
                                                       Mlabs.Emulator.Types.Coin
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.TokenName
                                                         Mlabs.Emulator.Types.Coin) } in
                                      let {
                                        $d~3 [Occ=OnceL]
                                          :: PlutusTx.AssocMap.Map
                                               Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                             GHC.Types.~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve
                                        [LclId]
                                        $d~3
                                          = GHC.Types.Eq#
                                              @ *
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Reserve)
                                              @~ (<PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.AssetClass
                                                     Mlabs.Lending.Logic.Types.Reserve>_N
                                                  :: PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.AssetClass
                                                       Mlabs.Lending.Logic.Types.Reserve
                                                     ~ PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.AssetClass
                                                         Mlabs.Lending.Logic.Types.Reserve) } in
                                      case act
                                           `cast` (Mlabs.Lending.Logic.Types.N:GovernAct[0]
                                                   :: GHC.Types.Coercible
                                                        Mlabs.Lending.Logic.Types.GovernAct
                                                        Mlabs.Lending.Logic.Types.CoinCfg)
                                      of wild1 [Occ=OnceL]
                                      { Mlabs.Lending.Logic.Types.CoinCfg ds _ [Occ=Dead] ds2 [Occ=OnceL]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Base.>>=
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        $dMonad6
                                        @ Mlabs.Lending.Logic.Types.LendingPool
                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                        (Control.Monad.State.Class.get
                                           @ Mlabs.Lending.Logic.Types.LendingPool
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonadState)
                                        (\ (st :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           GHC.Base.>>
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonad6
                                             @ ()
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             (join {
                                                $j [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j
                                                  = Control.Monad.Error.Class.throwError
                                                      @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonadError7
                                                      @ ()
                                                      (GHC.Magic.noinline
                                                         @ (GHC.Base.String
                                                            -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                         (GHC.CString.unpackCString#
                                                            "Reserve is already present"#)) } in
                                              join {
                                                $j1 [Occ=OnceLT[0]]
                                                  :: Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString)
                                                       ()
                                                [LclId[JoinId(0)]]
                                                $j1
                                                  = (\ (st1 [Occ=Once]
                                                          :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), st1))
                                                    `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                     <Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                     <()>_N)
                                                            :: GHC.Types.Coercible
                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                  -> Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       ((),
                                                                        Mlabs.Lending.Logic.Types.LendingPool))
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    ())) } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(Mlabs.Emulator.Types.Coin,
                                                       Mlabs.Lending.Logic.Types.Reserve)]
                                                     -> Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          ()
                                                [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                go (ds5 [Occ=Once!]
                                                      :: [(Mlabs.Emulator.Types.Coin,
                                                           Mlabs.Lending.Logic.Types.Reserve)])
                                                  = case ds5 of {
                                                      [] -> jump $j;
                                                      : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                        case ds6 of { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                        case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                               (c'
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                               (ds
                                                                `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                        :: GHC.Types.Coercible
                                                                             Plutus.V1.Ledger.Value.AssetClass
                                                                             (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)))
                                                        of {
                                                          GHC.Types.False -> jump go xs';
                                                          GHC.Types.True -> jump $j1
                                                        }
                                                        }
                                                    }; } in
                                              jump go
                                                (case GHC.Types.eq_sel
                                                        @ *
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve)
                                                        $d~3
                                                 of co
                                                 { __DEFAULT ->
                                                 case st of
                                                 { Mlabs.Lending.Logic.Types.LendingPool ds5 [Occ=Once]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead]
                                                                                         _ [Occ=Dead] ->
                                                 ds5
                                                 `cast` (PlutusTx.AssocMap.N:Map[0]
                                                             <Mlabs.Emulator.Types.Coin>_R
                                                             <Mlabs.Lending.Logic.Types.Reserve>_R
                                                         :: GHC.Types.Coercible
                                                              (PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.Coin
                                                                 Mlabs.Lending.Logic.Types.Reserve)
                                                              [(Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)])
                                                 }
                                                 }))
                                             (GHC.Base.>>
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonad6
                                                @ ()
                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                (Control.Monad.State.Class.put
                                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonadState
                                                   (case st of
                                                    { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                            ds6 [Occ=Once]
                                                                                            ds7 [Occ=Once]
                                                                                            _ [Occ=Dead]
                                                                                            ds9 [Occ=Once]
                                                                                            ds10 [Occ=Once]
                                                                                            ds11 [Occ=Once] ->
                                                    Mlabs.Lending.Logic.Types.$WLendingPool
                                                      (PlutusTx.AssocMap.unionWith
                                                         @ Mlabs.Emulator.Types.Coin
                                                         @ Mlabs.Lending.Logic.Types.Reserve
                                                         (Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.AssetClass>_N)
                                                                  :: GHC.Types.Coercible
                                                                       ((Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                         Plutus.V1.Ledger.Value.TokenName)
                                                                        -> (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                            Plutus.V1.Ledger.Value.TokenName)
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.AssetClass)))
                                                         (\ _ [Occ=Dead]
                                                            (b [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                            b)
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.Coin
                                                                      Mlabs.Lending.Logic.Types.Reserve)
                                                                 $d~1
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool ds12 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds12
                                                          }
                                                          })
                                                         ((GHC.Base.build
                                                             @ (Mlabs.Emulator.Types.Coin,
                                                                Mlabs.Lending.Logic.Types.Reserve)
                                                             (\ (@ a)
                                                                (c [Occ=Once!, OS=OneShot]
                                                                   :: (Mlabs.Emulator.Types.Coin,
                                                                       Mlabs.Lending.Logic.Types.Reserve)
                                                                      -> a -> a)
                                                                (n [Occ=Once, OS=OneShot] :: a) ->
                                                                c (ds,
                                                                   Mlabs.Lending.Logic.Types.initReserve
                                                                     wild1)
                                                                  n))
                                                          `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                           <Mlabs.Emulator.Types.Coin>_R
                                                                           <Mlabs.Lending.Logic.Types.Reserve>_R)
                                                                  :: GHC.Types.Coercible
                                                                       [(Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Reserve)]
                                                                       (PlutusTx.AssocMap.Map
                                                                          Mlabs.Emulator.Types.Coin
                                                                          Mlabs.Lending.Logic.Types.Reserve))))
                                                      ds6
                                                      ds7
                                                      (PlutusTx.AssocMap.insert
                                                         @ Plutus.V1.Ledger.Value.TokenName
                                                         @ Mlabs.Emulator.Types.Coin
                                                         (PlutusTx.Builtins.equalsByteString
                                                          `cast` ((Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                   ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                       <Plutus.V1.Ledger.Value.TokenName>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        -> GHC.Types.Bool)
                                                                       (PlutusTx.Eq.Eq
                                                                          Plutus.V1.Ledger.Value.TokenName)))
                                                         ds2
                                                         ds
                                                         (case GHC.Types.eq_sel
                                                                 @ *
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 @ (PlutusTx.AssocMap.Map
                                                                      Plutus.V1.Ledger.Value.TokenName
                                                                      Mlabs.Emulator.Types.Coin)
                                                                 $d~2
                                                          of co
                                                          { __DEFAULT ->
                                                          case st of
                                                          { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  ds15 [Occ=Once]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                          ds15
                                                          }
                                                          }))
                                                      ds9
                                                      ds10
                                                      ds11
                                                    }))
                                                (GHC.Base.return
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp))))
                                      } } in
                                (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   case (m1
                                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                     <Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                     <()>_N
                                                 :: GHC.Types.Coercible
                                                      (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         ())
                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                       -> Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                            ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                          s1
                                   of {
                                     Data.Either.Left l [Occ=Once] ->
                                       Data.Either.Left
                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                         @ ([Mlabs.Emulator.Blockchain.Resp],
                                            Mlabs.Lending.Logic.Types.LendingPool)
                                         l;
                                     Data.Either.Right r [Occ=Once!] ->
                                       case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                       (k
                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                    <Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                :: GHC.Types.Coercible
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        [Mlabs.Emulator.Blockchain.Resp])
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           ([Mlabs.Emulator.Blockchain.Resp],
                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                         s'
                                       }
                                   })
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]));
                              Mlabs.Lending.Logic.Types.QueryAct _ [Occ=Dead] _ [Occ=Dead]
                                                                 _ [Occ=Dead] ->
                                (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                   Data.Either.Right
                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                     @ ([Mlabs.Emulator.Blockchain.Resp],
                                        Mlabs.Lending.Logic.Types.LendingPool)
                                     (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                        :: GHC.Types.Coercible
                                             (Mlabs.Lending.Logic.Types.LendingPool
                                              -> Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                   ([Mlabs.Emulator.Blockchain.Resp],
                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                [Mlabs.Emulator.Blockchain.Resp]))
                            })
Context: Compiling expr: \ (input :: Mlabs.Lending.Logic.Types.Act) ->
                           let {
                             userUpdateSpan [Occ=OnceL] :: GHC.Integer.Type.Integer
                             [LclId]
                             userUpdateSpan = 10 } in
                           let {
                             $dMonad3
                               :: GHC.Base.Monad
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonad3
                               = Control.Monad.Trans.State.Strict.$fMonadStateT
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Data.Either.$fMonadEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             $d~ [Occ=OnceL]
                               :: PlutusTx.AssocMap.Map
                                    Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet
                                  GHC.Types.~ PlutusTx.AssocMap.Map
                                                Plutus.V1.Ledger.Value.AssetClass
                                                Mlabs.Lending.Logic.Types.Wallet
                             [LclId]
                             $d~
                               = GHC.Types.Eq#
                                   @ *
                                   @ (PlutusTx.AssocMap.Map
                                        Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                   @ (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.AssetClass Mlabs.Lending.Logic.Types.Wallet)
                                   @~ (<PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.AssetClass
                                          Mlabs.Lending.Logic.Types.Wallet>_N
                                       :: PlutusTx.AssocMap.Map
                                            Plutus.V1.Ledger.Value.AssetClass
                                            Mlabs.Lending.Logic.Types.Wallet
                                          ~ PlutusTx.AssocMap.Map
                                              Plutus.V1.Ledger.Value.AssetClass
                                              Mlabs.Lending.Logic.Types.Wallet) } in
                           let {
                             updateUserHealth
                               :: GHC.Integer.Type.Integer
                                  -> (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                  -> Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                       (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                             [LclId, Arity=2]
                             updateUserHealth
                               = \ (currentTime [Occ=OnceL] :: GHC.Integer.Type.Integer)
                                   (ds [Occ=Once!]
                                      :: (Mlabs.Emulator.Types.UserId,
                                          Mlabs.Lending.Logic.Types.User)) ->
                                   case ds of { (uid, user) ->
                                   GHC.Base.>>=
                                     @ (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                     $dMonad3
                                     @ [(Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)]
                                     @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                     (let {
                                        ds1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                        [LclId]
                                        ds1 = 0 } in
                                      case GHC.Types.eq_sel
                                             @ *
                                             @ (PlutusTx.AssocMap.Map
                                                  Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Wallet)
                                             @ (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.AssetClass
                                                  Mlabs.Lending.Logic.Types.Wallet)
                                             $d~
                                      of co
                                      { __DEFAULT ->
                                      case user of
                                      { Mlabs.Lending.Logic.Types.User ds2 [Occ=Once] _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                      PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                        @ (Control.Monad.Trans.State.Strict.StateT
                                             Mlabs.Lending.Logic.Types.LendingPool
                                             (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                        @ Plutus.V1.Ledger.Value.AssetClass
                                        @ (Plutus.V1.Ledger.Value.AssetClass, PlutusTx.Ratio.Rational)
                                        (Mlabs.Control.Monad.State.$fApplicativeStateT
                                           @ Mlabs.Lending.Logic.Types.LendingPool)
                                        (\ (asset :: Plutus.V1.Ledger.Value.AssetClass) ->
                                           let {
                                             ds5 [Occ=OnceL]
                                               :: Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    PlutusTx.Ratio.Rational
                                             [LclId]
                                             ds5 = Mlabs.Lending.Logic.State.getHealth 0 asset user } in
                                           (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              case (ds5
                                                    `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <PlutusTx.Ratio.Rational>_N
                                                            :: GHC.Types.Coercible
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    PlutusTx.Ratio.Rational)
                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                  -> Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       (PlutusTx.Ratio.Rational,
                                                                        Mlabs.Lending.Logic.Types.LendingPool))))
                                                     x
                                              of {
                                                Data.Either.Left c1 [Occ=Once] ->
                                                  Data.Either.Left
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                    @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                        PlutusTx.Ratio.Rational),
                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                    c1;
                                                Data.Either.Right a1 [Occ=Once!] ->
                                                  Data.Either.Right
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                    @ ((Plutus.V1.Ledger.Value.AssetClass,
                                                        PlutusTx.Ratio.Rational),
                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                    (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                     ((asset, v), st1)
                                                     })
                                              })
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <(Plutus.V1.Ledger.Value.AssetClass,
                                                              PlutusTx.Ratio.Rational)>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ((Plutus.V1.Ledger.Value.AssetClass,
                                                                PlutusTx.Ratio.Rational),
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           (Plutus.V1.Ledger.Value.AssetClass,
                                                            PlutusTx.Ratio.Rational))))
                                        (PlutusTx.Functor.$fFunctor[]_$cfmap
                                           @ (Plutus.V1.Ledger.Value.AssetClass,
                                              Mlabs.Lending.Logic.Types.Wallet)
                                           @ Plutus.V1.Ledger.Value.AssetClass
                                           (\ (ds5 [Occ=Once!]
                                                 :: (Plutus.V1.Ledger.Value.AssetClass,
                                                     Mlabs.Lending.Logic.Types.Wallet)) ->
                                              case ds5 of { (k1 [Occ=Once], _ [Occ=Dead]) -> k1 })
                                           (PlutusTx.List.foldr
                                              @ (Plutus.V1.Ledger.Value.AssetClass,
                                                 Mlabs.Lending.Logic.Types.Wallet)
                                              @ [(Plutus.V1.Ledger.Value.AssetClass,
                                                  Mlabs.Lending.Logic.Types.Wallet)]
                                              (\ (e :: (Plutus.V1.Ledger.Value.AssetClass,
                                                        Mlabs.Lending.Logic.Types.Wallet))
                                                 (xs [Occ=Once*, OS=OneShot]
                                                    :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                         Mlabs.Lending.Logic.Types.Wallet)]) ->
                                                 case PlutusTx.Builtins.Internal.ifThenElse
                                                        @ GHC.Types.Bool
                                                        (PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                                           (case e of { (_ [Occ=Dead], b1 [Occ=Once!]) ->
                                                            case b1 of
                                                            { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               ds8 [Occ=Once]
                                                                                               _ [Occ=Dead] ->
                                                            ds8
                                                            }
                                                            })
                                                           ds1)
                                                        GHC.Types.False
                                                        GHC.Types.True
                                                 of {
                                                   GHC.Types.False -> xs;
                                                   GHC.Types.True ->
                                                     GHC.Types.:
                                                       @ (Plutus.V1.Ledger.Value.AssetClass,
                                                          Mlabs.Lending.Logic.Types.Wallet)
                                                       e
                                                       xs
                                                 })
                                              (GHC.Types.[]
                                                 @ (Plutus.V1.Ledger.Value.AssetClass,
                                                    Mlabs.Lending.Logic.Types.Wallet))
                                              (ds2
                                               `cast` (PlutusTx.AssocMap.N:Map[0]
                                                           <Plutus.V1.Ledger.Value.AssetClass>_R
                                                           <Mlabs.Lending.Logic.Types.Wallet>_R
                                                       :: GHC.Types.Coercible
                                                            (PlutusTx.AssocMap.Map
                                                               Plutus.V1.Ledger.Value.AssetClass
                                                               Mlabs.Lending.Logic.Types.Wallet)
                                                            [(Plutus.V1.Ledger.Value.AssetClass,
                                                              Mlabs.Lending.Logic.Types.Wallet)]))))
                                      }
                                      })
                                     (\ (health
                                           :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                PlutusTx.Ratio.Rational)]) ->
                                        GHC.Base.>>
                                          @ (Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                          $dMonad3
                                          @ ()
                                          @ (Mlabs.Emulator.Types.UserId, Mlabs.Lending.Logic.Types.User)
                                          (Mlabs.Data.List.mapM_
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             @ (Mlabs.Emulator.Types.Coin,
                                                PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)
                                             $dMonad3
                                             (\ (ds1 [Occ=Once!]
                                                   :: (Mlabs.Emulator.Types.Coin,
                                                       PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer)) ->
                                                case ds1 of { (asset, health1) ->
                                                let {
                                                  y [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                  [LclId]
                                                  y = 1 } in
                                                let {
                                                  y1 :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                  [LclId]
                                                  y1
                                                    = PlutusTx.Ratio.:%
                                                        @ GHC.Integer.Type.Integer
                                                        y
                                                        PlutusTx.Ratio.fromInteger1 } in
                                                join {
                                                  $j [Occ=Once*T[0]] :: Mlabs.Lending.Logic.State.St ()
                                                  [LclId[JoinId(0)]]
                                                  $j
                                                    = Mlabs.Lending.Logic.State.modifyHealthReport
                                                        (let {
                                                           key [Occ=OnceL]
                                                             :: Mlabs.Lending.Logic.Types.BadBorrow
                                                           [LclId]
                                                           key
                                                             = Mlabs.Lending.Logic.Types.$WBadBorrow
                                                                 uid asset } in
                                                         \ (ds2 [Occ=Once]
                                                              :: PlutusTx.AssocMap.Map
                                                                   Mlabs.Lending.Logic.Types.BadBorrow
                                                                   PlutusTx.Ratio.Rational) ->
                                                           letrec {
                                                             go [Occ=LoopBreaker]
                                                               :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                    PlutusTx.Ratio.Rational)]
                                                                  -> [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                       PlutusTx.Ratio.Rational)]
                                                             [LclId, Arity=1]
                                                             go
                                                               = \ (ds3 [Occ=Once!]
                                                                      :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                           PlutusTx.Ratio.Rational)]) ->
                                                                   case ds3 of {
                                                                     [] ->
                                                                       GHC.Types.[]
                                                                         @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                            PlutusTx.Ratio.Rational);
                                                                     : ds4 [Occ=Once!] rest [Occ=Once*] ->
                                                                       case ds4 of { (k1, v1 [Occ=Once]) ->
                                                                       case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                              k1 key
                                                                       of {
                                                                         GHC.Types.False ->
                                                                           GHC.Types.:
                                                                             @ (Mlabs.Lending.Logic.Types.BadBorrow,
                                                                                PlutusTx.Ratio.Rational)
                                                                             (k1, v1)
                                                                             (go rest);
                                                                         GHC.Types.True -> rest
                                                                       }
                                                                       }
                                                                   }; } in
                                                           (go
                                                              (ds2
                                                               `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                           <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                           <PlutusTx.Ratio.Rational>_R
                                                                       :: GHC.Types.Coercible
                                                                            (PlutusTx.AssocMap.Map
                                                                               Mlabs.Lending.Logic.Types.BadBorrow
                                                                               PlutusTx.Ratio.Rational)
                                                                            [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                              PlutusTx.Ratio.Rational)])))
                                                           `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                            <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                            <PlutusTx.Ratio.Rational>_R)
                                                                   :: GHC.Types.Coercible
                                                                        [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                          PlutusTx.Ratio.Rational)]
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                                           PlutusTx.Ratio.Rational))) } in
                                                case PlutusTx.Ratio.$fOrdRatio1 health1 y1 of {
                                                  GHC.Types.False ->
                                                    case PlutusTx.Ratio.$fOrdRatio_$c<= health1 y1 of {
                                                      GHC.Types.False -> jump $j;
                                                      GHC.Types.True ->
                                                        Mlabs.Lending.Logic.State.modifyHealthReport
                                                          (PlutusTx.AssocMap.insert
                                                             @ Mlabs.Lending.Logic.Types.BadBorrow
                                                             @ (PlutusTx.Ratio.Ratio
                                                                  GHC.Integer.Type.Integer)
                                                             (Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                              `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                               <Mlabs.Lending.Logic.Types.BadBorrow>_N)
                                                                      :: GHC.Types.Coercible
                                                                           (Mlabs.Lending.Logic.Types.BadBorrow
                                                                            -> Mlabs.Lending.Logic.Types.BadBorrow
                                                                            -> GHC.Types.Bool)
                                                                           (PlutusTx.Eq.Eq
                                                                              Mlabs.Lending.Logic.Types.BadBorrow)))
                                                             (Mlabs.Lending.Logic.Types.$WBadBorrow
                                                                uid asset)
                                                             health1)
                                                    };
                                                  GHC.Types.True -> jump $j
                                                }
                                                })
                                             health)
                                          (let {
                                             a1 [Occ=OnceL] :: Mlabs.Lending.Logic.Types.User
                                             [LclId]
                                             a1
                                               = case user of
                                                 { Mlabs.Lending.Logic.Types.User ds1 [Occ=Once] _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                 Mlabs.Lending.Logic.Types.$WUser
                                                   ds1
                                                   currentTime
                                                   (health
                                                    `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                     <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                     <PlutusTx.Ratio.Rational>_R)
                                                            :: GHC.Types.Coercible
                                                                 [(Plutus.V1.Ledger.Value.AssetClass,
                                                                   PlutusTx.Ratio.Rational)]
                                                                 (PlutusTx.AssocMap.Map
                                                                    Plutus.V1.Ledger.Value.AssetClass
                                                                    PlutusTx.Ratio.Rational)))
                                                 } } in
                                           let {
                                             a2 [Occ=OnceL]
                                               :: (Mlabs.Emulator.Types.UserId,
                                                   Mlabs.Lending.Logic.Types.User)
                                             [LclId]
                                             a2 = (uid, a1) } in
                                           (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              Data.Either.Right
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ ((Mlabs.Emulator.Types.UserId,
                                                    Mlabs.Lending.Logic.Types.User),
                                                   Mlabs.Lending.Logic.Types.LendingPool)
                                                (a2, st1))
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <(Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ((Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User),
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)))))
                                   } } in
                           let {
                             $dMonad4
                               :: GHC.Base.Monad
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonad4
                               = Control.Monad.Trans.State.Strict.$fMonadStateT
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Data.Either.$fMonadEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             withHealthCheck [Occ=Once*!]
                               :: GHC.Integer.Type.Integer
                                  -> Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                       [Mlabs.Emulator.Blockchain.Resp]
                                  -> Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                       [Mlabs.Emulator.Blockchain.Resp]
                             [LclId, Arity=2]
                             withHealthCheck
                               = \ (time :: GHC.Integer.Type.Integer)
                                   (act [Occ=Once]
                                      :: Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                           [Mlabs.Emulator.Blockchain.Resp]) ->
                                   GHC.Base.>>=
                                     @ (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                                     Mlabs.Lending.Logic.React.qReact1
                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                     act
                                     (\ (res [Occ=Once] :: [Mlabs.Emulator.Blockchain.Resp]) ->
                                        GHC.Base.>>
                                          @ (Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                          Mlabs.Lending.Logic.React.qReact1
                                          @ ()
                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                          (GHC.Base.>>=
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             Mlabs.Lending.Logic.React.qReact1
                                             @ [(Mlabs.Emulator.Types.UserId,
                                                 Mlabs.Lending.Logic.Types.User)]
                                             @ ()
                                             (GHC.Base.>>=
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                Mlabs.Lending.Logic.React.qReact1
                                                @ [(GHC.Integer.Type.Integer,
                                                    (Mlabs.Emulator.Types.UserId,
                                                     Mlabs.Lending.Logic.Types.User))]
                                                @ [(Mlabs.Emulator.Types.UserId,
                                                    Mlabs.Lending.Logic.Types.User)]
                                                (let {
                                                   f [Occ=OnceL]
                                                     :: (Mlabs.Emulator.Types.UserId,
                                                         Mlabs.Lending.Logic.Types.User)
                                                        -> (GHC.Integer.Type.Integer,
                                                            (Mlabs.Emulator.Types.UserId,
                                                             Mlabs.Lending.Logic.Types.User))
                                                   [LclId, Arity=1]
                                                   f = \ (ds [Occ=Once!]
                                                            :: (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User)) ->
                                                         case ds of { (uid [Occ=Once], user) ->
                                                         (PlutusTx.Builtins.Internal.subtractInteger
                                                            (case GHC.Types.eq_sel
                                                                    @ *
                                                                    @ GHC.Integer.Type.Integer
                                                                    @ GHC.Integer.Type.Integer
                                                                    Mlabs.Lending.Logic.React.react3
                                                             of co
                                                             { __DEFAULT ->
                                                             case user of
                                                             { Mlabs.Lending.Logic.Types.User _ [Occ=Dead]
                                                                                              ds2 [Occ=Once]
                                                                                              _ [Occ=Dead] ->
                                                             ds2
                                                             }
                                                             })
                                                            time,
                                                          (uid, user))
                                                         } } in
                                                 let {
                                                   ds [Occ=OnceL]
                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.UserId
                                                             Mlabs.Lending.Logic.Types.User)
                                                   [LclId]
                                                   ds
                                                     = Control.Monad.State.Class.gets
                                                         @ Mlabs.Lending.Logic.Types.LendingPool
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         @ (PlutusTx.AssocMap.Map
                                                              Mlabs.Emulator.Types.UserId
                                                              Mlabs.Lending.Logic.Types.User)
                                                         Mlabs.Lending.Logic.React.react2
                                                         Mlabs.Lending.Logic.Types.$sel:lp'users:LendingPool } in
                                                 (\ (x [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    case (ds
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <PlutusTx.AssocMap.Map
                                                                         Mlabs.Emulator.Types.UserId
                                                                         Mlabs.Lending.Logic.Types.User>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Emulator.Types.UserId
                                                                             Mlabs.Lending.Logic.Types.User))
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             (PlutusTx.AssocMap.Map
                                                                                Mlabs.Emulator.Types.UserId
                                                                                Mlabs.Lending.Logic.Types.User,
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           x
                                                    of {
                                                      Data.Either.Left c1 [Occ=Once] ->
                                                        Data.Either.Left
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ ([(GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))],
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          c1;
                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ ([(GHC.Integer.Type.Integer,
                                                               (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User))],
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                           (PlutusTx.Functor.$fFunctor[]_$cfmap
                                                              @ (Mlabs.Emulator.Types.UserId,
                                                                 Mlabs.Lending.Logic.Types.User)
                                                              @ (GHC.Integer.Type.Integer,
                                                                 (Mlabs.Emulator.Types.UserId,
                                                                  Mlabs.Lending.Logic.Types.User))
                                                              f
                                                              (v
                                                               `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                           <Mlabs.Emulator.Types.UserId>_R
                                                                           <Mlabs.Lending.Logic.Types.User>_R
                                                                       :: GHC.Types.Coercible
                                                                            (PlutusTx.AssocMap.Map
                                                                               Mlabs.Emulator.Types.UserId
                                                                               Mlabs.Lending.Logic.Types.User)
                                                                            [(Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User)])),
                                                            st1)
                                                           })
                                                    })
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <[(GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User))]>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    ([(GHC.Integer.Type.Integer,
                                                                       (Mlabs.Emulator.Types.UserId,
                                                                        Mlabs.Lending.Logic.Types.User))],
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 [(GHC.Integer.Type.Integer,
                                                                   (Mlabs.Emulator.Types.UserId,
                                                                    Mlabs.Lending.Logic.Types.User))])))
                                                (\ (us [Occ=Once]
                                                      :: [(GHC.Integer.Type.Integer,
                                                           (Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User))]) ->
                                                   let {
                                                     a1 [Occ=OnceL]
                                                       :: [(Mlabs.Emulator.Types.UserId,
                                                            Mlabs.Lending.Logic.Types.User)]
                                                     [LclId]
                                                     a1
                                                       = PlutusTx.Functor.$fFunctor[]_$cfmap
                                                           @ (GHC.Integer.Type.Integer,
                                                              (Mlabs.Emulator.Types.UserId,
                                                               Mlabs.Lending.Logic.Types.User))
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           (PlutusTx.Prelude.snd
                                                              @ GHC.Integer.Type.Integer
                                                              @ (Mlabs.Emulator.Types.UserId,
                                                                 Mlabs.Lending.Logic.Types.User))
                                                           (Mlabs.Data.List.take
                                                              @ (GHC.Integer.Type.Integer,
                                                                 (Mlabs.Emulator.Types.UserId,
                                                                  Mlabs.Lending.Logic.Types.User))
                                                              userUpdateSpan
                                                              (PlutusTx.List.map
                                                                 @ (GHC.Integer.Type.Integer,
                                                                    (GHC.Integer.Type.Integer,
                                                                     (Mlabs.Emulator.Types.UserId,
                                                                      Mlabs.Lending.Logic.Types.User)))
                                                                 @ (GHC.Integer.Type.Integer,
                                                                    (Mlabs.Emulator.Types.UserId,
                                                                     Mlabs.Lending.Logic.Types.User))
                                                                 (PlutusTx.Prelude.snd
                                                                    @ GHC.Integer.Type.Integer
                                                                    @ (GHC.Integer.Type.Integer,
                                                                       (Mlabs.Emulator.Types.UserId,
                                                                        Mlabs.Lending.Logic.Types.User)))
                                                                 (Mlabs.Data.List.sortBy
                                                                    @ (GHC.Integer.Type.Integer,
                                                                       (GHC.Integer.Type.Integer,
                                                                        (Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)))
                                                                    (\ (x [Occ=Once!]
                                                                          :: (GHC.Integer.Type.Integer,
                                                                              (GHC.Integer.Type.Integer,
                                                                               (Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User))))
                                                                       (y [Occ=Once!]
                                                                          :: (GHC.Integer.Type.Integer,
                                                                              (GHC.Integer.Type.Integer,
                                                                               (Mlabs.Emulator.Types.UserId,
                                                                                Mlabs.Lending.Logic.Types.User)))) ->
                                                                       PlutusTx.Ord.$fOrdInteger_$ccompare
                                                                         (case x of
                                                                          { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                          a2
                                                                          })
                                                                         (case y of
                                                                          { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                          a2
                                                                          }))
                                                                    (PlutusTx.List.map
                                                                       @ (GHC.Integer.Type.Integer,
                                                                          (Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User))
                                                                       @ (GHC.Integer.Type.Integer,
                                                                          (GHC.Integer.Type.Integer,
                                                                           (Mlabs.Emulator.Types.UserId,
                                                                            Mlabs.Lending.Logic.Types.User)))
                                                                       (\ (x :: (GHC.Integer.Type.Integer,
                                                                                 (Mlabs.Emulator.Types.UserId,
                                                                                  Mlabs.Lending.Logic.Types.User))) ->
                                                                          case x of
                                                                          { (a2 [Occ=Once], _ [Occ=Dead]) ->
                                                                          case a2 of y [Occ=Once]
                                                                          { __DEFAULT ->
                                                                          (y, x)
                                                                          }
                                                                          })
                                                                       us)))) } in
                                                   (\ (st1 [Occ=Once]
                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ([(Mlabs.Emulator.Types.UserId,
                                                             Mlabs.Lending.Logic.Types.User)],
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (a1, st1))
                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <[(Mlabs.Emulator.Types.UserId,
                                                                       Mlabs.Lending.Logic.Types.User)]>_N)
                                                           :: GHC.Types.Coercible
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      ([(Mlabs.Emulator.Types.UserId,
                                                                         Mlabs.Lending.Logic.Types.User)],
                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   [(Mlabs.Emulator.Types.UserId,
                                                                     Mlabs.Lending.Logic.Types.User)]))))
                                             (\ (us [Occ=Once]
                                                   :: [(Mlabs.Emulator.Types.UserId,
                                                        Mlabs.Lending.Logic.Types.User)]) ->
                                                GHC.Base.>>=
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  Mlabs.Lending.Logic.React.qReact1
                                                  @ (PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.UserId
                                                       Mlabs.Lending.Logic.Types.User)
                                                  @ ()
                                                  (let {
                                                     ds [Occ=OnceL]
                                                       :: Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            [(Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)]
                                                     [LclId]
                                                     ds
                                                       = PlutusTx.Traversable.$fTraversable[]_$ctraverse
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           @ (Mlabs.Emulator.Types.UserId,
                                                              Mlabs.Lending.Logic.Types.User)
                                                           (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                              @ Mlabs.Lending.Logic.Types.LendingPool)
                                                           (updateUserHealth time)
                                                           us } in
                                                   (\ (x [Occ=Once]
                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                      case (ds
                                                            `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                        <Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                        <[(Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User)]>_N
                                                                    :: GHC.Types.Coercible
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                                            (Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                            [(Mlabs.Emulator.Types.UserId,
                                                                              Mlabs.Lending.Logic.Types.User)])
                                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                                          -> Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                                               ([(Mlabs.Emulator.Types.UserId,
                                                                                  Mlabs.Lending.Logic.Types.User)],
                                                                                Mlabs.Lending.Logic.Types.LendingPool))))
                                                             x
                                                      of {
                                                        Data.Either.Left c1 [Occ=Once] ->
                                                          Data.Either.Left
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ (PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User,
                                                               Mlabs.Lending.Logic.Types.LendingPool)
                                                            c1;
                                                        Data.Either.Right a1 [Occ=Once!] ->
                                                          Data.Either.Right
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ (PlutusTx.AssocMap.Map
                                                                 Mlabs.Emulator.Types.UserId
                                                                 Mlabs.Lending.Logic.Types.User,
                                                               Mlabs.Lending.Logic.Types.LendingPool)
                                                            (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                             (v
                                                              `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                               <Mlabs.Emulator.Types.UserId>_R
                                                                               <Mlabs.Lending.Logic.Types.User>_R)
                                                                      :: GHC.Types.Coercible
                                                                           [(Mlabs.Emulator.Types.UserId,
                                                                             Mlabs.Lending.Logic.Types.User)]
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Emulator.Types.UserId
                                                                              Mlabs.Lending.Logic.Types.User)),
                                                              st1)
                                                             })
                                                      })
                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <PlutusTx.AssocMap.Map
                                                                       Mlabs.Emulator.Types.UserId
                                                                       Mlabs.Lending.Logic.Types.User>_N)
                                                           :: GHC.Types.Coercible
                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                 -> Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      (PlutusTx.AssocMap.Map
                                                                         Mlabs.Emulator.Types.UserId
                                                                         Mlabs.Lending.Logic.Types.User,
                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                   (Data.Either.Either
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   (PlutusTx.AssocMap.Map
                                                                      Mlabs.Emulator.Types.UserId
                                                                      Mlabs.Lending.Logic.Types.User))))
                                                  (\ (newUsers [Occ=OnceL]
                                                        :: PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.UserId
                                                             Mlabs.Lending.Logic.Types.User) ->
                                                     Mlabs.Lending.Logic.State.modifyUsers
                                                       ((\ (users [Occ=Once]
                                                              :: PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.UserId
                                                                   Mlabs.Lending.Logic.Types.User) ->
                                                           PlutusTx.Functor.$fFunctor[]_$cfmap
                                                             @ (Mlabs.Emulator.Types.UserId,
                                                                PlutusTx.These.These
                                                                  Mlabs.Lending.Logic.Types.User
                                                                  Mlabs.Lending.Logic.Types.User)
                                                             @ (Mlabs.Emulator.Types.UserId,
                                                                Mlabs.Lending.Logic.Types.User)
                                                             (\ (ds [Occ=Once!]
                                                                   :: (Mlabs.Emulator.Types.UserId,
                                                                       PlutusTx.These.These
                                                                         Mlabs.Lending.Logic.Types.User
                                                                         Mlabs.Lending.Logic.Types.User)) ->
                                                                case ds of
                                                                { (c1 [Occ=Once], a1 [Occ=Once!]) ->
                                                                (c1,
                                                                 case a1 of {
                                                                   PlutusTx.These.This a2 [Occ=Once] -> a2;
                                                                   PlutusTx.These.That b1 [Occ=Once] -> b1;
                                                                   PlutusTx.These.These a2 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                     a2
                                                                 })
                                                                })
                                                             ((PlutusTx.AssocMap.union
                                                                 @ Mlabs.Emulator.Types.UserId
                                                                 @ Mlabs.Lending.Logic.Types.User
                                                                 @ Mlabs.Lending.Logic.Types.User
                                                                 (Mlabs.Emulator.Types.$fEqUserId_$c==
                                                                  `cast` (Sym (PlutusTx.Eq.N:Eq[0]
                                                                                   <Mlabs.Emulator.Types.UserId>_N)
                                                                          :: GHC.Types.Coercible
                                                                               (Mlabs.Emulator.Types.UserId
                                                                                -> Mlabs.Emulator.Types.UserId
                                                                                -> GHC.Types.Bool)
                                                                               (PlutusTx.Eq.Eq
                                                                                  Mlabs.Emulator.Types.UserId)))
                                                                 newUsers
                                                                 users)
                                                              `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                          <Mlabs.Emulator.Types.UserId>_R
                                                                          <PlutusTx.These.These
                                                                             Mlabs.Lending.Logic.Types.User
                                                                             Mlabs.Lending.Logic.Types.User>_R
                                                                      :: GHC.Types.Coercible
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Emulator.Types.UserId
                                                                              (PlutusTx.These.These
                                                                                 Mlabs.Lending.Logic.Types.User
                                                                                 Mlabs.Lending.Logic.Types.User))
                                                                           [(Mlabs.Emulator.Types.UserId,
                                                                             PlutusTx.These.These
                                                                               Mlabs.Lending.Logic.Types.User
                                                                               Mlabs.Lending.Logic.Types.User)])))
                                                        `cast` (<PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.UserId
                                                                   Mlabs.Lending.Logic.Types.User>_R
                                                                ->_R Sym (PlutusTx.AssocMap.N:Map[0]
                                                                              <Mlabs.Emulator.Types.UserId>_R
                                                                              <Mlabs.Lending.Logic.Types.User>_R)
                                                                :: GHC.Types.Coercible
                                                                     (PlutusTx.AssocMap.Map
                                                                        Mlabs.Emulator.Types.UserId
                                                                        Mlabs.Lending.Logic.Types.User
                                                                      -> [(Mlabs.Emulator.Types.UserId,
                                                                           Mlabs.Lending.Logic.Types.User)])
                                                                     (PlutusTx.AssocMap.Map
                                                                        Mlabs.Emulator.Types.UserId
                                                                        Mlabs.Lending.Logic.Types.User
                                                                      -> PlutusTx.AssocMap.Map
                                                                           Mlabs.Emulator.Types.UserId
                                                                           Mlabs.Lending.Logic.Types.User))))))
                                          (GHC.Base.return
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             Mlabs.Lending.Logic.React.qReact1
                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                             res)) } in
                           let {
                             $dMonadError3 [Occ=OnceL]
                               :: Control.Monad.Error.Class.MonadError
                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonadError3
                               = Control.Monad.Error.Class.$fMonadErroreStateT
                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Control.Monad.Error.Class.$fMonadErroreEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             calcAmountFor [Occ=OnceL*!]
                               :: forall b.
                                  PlutusTx.Ord.Ord b =>
                                  (Mlabs.Lending.Logic.Types.Wallet -> b)
                                  -> Mlabs.Emulator.Types.UserId
                                  -> Mlabs.Emulator.Types.Coin
                                  -> b
                                  -> Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                       b
                             [LclId, Arity=1]
                             calcAmountFor
                               = \ (@ b) ($dOrd [Occ=OnceL] :: PlutusTx.Ord.Ord b) ->
                                   let {
                                     $dMonad5 [Occ=OnceL]
                                       :: GHC.Base.Monad
                                            (Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                     [LclId]
                                     $dMonad5
                                       = Control.Monad.Trans.State.Strict.$fMonadStateT
                                           @ (Data.Either.Either
                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                           @ Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.$fMonadEither
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                   \ (extract [Occ=OnceL!] :: Mlabs.Lending.Logic.Types.Wallet -> b)
                                     (uid [Occ=Once] :: Mlabs.Emulator.Types.UserId)
                                     (asset [Occ=Once] :: Mlabs.Emulator.Types.Coin)
                                     (desiredAmount [Occ=OnceL] :: b) ->
                                     GHC.Base.>>=
                                       @ (Control.Monad.Trans.State.Strict.StateT
                                            Mlabs.Lending.Logic.Types.LendingPool
                                            (Data.Either.Either
                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                       $dMonad5
                                       @ b
                                       @ b
                                       (let {
                                          ds [Occ=OnceL]
                                            :: Control.Monad.Trans.State.Strict.StateT
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 Mlabs.Lending.Logic.Types.Wallet
                                          [LclId]
                                          ds = Mlabs.Lending.Logic.State.getWallet uid asset } in
                                        (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                           case (ds
                                                 `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                             <Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                             <Mlabs.Lending.Logic.Types.Wallet>_N
                                                         :: GHC.Types.Coercible
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 Mlabs.Lending.Logic.Types.Wallet)
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    (Mlabs.Lending.Logic.Types.Wallet,
                                                                     Mlabs.Lending.Logic.Types.LendingPool))))
                                                  x
                                           of {
                                             Data.Either.Left c1 [Occ=Once] ->
                                               Data.Either.Left
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                                 c1;
                                             Data.Either.Right a1 [Occ=Once!] ->
                                               Data.Either.Right
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                                 (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                  (extract v, st1)
                                                  })
                                           })
                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                         <Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                         <b>_N)
                                                :: GHC.Types.Coercible
                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                     (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        b)))
                                       (\ (availableAmount [Occ=Once] :: b) ->
                                          let {
                                            a1 [Occ=OnceL] :: b
                                            [LclId]
                                            a1
                                              = PlutusTx.Ord.min @ b $dOrd availableAmount desiredAmount } in
                                          (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             Data.Either.Right
                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                               @ (b, Mlabs.Lending.Logic.Types.LendingPool)
                                               (a1, st1))
                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                           <Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                           <b>_N)
                                                  :: GHC.Types.Coercible
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             (b, Mlabs.Lending.Logic.Types.LendingPool))
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          b))) } in
                           let {
                             $dMonadError4 [Occ=OnceL]
                               :: Control.Monad.Error.Class.MonadError
                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonadError4
                               = Control.Monad.Error.Class.$fMonadErroreStateT
                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Control.Monad.Error.Class.$fMonadErroreEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             $dMonad5
                               :: GHC.Base.Monad
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonad5
                               = Control.Monad.Trans.State.Strict.$fMonadStateT
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Data.Either.$fMonadEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             $dMonadError5 [Occ=OnceL]
                               :: Control.Monad.Error.Class.MonadError
                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonadError5
                               = Control.Monad.Error.Class.$fMonadErroreStateT
                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Control.Monad.Error.Class.$fMonadErroreEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           let {
                             $dMonadError6 [Occ=OnceL]
                               :: Control.Monad.Error.Class.MonadError
                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                    (Control.Monad.Trans.State.Strict.StateT
                                       Mlabs.Lending.Logic.Types.LendingPool
                                       (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             [LclId]
                             $dMonadError6
                               = Control.Monad.Error.Class.$fMonadErroreStateT
                                   @ PlutusTx.Builtins.Internal.BuiltinByteString
                                   @ (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                   @ Mlabs.Lending.Logic.Types.LendingPool
                                   (Control.Monad.Error.Class.$fMonadErroreEither
                                      @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                           GHC.Base.>>
                             @ (Control.Monad.Trans.State.Strict.StateT
                                  Mlabs.Lending.Logic.Types.LendingPool
                                  (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString))
                             Mlabs.Lending.Logic.React.qReact1
                             @ ()
                             @ [Mlabs.Emulator.Blockchain.Resp]
                             (Mlabs.Lending.Logic.React.checkInput input)
                             (case input of {
                                Mlabs.Lending.Logic.Types.UserAct t uid act [Occ=Once!] ->
                                  withHealthCheck
                                    t
                                    (case act of {
                                       Mlabs.Lending.Logic.Types.DepositAct ds ds1 ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         GHC.Base.>>=
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonad6
                                           @ PlutusTx.Ratio.Rational
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (let {
                                              ds2 [Occ=OnceL]
                                                :: Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     Mlabs.Lending.Logic.Types.Reserve
                                              [LclId]
                                              ds2 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                            (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                               case (ds2
                                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <Mlabs.Lending.Logic.Types.Reserve>_N
                                                             :: GHC.Types.Coercible
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                   -> Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        (Mlabs.Lending.Logic.Types.Reserve,
                                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                                      x
                                               of {
                                                 Data.Either.Left c1 [Occ=Once] ->
                                                   Data.Either.Left
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (PlutusTx.Ratio.Rational,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                     c1;
                                                 Data.Either.Right a1 [Occ=Once!] ->
                                                   Data.Either.Right
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (PlutusTx.Ratio.Rational,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                     (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                      (case v of
                                                       { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           ds8 [Occ=Once!] ->
                                                       case ds8 of
                                                       { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                   _ [Occ=Dead]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds12 [Occ=Once]
                                                                                                   _ [Occ=Dead] ->
                                                       ds12
                                                       }
                                                       },
                                                       st1)
                                                      })
                                               })
                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                             <Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                             <PlutusTx.Ratio.Rational>_N)
                                                    :: GHC.Types.Coercible
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               (PlutusTx.Ratio.Rational,
                                                                Mlabs.Lending.Logic.Types.LendingPool))
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            PlutusTx.Ratio.Rational)))
                                           (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                              GHC.Base.>>
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonad6
                                                @ ()
                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                   uid
                                                   ds1
                                                   (Mlabs.Lending.Logic.InterestRate.addDeposit ni ds))
                                                (GHC.Base.>>=
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ Mlabs.Emulator.Types.Coin
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (Mlabs.Lending.Logic.State.aToken ds1)
                                                   (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                      GHC.Base.>>
                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        $dMonad6
                                                        @ ()
                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                        (Mlabs.Lending.Logic.State.modifyReserve'
                                                           ds1
                                                           (\ (x [Occ=Once]
                                                                 :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                              Data.Either.Right
                                                                @ Mlabs.Lending.Logic.State.Error
                                                                @ Mlabs.Lending.Logic.Types.Reserve
                                                                (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                   t x)))
                                                        (let {
                                                           a1 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                           [LclId]
                                                           a1
                                                             = GHC.Base.foldr
                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                 (PlutusTx.List.++
                                                                    @ Mlabs.Emulator.Blockchain.Resp)
                                                                 (GHC.Types.[]
                                                                    @ Mlabs.Emulator.Blockchain.Resp)
                                                                 (GHC.Types.:
                                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                                    (GHC.Types.:
                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                       (Mlabs.Emulator.Blockchain.Mint
                                                                          aCoin ds)
                                                                       (GHC.Types.[]
                                                                          @ Mlabs.Emulator.Blockchain.Resp))
                                                                    (GHC.Types.:
                                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                                       (GHC.Types.:
                                                                          @ Mlabs.Emulator.Blockchain.Resp
                                                                          (Mlabs.Emulator.Blockchain.Move
                                                                             Mlabs.Emulator.Types.Self
                                                                             aCoin
                                                                             (PlutusTx.Builtins.Internal.subtractInteger
                                                                                PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                ds))
                                                                          (GHC.Types.:
                                                                             @ Mlabs.Emulator.Blockchain.Resp
                                                                             (Mlabs.Emulator.Blockchain.Move
                                                                                uid aCoin ds)
                                                                             (GHC.Types.[]
                                                                                @ Mlabs.Emulator.Blockchain.Resp)))
                                                                       (GHC.Types.:
                                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                                          (GHC.Types.:
                                                                             @ Mlabs.Emulator.Blockchain.Resp
                                                                             (Mlabs.Emulator.Blockchain.Move
                                                                                uid
                                                                                ds1
                                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                                   PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                   ds))
                                                                             (GHC.Types.:
                                                                                @ Mlabs.Emulator.Blockchain.Resp
                                                                                (Mlabs.Emulator.Blockchain.Move
                                                                                   Mlabs.Emulator.Types.Self
                                                                                   ds1
                                                                                   ds)
                                                                                (GHC.Types.[]
                                                                                   @ Mlabs.Emulator.Blockchain.Resp)))
                                                                          (GHC.Types.[]
                                                                             @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                         (\ (st1 [Occ=Once]
                                                               :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                            Data.Either.Right
                                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                              @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                 Mlabs.Lending.Logic.Types.LendingPool)
                                                              (a1, st1))
                                                         `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                          <Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                          <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                 :: GHC.Types.Coercible
                                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                                       -> Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                                            ([Mlabs.Emulator.Blockchain.Resp],
                                                                             Mlabs.Lending.Logic.Types.LendingPool))
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                                         (Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                         [Mlabs.Emulator.Blockchain.Resp]))))));
                                       Mlabs.Lending.Logic.Types.BorrowAct ds ds1 _ [Occ=Dead] ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         GHC.Base.>>
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonad6
                                           @ ()
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (let {
                                              ds3 [Occ=OnceL]
                                                :: Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     Mlabs.Lending.Logic.Types.Reserve
                                              [LclId]
                                              ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                            (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                               join {
                                                 $j [Occ=Once!T[1]]
                                                   :: (GHC.Integer.Type.Integer,
                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                      -> Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                           ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                 [LclId[JoinId(1)], Arity=1]
                                                 $j (r [Occ=Once!, OS=OneShot]
                                                       :: (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool))
                                                   = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                     case PlutusTx.Builtins.Internal.ifThenElse
                                                            @ GHC.Types.Bool
                                                            (PlutusTx.Builtins.Internal.lessThanInteger
                                                               a1 ds)
                                                            GHC.Types.False
                                                            GHC.Types.True
                                                     of {
                                                       GHC.Types.False ->
                                                         ((Control.Monad.Error.Class.throwError
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                             $dMonadError6
                                                             @ ()
                                                             (GHC.Magic.noinline
                                                                @ (GHC.Base.String
                                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                (GHC.CString.unpackCString#
                                                                   "Not enough liquidity for asset"#)))
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <()>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          ())
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             ((),
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           s';
                                                       GHC.Types.True ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                           (GHC.Tuple.(), s')
                                                     }
                                                     } } in
                                               case (ds3
                                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <Mlabs.Lending.Logic.Types.Reserve>_N
                                                             :: GHC.Types.Coercible
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                   -> Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        (Mlabs.Lending.Logic.Types.Reserve,
                                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                                      s1
                                               of {
                                                 Data.Either.Left c1 [Occ=Once] ->
                                                   Data.Either.Left
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                     c1;
                                                 Data.Either.Right a1 [Occ=Once!] ->
                                                   let {
                                                     r [Occ=Once]
                                                       :: (GHC.Integer.Type.Integer,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                     [LclId]
                                                     r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.Reserve ds4 [Occ=Once!]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead] ->
                                                          case ds4 of
                                                          { Mlabs.Lending.Logic.Types.Wallet ds10 [Occ=Once]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead]
                                                                                             _ [Occ=Dead] ->
                                                          ds10
                                                          }
                                                          },
                                                          st1)
                                                         } } in
                                                   jump $j r
                                               })
                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                             <Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                             <()>_N)
                                                    :: GHC.Types.Coercible
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ())))
                                           (GHC.Base.>>
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ ()
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds3 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.Wallet
                                                 [LclId]
                                                 ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                               (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  join {
                                                    $j [Occ=Once!T[1]]
                                                      :: (GHC.Integer.Type.Integer,
                                                          Mlabs.Lending.Logic.Types.LendingPool)
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                    [LclId[JoinId(1)], Arity=1]
                                                    $j (r [Occ=Once!, OS=OneShot]
                                                          :: (GHC.Integer.Type.Integer,
                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                      = case r of { (a1 [Occ=Once], s' [Occ=Once*]) ->
                                                        case PlutusTx.Builtins.Internal.ifThenElse
                                                               @ GHC.Types.Bool
                                                               (PlutusTx.Builtins.Internal.equalsInteger
                                                                  a1 0)
                                                               GHC.Types.True
                                                               GHC.Types.False
                                                        of {
                                                          GHC.Types.False ->
                                                            ((Control.Monad.Error.Class.throwError
                                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                $dMonadError5
                                                                @ ()
                                                                (GHC.Magic.noinline
                                                                   @ (GHC.Base.String
                                                                      -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                   (GHC.CString.unpackCString#
                                                                      "Collateral can not be used as borrow for user"#)))
                                                             `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <()>_N
                                                                     :: GHC.Types.Coercible
                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             ())
                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                           -> Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                ((),
                                                                                 Mlabs.Lending.Logic.Types.LendingPool))))
                                                              s';
                                                          GHC.Types.True ->
                                                            Data.Either.Right
                                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                              @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                              (GHC.Tuple.(), s')
                                                        }
                                                        } } in
                                                  case (ds3
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.Wallet>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.Wallet)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.Wallet,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         s1
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      let {
                                                        r [Occ=Once]
                                                          :: (GHC.Integer.Type.Integer,
                                                              Mlabs.Lending.Logic.Types.LendingPool)
                                                        [LclId]
                                                        r = case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                            (case v of
                                                             { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                ds5 [Occ=Once]
                                                                                                _ [Occ=Dead]
                                                                                                _ [Occ=Dead] ->
                                                             ds5
                                                             },
                                                             st1)
                                                            } } in
                                                      jump $j r
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <()>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  ((),
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               ())))
                                              (GHC.Base.>>
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonad6
                                                 @ ()
                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                 (let {
                                                    msg [Occ=OnceL]
                                                      :: PlutusTx.Builtins.Internal.BuiltinByteString
                                                    [LclId]
                                                    msg
                                                      = GHC.Magic.noinline
                                                          @ (GHC.Base.String
                                                             -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                          (GHC.CString.unpackCString#
                                                             "Not enough collateral to borrow"#) } in
                                                  GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad5
                                                    @ GHC.Integer.Type.Integer
                                                    @ ()
                                                    (Mlabs.Lending.Logic.State.toAda ds1 ds)
                                                    (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                       GHC.Base.>>=
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad5
                                                         @ GHC.Types.Bool
                                                         @ ()
                                                         (GHC.Base.>>=
                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                            $dMonad5
                                                            @ Mlabs.Lending.Logic.Types.User
                                                            @ GHC.Types.Bool
                                                            (Mlabs.Lending.Logic.State.getUser uid)
                                                            (Mlabs.Lending.Logic.State.getHealthCheck
                                                               bor ds1))
                                                         (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                                            case isOk of {
                                                              GHC.Types.False ->
                                                                Control.Monad.Error.Class.throwError
                                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                       (Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                  $dMonadError4
                                                                  @ ()
                                                                  msg;
                                                              GHC.Types.True ->
                                                                (\ (st1 [Occ=Once]
                                                                      :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                   Data.Either.Right
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ ((),
                                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                                     (GHC.Tuple.(), st1))
                                                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                 <Data.Either.Either
                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                 <()>_N)
                                                                        :: GHC.Types.Coercible
                                                                             (Mlabs.Lending.Logic.Types.LendingPool
                                                                              -> Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                   ((),
                                                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                                                             (Control.Monad.Trans.State.Strict.StateT
                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                (Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                ()))
                                                            })))
                                                 (GHC.Base.>>
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ ()
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (GHC.Base.>>=
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ PlutusTx.Ratio.Rational
                                                       @ ()
                                                       (let {
                                                          ds3 [Occ=OnceL]
                                                            :: Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 Mlabs.Lending.Logic.Types.Reserve
                                                          [LclId]
                                                          ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                                        (\ (x [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                           case (ds3
                                                                 `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                             <Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                             <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                         :: GHC.Types.Coercible
                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                 (Data.Either.Either
                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                 Mlabs.Lending.Logic.Types.Reserve)
                                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                                               -> Data.Either.Either
                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                    (Mlabs.Lending.Logic.Types.Reserve,
                                                                                     Mlabs.Lending.Logic.Types.LendingPool))))
                                                                  x
                                                           of {
                                                             Data.Either.Left c1 [Occ=Once] ->
                                                               Data.Either.Left
                                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 @ (PlutusTx.Ratio.Rational,
                                                                    Mlabs.Lending.Logic.Types.LendingPool)
                                                                 c1;
                                                             Data.Either.Right a1 [Occ=Once!] ->
                                                               Data.Either.Right
                                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 @ (PlutusTx.Ratio.Rational,
                                                                    Mlabs.Lending.Logic.Types.LendingPool)
                                                                 (case a1 of
                                                                  { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                                  (case v of
                                                                   { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds9 [Occ=Once!] ->
                                                                   case ds9 of
                                                                   { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                               _ [Occ=Dead]
                                                                                                               _ [Occ=Dead]
                                                                                                               ds13 [Occ=Once]
                                                                                                               _ [Occ=Dead] ->
                                                                   ds13
                                                                   }
                                                                   },
                                                                   st1)
                                                                  })
                                                           })
                                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <PlutusTx.Ratio.Rational>_N)
                                                                :: GHC.Types.Coercible
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (PlutusTx.Ratio.Rational,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        PlutusTx.Ratio.Rational)))
                                                       (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                                          GHC.Base.>>
                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                            $dMonad6
                                                            @ ()
                                                            @ ()
                                                            (Mlabs.Lending.Logic.State.modifyWallet'
                                                               uid
                                                               ds1
                                                               (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                  Data.Either.Right
                                                                    @ Mlabs.Lending.Logic.State.Error
                                                                    @ Mlabs.Lending.Logic.Types.Wallet
                                                                    (case x of
                                                                     { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                        ds4 [Occ=Once]
                                                                                                        _ [Occ=Dead]
                                                                                                        ds6 [Occ=Once] ->
                                                                     Mlabs.Lending.Logic.Types.$WWallet
                                                                       ds3
                                                                       ds4
                                                                       (PlutusTx.Builtins.Internal.addInteger
                                                                          (case x of
                                                                           { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                              _ [Occ=Dead]
                                                                                                              ds9 [Occ=Once]
                                                                                                              _ [Occ=Dead] ->
                                                                           ds9
                                                                           })
                                                                          ds)
                                                                       ds6
                                                                     })))
                                                            (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                               ds1
                                                               (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                  ni
                                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                                     PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                     ds)))))
                                                    (GHC.Base.>>
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonad6
                                                       @ ()
                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                       (Mlabs.Lending.Logic.State.modifyReserve'
                                                          ds1
                                                          (\ (x [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                             Data.Either.Right
                                                               @ Mlabs.Lending.Logic.State.Error
                                                               @ Mlabs.Lending.Logic.Types.Reserve
                                                               (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                  t x)))
                                                       (let {
                                                          a1 [Occ=OnceL]
                                                            :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                          [LclId]
                                                          a1
                                                            = PlutusTx.Builtins.Internal.subtractInteger
                                                                PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                ds } in
                                                        let {
                                                          a2 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                          [LclId]
                                                          a2
                                                            = Mlabs.Emulator.Blockchain.Move
                                                                Mlabs.Emulator.Types.Self ds1 a1 } in
                                                        let {
                                                          a3 [Occ=OnceL] :: Mlabs.Emulator.Blockchain.Resp
                                                          [LclId]
                                                          a3 = Mlabs.Emulator.Blockchain.Move uid ds1 ds } in
                                                        let {
                                                          a4 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                          [LclId]
                                                          a4
                                                            = GHC.Types.:
                                                                @ Mlabs.Emulator.Blockchain.Resp
                                                                a3
                                                                (GHC.Types.[]
                                                                   @ Mlabs.Emulator.Blockchain.Resp) } in
                                                        let {
                                                          a5 [Occ=OnceL] :: [Mlabs.Emulator.Blockchain.Resp]
                                                          [LclId]
                                                          a5
                                                            = GHC.Types.:
                                                                @ Mlabs.Emulator.Blockchain.Resp a2 a4 } in
                                                        (\ (st1 [Occ=Once]
                                                              :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                           Data.Either.Right
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                             (a5, st1))
                                                        `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                         <Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                         <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                :: GHC.Types.Coercible
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           ([Mlabs.Emulator.Blockchain.Resp],
                                                                            Mlabs.Lending.Logic.Types.LendingPool))
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        [Mlabs.Emulator.Blockchain.Resp])))))));
                                       Mlabs.Lending.Logic.Types.RepayAct ds ds1 _ [Occ=Dead] ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         GHC.Base.>>=
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonad6
                                           @ PlutusTx.Ratio.Rational
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (let {
                                              ds3 [Occ=OnceL]
                                                :: Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     Mlabs.Lending.Logic.Types.Reserve
                                              [LclId]
                                              ds3 = Mlabs.Lending.Logic.State.getReserve ds1 } in
                                            (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                               case (ds3
                                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <Mlabs.Lending.Logic.Types.Reserve>_N
                                                             :: GHC.Types.Coercible
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                   -> Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        (Mlabs.Lending.Logic.Types.Reserve,
                                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                                      x
                                               of {
                                                 Data.Either.Left c1 [Occ=Once] ->
                                                   Data.Either.Left
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (PlutusTx.Ratio.Rational,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                     c1;
                                                 Data.Either.Right a1 [Occ=Once!] ->
                                                   Data.Either.Right
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ (PlutusTx.Ratio.Rational,
                                                        Mlabs.Lending.Logic.Types.LendingPool)
                                                     (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                      (case v of
                                                       { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           ds9 [Occ=Once!] ->
                                                       case ds9 of
                                                       { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                   _ [Occ=Dead]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds13 [Occ=Once]
                                                                                                   _ [Occ=Dead] ->
                                                       ds13
                                                       }
                                                       },
                                                       st1)
                                                      })
                                               })
                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                             <Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                             <PlutusTx.Ratio.Rational>_N)
                                                    :: GHC.Types.Coercible
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               (PlutusTx.Ratio.Rational,
                                                                Mlabs.Lending.Logic.Types.LendingPool))
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            PlutusTx.Ratio.Rational)))
                                           (\ (ni :: PlutusTx.Ratio.Rational) ->
                                              GHC.Base.>>=
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonad6
                                                @ GHC.Integer.Type.Integer
                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                (let {
                                                   ds3 [Occ=OnceL]
                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          Mlabs.Lending.Logic.Types.Wallet
                                                   [LclId]
                                                   ds3 = Mlabs.Lending.Logic.State.getWallet uid ds1 } in
                                                 (\ (x [Occ=Once]
                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                    case (ds3
                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <Mlabs.Lending.Logic.Types.Wallet>_N
                                                                  :: GHC.Types.Coercible
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          Mlabs.Lending.Logic.Types.Wallet)
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             (Mlabs.Lending.Logic.Types.Wallet,
                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                           x
                                                    of {
                                                      Data.Either.Left c1 [Occ=Once] ->
                                                        Data.Either.Left
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (GHC.Integer.Type.Integer,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          c1;
                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ (GHC.Integer.Type.Integer,
                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                          (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                           (case v of
                                                            { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               ds6 [Occ=Once]
                                                                                               _ [Occ=Dead] ->
                                                            ds6
                                                            },
                                                            st1)
                                                           })
                                                    })
                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                  <Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                  <GHC.Integer.Type.Integer>_N)
                                                         :: GHC.Types.Coercible
                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                               -> Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    (GHC.Integer.Type.Integer,
                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                 GHC.Integer.Type.Integer)))
                                                (\ (bor [Occ=Once] :: GHC.Integer.Type.Integer) ->
                                                   let {
                                                     newBor :: GHC.Integer.Type.Integer
                                                     [LclId]
                                                     newBor
                                                       = PlutusTx.Builtins.Internal.subtractInteger
                                                           bor ds } in
                                                   GHC.Base.>>
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ ()
                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                     (case PlutusTx.Builtins.Internal.ifThenElse
                                                             @ GHC.Types.Bool
                                                             (PlutusTx.Builtins.Internal.lessThanInteger
                                                                newBor 0)
                                                             GHC.Types.False
                                                             GHC.Types.True
                                                      of {
                                                        GHC.Types.False ->
                                                          Mlabs.Lending.Logic.State.modifyWallet'
                                                            uid
                                                            ds1
                                                            (\ (w [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                               case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                      ni
                                                                      (PlutusTx.Builtins.Internal.subtractInteger
                                                                         PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                         newBor)
                                                                      w
                                                               of {
                                                                 Data.Either.Left l [Occ=Once] ->
                                                                   Data.Either.Left
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     l;
                                                                 Data.Either.Right r [Occ=Once!] ->
                                                                   Data.Either.Right
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     (case r of
                                                                      { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                         ds4 [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         ds6 [Occ=Once] ->
                                                                      Mlabs.Lending.Logic.Types.$WWallet
                                                                        ds3 ds4 0 ds6
                                                                      })
                                                               });
                                                        GHC.Types.True ->
                                                          Mlabs.Lending.Logic.State.modifyWallet'
                                                            uid
                                                            ds1
                                                            (\ (x [Occ=Once!]
                                                                  :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                               Data.Either.Right
                                                                 @ Mlabs.Lending.Logic.State.Error
                                                                 @ Mlabs.Lending.Logic.Types.Wallet
                                                                 (case x of
                                                                  { Mlabs.Lending.Logic.Types.Wallet ds3 [Occ=Once]
                                                                                                     ds4 [Occ=Once]
                                                                                                     _ [Occ=Dead]
                                                                                                     ds6 [Occ=Once] ->
                                                                  Mlabs.Lending.Logic.Types.$WWallet
                                                                    ds3 ds4 newBor ds6
                                                                  }))
                                                      })
                                                     (GHC.Base.>>
                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        $dMonad6
                                                        @ ()
                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                        (Mlabs.Lending.Logic.State.modifyReserveWallet'
                                                           ds1
                                                           (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                              ni ds))
                                                        (GHC.Base.>>
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonad6
                                                           @ ()
                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                           (Mlabs.Lending.Logic.State.modifyReserve'
                                                              ds1
                                                              (\ (x [Occ=Once]
                                                                    :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                                 Data.Either.Right
                                                                   @ Mlabs.Lending.Logic.State.Error
                                                                   @ Mlabs.Lending.Logic.Types.Reserve
                                                                   (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                      t x)))
                                                           (let {
                                                              a1 [Occ=OnceL]
                                                                :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                              [LclId]
                                                              a1
                                                                = PlutusTx.Builtins.Internal.subtractInteger
                                                                    PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                    ds } in
                                                            let {
                                                              a2 [Occ=OnceL]
                                                                :: Mlabs.Emulator.Blockchain.Resp
                                                              [LclId]
                                                              a2
                                                                = Mlabs.Emulator.Blockchain.Move
                                                                    uid ds1 a1 } in
                                                            let {
                                                              a3 [Occ=OnceL]
                                                                :: Mlabs.Emulator.Blockchain.Resp
                                                              [LclId]
                                                              a3
                                                                = Mlabs.Emulator.Blockchain.Move
                                                                    Mlabs.Emulator.Types.Self ds1 ds } in
                                                            let {
                                                              a4 [Occ=OnceL]
                                                                :: [Mlabs.Emulator.Blockchain.Resp]
                                                              [LclId]
                                                              a4
                                                                = GHC.Types.:
                                                                    @ Mlabs.Emulator.Blockchain.Resp
                                                                    a3
                                                                    (GHC.Types.[]
                                                                       @ Mlabs.Emulator.Blockchain.Resp) } in
                                                            let {
                                                              a5 [Occ=OnceL]
                                                                :: [Mlabs.Emulator.Blockchain.Resp]
                                                              [LclId]
                                                              a5
                                                                = GHC.Types.:
                                                                    @ Mlabs.Emulator.Blockchain.Resp
                                                                    a2
                                                                    a4 } in
                                                            (\ (st1 [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                               Data.Either.Right
                                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                    Mlabs.Lending.Logic.Types.LendingPool)
                                                                 (a5, st1))
                                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                             <Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                             <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                                          -> Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                                               ([Mlabs.Emulator.Blockchain.Resp],
                                                                                Mlabs.Lending.Logic.Types.LendingPool))
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                                            (Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                            [Mlabs.Emulator.Blockchain.Resp])))))));
                                       Mlabs.Lending.Logic.Types.SwapBorrowRateModelAct _ [Occ=Dead]
                                                                                        _ [Occ=Dead] ->
                                         GHC.Base.return
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                       Mlabs.Lending.Logic.Types.AddCollateralAct ds ds1 ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         case PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                                GHC.Types.True
                                                GHC.Types.False
                                         of {
                                           GHC.Types.False ->
                                             GHC.Base.>>=
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ PlutusTx.Ratio.Rational
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (let {
                                                  ds2 [Occ=OnceL]
                                                    :: Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         Mlabs.Lending.Logic.Types.Reserve
                                                  [LclId]
                                                  ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                                (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                   case (ds2
                                                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                     <Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                     <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                 :: GHC.Types.Coercible
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                                         (Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                         Mlabs.Lending.Logic.Types.Reserve)
                                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                                       -> Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                                            (Mlabs.Lending.Logic.Types.Reserve,
                                                                             Mlabs.Lending.Logic.Types.LendingPool))))
                                                          x
                                                   of {
                                                     Data.Either.Left c1 [Occ=Once] ->
                                                       Data.Either.Left
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ (PlutusTx.Ratio.Rational,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                         c1;
                                                     Data.Either.Right a1 [Occ=Once!] ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ (PlutusTx.Ratio.Rational,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                         (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                          (case v of
                                                           { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               ds8 [Occ=Once!] ->
                                                           case ds8 of
                                                           { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds12 [Occ=Once]
                                                                                                       _ [Occ=Dead] ->
                                                           ds12
                                                           }
                                                           },
                                                           st1)
                                                          })
                                                   })
                                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <PlutusTx.Ratio.Rational>_N)
                                                        :: GHC.Types.Coercible
                                                             (Mlabs.Lending.Logic.Types.LendingPool
                                                              -> Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   (PlutusTx.Ratio.Rational,
                                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                                             (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Ratio.Rational)))
                                               (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                  GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ GHC.Integer.Type.Integer
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (calcAmountFor
                                                       @ GHC.Integer.Type.Integer
                                                       PlutusTx.Ord.$fOrdInteger
                                                       Mlabs.Lending.Logic.Types.$sel:wallet'deposit:Wallet
                                                       uid
                                                       ds
                                                       ds1)
                                                    (\ (amount :: GHC.Integer.Type.Integer) ->
                                                       GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyWallet'
                                                            uid
                                                            ds
                                                            (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                               case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                      ni
                                                                      (PlutusTx.Builtins.Internal.subtractInteger
                                                                         PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                         amount)
                                                                      w
                                                               of {
                                                                 Data.Either.Left l [Occ=Once] ->
                                                                   Data.Either.Left
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     l;
                                                                 Data.Either.Right r [Occ=Once!] ->
                                                                   Data.Either.Right
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     (case r of
                                                                      { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         ds4 [Occ=Once]
                                                                                                         ds5 [Occ=Once] ->
                                                                      Mlabs.Lending.Logic.Types.$WWallet
                                                                        ds2
                                                                        (PlutusTx.Builtins.Internal.addInteger
                                                                           (case w of
                                                                            { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                               ds7 [Occ=Once]
                                                                                                               _ [Occ=Dead]
                                                                                                               _ [Occ=Dead] ->
                                                                            ds7
                                                                            })
                                                                           amount)
                                                                        ds4
                                                                        ds5
                                                                      })
                                                               }))
                                                         (GHC.Base.>>=
                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                            $dMonad6
                                                            @ Mlabs.Emulator.Types.Coin
                                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                                            (Mlabs.Lending.Logic.State.aToken ds)
                                                            (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                               let {
                                                                 a1 [Occ=OnceL]
                                                                   :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                                 [LclId]
                                                                 a1
                                                                   = PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       amount } in
                                                               let {
                                                                 a2 [Occ=OnceL]
                                                                   :: Mlabs.Emulator.Blockchain.Resp
                                                                 [LclId]
                                                                 a2
                                                                   = Mlabs.Emulator.Blockchain.Move
                                                                       uid aCoin a1 } in
                                                               let {
                                                                 a3 [Occ=OnceL]
                                                                   :: Mlabs.Emulator.Blockchain.Resp
                                                                 [LclId]
                                                                 a3
                                                                   = Mlabs.Emulator.Blockchain.Move
                                                                       Mlabs.Emulator.Types.Self
                                                                       aCoin
                                                                       amount } in
                                                               let {
                                                                 a4 [Occ=OnceL]
                                                                   :: [Mlabs.Emulator.Blockchain.Resp]
                                                                 [LclId]
                                                                 a4
                                                                   = GHC.Types.:
                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                       a3
                                                                       (GHC.Types.[]
                                                                          @ Mlabs.Emulator.Blockchain.Resp) } in
                                                               let {
                                                                 a5 [Occ=OnceL]
                                                                   :: [Mlabs.Emulator.Blockchain.Resp]
                                                                 [LclId]
                                                                 a5
                                                                   = GHC.Types.:
                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                       a2
                                                                       a4 } in
                                                               (\ (st1 [Occ=Once]
                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                  Data.Either.Right
                                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                                    (a5, st1))
                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                <Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                       :: GHC.Types.Coercible
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  ([Mlabs.Emulator.Blockchain.Resp],
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               [Mlabs.Emulator.Blockchain.Resp]))))));
                                           GHC.Types.True ->
                                             (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             [Mlabs.Emulator.Blockchain.Resp]))
                                         };
                                       Mlabs.Lending.Logic.Types.RemoveCollateralAct ds ds1 ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         case PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.lessThanEqualsInteger ds1 0)
                                                GHC.Types.True
                                                GHC.Types.False
                                         of {
                                           GHC.Types.False ->
                                             GHC.Base.>>=
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ PlutusTx.Ratio.Rational
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (let {
                                                  ds2 [Occ=OnceL]
                                                    :: Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         Mlabs.Lending.Logic.Types.Reserve
                                                  [LclId]
                                                  ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                                (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                   case (ds2
                                                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                     <Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                     <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                 :: GHC.Types.Coercible
                                                                      (Control.Monad.Trans.State.Strict.StateT
                                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                                         (Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                         Mlabs.Lending.Logic.Types.Reserve)
                                                                      (Mlabs.Lending.Logic.Types.LendingPool
                                                                       -> Data.Either.Either
                                                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                                                            (Mlabs.Lending.Logic.Types.Reserve,
                                                                             Mlabs.Lending.Logic.Types.LendingPool))))
                                                          x
                                                   of {
                                                     Data.Either.Left c1 [Occ=Once] ->
                                                       Data.Either.Left
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ (PlutusTx.Ratio.Rational,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                         c1;
                                                     Data.Either.Right a1 [Occ=Once!] ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ (PlutusTx.Ratio.Rational,
                                                            Mlabs.Lending.Logic.Types.LendingPool)
                                                         (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                          (case v of
                                                           { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               _ [Occ=Dead]
                                                                                               ds8 [Occ=Once!] ->
                                                           case ds8 of
                                                           { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       _ [Occ=Dead]
                                                                                                       ds12 [Occ=Once]
                                                                                                       _ [Occ=Dead] ->
                                                           ds12
                                                           }
                                                           },
                                                           st1)
                                                          })
                                                   })
                                                `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <PlutusTx.Ratio.Rational>_N)
                                                        :: GHC.Types.Coercible
                                                             (Mlabs.Lending.Logic.Types.LendingPool
                                                              -> Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString
                                                                   (PlutusTx.Ratio.Rational,
                                                                    Mlabs.Lending.Logic.Types.LendingPool))
                                                             (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                PlutusTx.Ratio.Rational)))
                                               (\ (ni [Occ=OnceL] :: PlutusTx.Ratio.Rational) ->
                                                  GHC.Base.>>=
                                                    @ (Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    $dMonad6
                                                    @ GHC.Integer.Type.Integer
                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                    (calcAmountFor
                                                       @ GHC.Integer.Type.Integer
                                                       PlutusTx.Ord.$fOrdInteger
                                                       Mlabs.Lending.Logic.Types.$sel:wallet'collateral:Wallet
                                                       uid
                                                       ds
                                                       ds1)
                                                    (\ (amount :: GHC.Integer.Type.Integer) ->
                                                       GHC.Base.>>
                                                         @ (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                                         $dMonad6
                                                         @ ()
                                                         @ [Mlabs.Emulator.Blockchain.Resp]
                                                         (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                            uid
                                                            ds
                                                            (\ (w :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                               case Mlabs.Lending.Logic.InterestRate.addDeposit
                                                                      ni amount w
                                                               of {
                                                                 Data.Either.Left l [Occ=Once] ->
                                                                   Data.Either.Left
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     l;
                                                                 Data.Either.Right r [Occ=Once!] ->
                                                                   Data.Either.Right
                                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                     @ Mlabs.Lending.Logic.Types.Wallet
                                                                     (case r of
                                                                      { Mlabs.Lending.Logic.Types.Wallet ds2 [Occ=Once]
                                                                                                         _ [Occ=Dead]
                                                                                                         ds4 [Occ=Once]
                                                                                                         ds5 [Occ=Once] ->
                                                                      Mlabs.Lending.Logic.Types.$WWallet
                                                                        ds2
                                                                        (PlutusTx.Builtins.Internal.subtractInteger
                                                                           (case w of
                                                                            { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                               ds7 [Occ=Once]
                                                                                                               _ [Occ=Dead]
                                                                                                               _ [Occ=Dead] ->
                                                                            ds7
                                                                            })
                                                                           amount)
                                                                        ds4
                                                                        ds5
                                                                      })
                                                               }))
                                                         (GHC.Base.>>=
                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                            $dMonad6
                                                            @ Mlabs.Emulator.Types.Coin
                                                            @ [Mlabs.Emulator.Blockchain.Resp]
                                                            (Mlabs.Lending.Logic.State.aToken ds)
                                                            (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                               let {
                                                                 a1 [Occ=OnceL]
                                                                   :: PlutusTx.Builtins.Internal.BuiltinInteger
                                                                 [LclId]
                                                                 a1
                                                                   = PlutusTx.Builtins.Internal.subtractInteger
                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                       amount } in
                                                               let {
                                                                 a2 [Occ=OnceL]
                                                                   :: Mlabs.Emulator.Blockchain.Resp
                                                                 [LclId]
                                                                 a2
                                                                   = Mlabs.Emulator.Blockchain.Move
                                                                       Mlabs.Emulator.Types.Self
                                                                       aCoin
                                                                       a1 } in
                                                               let {
                                                                 a3 [Occ=OnceL]
                                                                   :: Mlabs.Emulator.Blockchain.Resp
                                                                 [LclId]
                                                                 a3
                                                                   = Mlabs.Emulator.Blockchain.Move
                                                                       uid aCoin amount } in
                                                               let {
                                                                 a4 [Occ=OnceL]
                                                                   :: [Mlabs.Emulator.Blockchain.Resp]
                                                                 [LclId]
                                                                 a4
                                                                   = GHC.Types.:
                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                       a3
                                                                       (GHC.Types.[]
                                                                          @ Mlabs.Emulator.Blockchain.Resp) } in
                                                               let {
                                                                 a5 [Occ=OnceL]
                                                                   :: [Mlabs.Emulator.Blockchain.Resp]
                                                                 [LclId]
                                                                 a5
                                                                   = GHC.Types.:
                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                       a2
                                                                       a4 } in
                                                               (\ (st1 [Occ=Once]
                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                  Data.Either.Right
                                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                                    (a5, st1))
                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                <Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                       :: GHC.Types.Coercible
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  ([Mlabs.Emulator.Blockchain.Resp],
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               [Mlabs.Emulator.Blockchain.Resp]))))));
                                           GHC.Types.True ->
                                             (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                Data.Either.Right
                                                  @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                  @ ([Mlabs.Emulator.Blockchain.Resp],
                                                     Mlabs.Lending.Logic.Types.LendingPool)
                                                  (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                             `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                              <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                              <Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                              <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                     :: GHC.Types.Coercible
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                 Mlabs.Lending.Logic.Types.LendingPool))
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             [Mlabs.Emulator.Blockchain.Resp]))
                                         };
                                       Mlabs.Lending.Logic.Types.WithdrawAct ds ds1 ->
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         GHC.Base.>>
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonad6
                                           @ ()
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (let {
                                              m1 [Occ=OnceL]
                                                :: Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     PlutusTx.Ratio.Rational
                                              [LclId]
                                              m1 = Mlabs.Lending.Logic.State.getCumulativeBalance uid ds } in
                                            (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                               case (m1
                                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                 <Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                 <PlutusTx.Ratio.Rational>_N
                                                             :: GHC.Types.Coercible
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     PlutusTx.Ratio.Rational)
                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                   -> Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        (PlutusTx.Ratio.Rational,
                                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                                      s1
                                               of {
                                                 Data.Either.Left l [Occ=Once] ->
                                                   Data.Either.Left
                                                     @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                     @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                     l;
                                                 Data.Either.Right r [Occ=Once!] ->
                                                   case r of { (a1, s' [Occ=Once*]) ->
                                                   let {
                                                     y :: PlutusTx.Ratio.Ratio GHC.Integer.Type.Integer
                                                     [LclId]
                                                     y = PlutusTx.Ratio.:%
                                                           @ GHC.Integer.Type.Integer
                                                           ds1
                                                           PlutusTx.Ratio.fromInteger1 } in
                                                   case PlutusTx.Ratio.$fOrdRatio1 a1 y of {
                                                     GHC.Types.False ->
                                                       case PlutusTx.Ratio.$fOrdRatio_$c<= a1 y of {
                                                         GHC.Types.False ->
                                                           Data.Either.Right
                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                             @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                             (GHC.Tuple.(), s');
                                                         GHC.Types.True ->
                                                           ((Control.Monad.Error.Class.throwError
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                                               $dMonadError3
                                                               @ ()
                                                               (GHC.Magic.noinline
                                                                  @ (GHC.Base.String
                                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                  (GHC.CString.unpackCString#
                                                                     "Not enough deposit to withdraw"#)))
                                                            `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                        <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                        <Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                        <()>_N
                                                                    :: GHC.Types.Coercible
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                                            (Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                            ())
                                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                                          -> Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                                               ((),
                                                                                Mlabs.Lending.Logic.Types.LendingPool))))
                                                             s'
                                                       };
                                                     GHC.Types.True ->
                                                       Data.Either.Right
                                                         @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                         @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                         (GHC.Tuple.(), s')
                                                   }
                                                   }
                                               })
                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                             <Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                             <()>_N)
                                                    :: GHC.Types.Coercible
                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                          -> Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                               ((), Mlabs.Lending.Logic.Types.LendingPool))
                                                         (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ())))
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ PlutusTx.Ratio.Rational
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds2 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.Reserve
                                                 [LclId]
                                                 ds2 = Mlabs.Lending.Logic.State.getReserve ds } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds2
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.Reserve>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.Reserve)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.Reserve,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (PlutusTx.Ratio.Rational,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (PlutusTx.Ratio.Rational,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.Reserve _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              _ [Occ=Dead]
                                                                                              ds8 [Occ=Once!] ->
                                                          case ds8 of
                                                          { Mlabs.Lending.Logic.Types.ReserveInterest _ [Occ=Dead]
                                                                                                      _ [Occ=Dead]
                                                                                                      _ [Occ=Dead]
                                                                                                      ds12 [Occ=Once]
                                                                                                      _ [Occ=Dead] ->
                                                          ds12
                                                          }
                                                          },
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <PlutusTx.Ratio.Rational>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (PlutusTx.Ratio.Rational,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               PlutusTx.Ratio.Rational)))
                                              (\ (ni [Occ=Once] :: PlutusTx.Ratio.Rational) ->
                                                 GHC.Base.>>
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ ()
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                      uid
                                                      ds
                                                      (Mlabs.Lending.Logic.InterestRate.addDeposit
                                                         ni
                                                         (PlutusTx.Builtins.Internal.subtractInteger
                                                            PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                            ds1)))
                                                   (GHC.Base.>>=
                                                      @ (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      $dMonad6
                                                      @ Mlabs.Emulator.Types.Coin
                                                      @ [Mlabs.Emulator.Blockchain.Resp]
                                                      (Mlabs.Lending.Logic.State.aToken ds)
                                                      (\ (aCoin :: Mlabs.Emulator.Types.Coin) ->
                                                         GHC.Base.>>
                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                           $dMonad6
                                                           @ ()
                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                           (Mlabs.Lending.Logic.State.modifyReserve'
                                                              ds
                                                              (\ (x [Occ=Once]
                                                                    :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                                 Data.Either.Right
                                                                   @ Mlabs.Lending.Logic.State.Error
                                                                   @ Mlabs.Lending.Logic.Types.Reserve
                                                                   (Mlabs.Lending.Logic.InterestRate.updateReserveInterestRates
                                                                      t x)))
                                                           (let {
                                                              a1 [Occ=OnceL]
                                                                :: [Mlabs.Emulator.Blockchain.Resp]
                                                              [LclId]
                                                              a1
                                                                = GHC.Base.foldr
                                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                                    (PlutusTx.List.++
                                                                       @ Mlabs.Emulator.Blockchain.Resp)
                                                                    (GHC.Types.[]
                                                                       @ Mlabs.Emulator.Blockchain.Resp)
                                                                    (GHC.Types.:
                                                                       @ [Mlabs.Emulator.Blockchain.Resp]
                                                                       (GHC.Types.:
                                                                          @ Mlabs.Emulator.Blockchain.Resp
                                                                          (Mlabs.Emulator.Blockchain.Move
                                                                             Mlabs.Emulator.Types.Self
                                                                             ds
                                                                             (PlutusTx.Builtins.Internal.subtractInteger
                                                                                PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                ds1))
                                                                          (GHC.Types.:
                                                                             @ Mlabs.Emulator.Blockchain.Resp
                                                                             (Mlabs.Emulator.Blockchain.Move
                                                                                uid ds ds1)
                                                                             (GHC.Types.[]
                                                                                @ Mlabs.Emulator.Blockchain.Resp)))
                                                                       (GHC.Types.:
                                                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                                                          (GHC.Types.:
                                                                             @ Mlabs.Emulator.Blockchain.Resp
                                                                             (Mlabs.Emulator.Blockchain.Move
                                                                                uid
                                                                                aCoin
                                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                                   PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                   ds1))
                                                                             (GHC.Types.:
                                                                                @ Mlabs.Emulator.Blockchain.Resp
                                                                                (Mlabs.Emulator.Blockchain.Move
                                                                                   Mlabs.Emulator.Types.Self
                                                                                   aCoin
                                                                                   ds1)
                                                                                (GHC.Types.[]
                                                                                   @ Mlabs.Emulator.Blockchain.Resp)))
                                                                          (GHC.Types.:
                                                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                                                             (GHC.Base.build
                                                                                @ Mlabs.Emulator.Blockchain.Resp
                                                                                (\ (@ a2)
                                                                                   (c [Occ=Once!, OS=OneShot]
                                                                                      :: Mlabs.Emulator.Blockchain.Resp
                                                                                         -> a2 -> a2)
                                                                                   (n [Occ=Once, OS=OneShot]
                                                                                      :: a2) ->
                                                                                   c (Mlabs.Emulator.Blockchain.Burn
                                                                                        aCoin ds1)
                                                                                     n))
                                                                             (GHC.Types.[]
                                                                                @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                            (\ (st1 [Occ=Once]
                                                                  :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                               Data.Either.Right
                                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                    Mlabs.Lending.Logic.Types.LendingPool)
                                                                 (a1, st1))
                                                            `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                             <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                             <Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                             <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (Mlabs.Lending.Logic.Types.LendingPool
                                                                          -> Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString
                                                                               ([Mlabs.Emulator.Blockchain.Resp],
                                                                                Mlabs.Lending.Logic.Types.LendingPool))
                                                                         (Control.Monad.Trans.State.Strict.StateT
                                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                                            (Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                            [Mlabs.Emulator.Blockchain.Resp])))))));
                                       Mlabs.Lending.Logic.Types.FlashLoanAct ->
                                         GHC.Base.return
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           Mlabs.Lending.Logic.React.qReact1
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp);
                                       Mlabs.Lending.Logic.Types.LiquidationCallAct ds ds1 ds2
                                                                                    ds3 [Occ=OnceL!] ->
                                         let {
                                           $dMonadError7 [Occ=OnceL]
                                             :: Control.Monad.Error.Class.MonadError
                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonadError7
                                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           $dMonadError8
                                             :: Control.Monad.Error.Class.MonadError
                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonadError8
                                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           $dMonadError9 [Occ=OnceL]
                                             :: Control.Monad.Error.Class.MonadError
                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonadError9
                                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           $dMonadError10 [Occ=OnceL]
                                             :: Control.Monad.Error.Class.MonadError
                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonadError10
                                             = Control.Monad.Error.Class.$fMonadErroreStateT
                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Control.Monad.Error.Class.$fMonadErroreEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           $dMonadState
                                             :: Control.Monad.State.Class.MonadState
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonadState
                                             = Control.Monad.State.Class.$fMonadStatesStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           $dMonad6
                                             :: GHC.Base.Monad
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                           [LclId]
                                           $dMonad6
                                             = Control.Monad.Trans.State.Strict.$fMonadStateT
                                                 @ (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 (Data.Either.$fMonadEither
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                         let {
                                           borrowUserId :: Mlabs.Emulator.Types.UserId
                                           [LclId]
                                           borrowUserId
                                             = case ds1 of
                                               { Mlabs.Lending.Logic.Types.BadBorrow ds4 [Occ=Once]
                                                                                     _ [Occ=Dead] ->
                                               ds4
                                               } } in
                                         let {
                                           borrowAsset :: Plutus.V1.Ledger.Value.AssetClass
                                           [LclId]
                                           borrowAsset
                                             = case ds1 of
                                               { Mlabs.Lending.Logic.Types.BadBorrow _ [Occ=Dead]
                                                                                     ds5 [Occ=Once] ->
                                               ds5
                                               } } in
                                         GHC.Base.>>
                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.Either
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                           $dMonad6
                                           @ ()
                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              (Control.Monad.State.Class.$p1MonadState
                                                 @ Mlabs.Lending.Logic.Types.LendingPool
                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                      (Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                 $dMonadState)
                                              @ GHC.Types.Bool
                                              @ ()
                                              (let {
                                                 ds4 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        (PlutusTx.AssocMap.Map
                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                           PlutusTx.Ratio.Rational)
                                                 [LclId]
                                                 ds4
                                                   = Control.Monad.State.Class.gets
                                                       @ Mlabs.Lending.Logic.Types.LendingPool
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       @ Mlabs.Lending.Logic.Types.HealthReport
                                                       $dMonadState
                                                       Mlabs.Lending.Logic.Types.$sel:lp'healthReport:LendingPool } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds4
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <PlutusTx.AssocMap.Map
                                                                       Mlabs.Lending.Logic.Types.BadBorrow
                                                                       PlutusTx.Ratio.Rational>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        (PlutusTx.AssocMap.Map
                                                                           Mlabs.Lending.Logic.Types.BadBorrow
                                                                           PlutusTx.Ratio.Rational))
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (PlutusTx.AssocMap.Map
                                                                              Mlabs.Lending.Logic.Types.BadBorrow
                                                                              PlutusTx.Ratio.Rational,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Types.Bool,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (GHC.Types.Bool,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once], st1 [Occ=Once]) ->
                                                         (joinrec {
                                                            go [Occ=LoopBreakerT[1]]
                                                              :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                   PlutusTx.Ratio.Rational)]
                                                                 -> GHC.Types.Bool
                                                            [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                            go (ds5 [Occ=Once!]
                                                                  :: [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                       PlutusTx.Ratio.Rational)])
                                                              = case ds5 of {
                                                                  [] -> GHC.Types.False;
                                                                  : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                                    case ds6 of
                                                                    { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                                    case Mlabs.Lending.Logic.Types.$fEqBadBorrow_$c==
                                                                           c' ds1
                                                                    of {
                                                                      GHC.Types.False -> jump go xs';
                                                                      GHC.Types.True -> GHC.Types.True
                                                                    }
                                                                    }
                                                                }; } in
                                                          jump go
                                                            (v
                                                             `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                         <Mlabs.Lending.Logic.Types.BadBorrow>_R
                                                                         <PlutusTx.Ratio.Rational>_R
                                                                     :: GHC.Types.Coercible
                                                                          (PlutusTx.AssocMap.Map
                                                                             Mlabs.Lending.Logic.Types.BadBorrow
                                                                             PlutusTx.Ratio.Rational)
                                                                          [(Mlabs.Lending.Logic.Types.BadBorrow,
                                                                            PlutusTx.Ratio.Rational)])),
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <GHC.Types.Bool>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (GHC.Types.Bool,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               GHC.Types.Bool)))
                                              (\ (isOk [Occ=Once!] :: GHC.Types.Bool) ->
                                                 case isOk of {
                                                   GHC.Types.False ->
                                                     Control.Monad.Error.Class.throwError
                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                       $dMonadError8
                                                       @ ()
                                                       (GHC.Magic.noinline
                                                          @ (GHC.Base.String
                                                             -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                          (GHC.CString.unpackCString#
                                                             "Bad borrow not present"#));
                                                   GHC.Types.True ->
                                                     (\ (st1 [Occ=Once]
                                                           :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                        Data.Either.Right
                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                          @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                          (GHC.Tuple.(), st1))
                                                     `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                      <Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                      <()>_N)
                                                             :: GHC.Types.Coercible
                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                   -> Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                        ((),
                                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     ()))
                                                 }))
                                           (GHC.Base.>>=
                                              @ (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                              $dMonad6
                                              @ (PlutusTx.AssocMap.Map
                                                   Mlabs.Emulator.Types.Coin
                                                   Mlabs.Lending.Logic.Types.Wallet)
                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                              (let {
                                                 ds4 [Occ=OnceL]
                                                   :: Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        Mlabs.Lending.Logic.Types.User
                                                 [LclId]
                                                 ds4
                                                   = Mlabs.Lending.Logic.State.getUser
                                                       (case ds1 of
                                                        { Mlabs.Lending.Logic.Types.BadBorrow ds5 [Occ=Once]
                                                                                              _ [Occ=Dead] ->
                                                        ds5
                                                        }) } in
                                               (\ (x [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                  case (ds4
                                                        `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                    <Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                    <Mlabs.Lending.Logic.Types.User>_N
                                                                :: GHC.Types.Coercible
                                                                     (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                        Mlabs.Lending.Logic.Types.User)
                                                                     (Mlabs.Lending.Logic.Types.LendingPool
                                                                      -> Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString
                                                                           (Mlabs.Lending.Logic.Types.User,
                                                                            Mlabs.Lending.Logic.Types.LendingPool))))
                                                         x
                                                  of {
                                                    Data.Either.Left c1 [Occ=Once] ->
                                                      Data.Either.Left
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Wallet,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        c1;
                                                    Data.Either.Right a1 [Occ=Once!] ->
                                                      Data.Either.Right
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Wallet,
                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                        (case a1 of { (v [Occ=Once!], st1 [Occ=Once]) ->
                                                         (case v of
                                                          { Mlabs.Lending.Logic.Types.User ds5 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                          ds5
                                                          },
                                                          st1)
                                                         })
                                                  })
                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.Coin
                                                                   Mlabs.Lending.Logic.Types.Wallet>_N)
                                                       :: GHC.Types.Coercible
                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                             -> Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                  (PlutusTx.AssocMap.Map
                                                                     Mlabs.Emulator.Types.Coin
                                                                     Mlabs.Lending.Logic.Types.Wallet,
                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                            (Control.Monad.Trans.State.Strict.StateT
                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                               (Data.Either.Either
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               (PlutusTx.AssocMap.Map
                                                                  Mlabs.Emulator.Types.Coin
                                                                  Mlabs.Lending.Logic.Types.Wallet))))
                                              (\ (wals
                                                    :: PlutusTx.AssocMap.Map
                                                         Mlabs.Emulator.Types.Coin
                                                         Mlabs.Lending.Logic.Types.Wallet) ->
                                                 GHC.Base.>>=
                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                        (Data.Either.Either
                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                   $dMonad6
                                                   @ GHC.Integer.Type.Integer
                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                   (join {
                                                      $j [Occ=OnceLT[0]]
                                                        :: Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             GHC.Integer.Type.Integer
                                                      [LclId[JoinId(0)]]
                                                      $j
                                                        = Control.Monad.Error.Class.throwError
                                                            @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                 (Data.Either.Either
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                            $dMonadError7
                                                            @ GHC.Integer.Type.Integer
                                                            (GHC.Magic.noinline
                                                               @ (GHC.Base.String
                                                                  -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                               PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                               (GHC.CString.unpackCString#
                                                                  "Wallet does not have the debt to liquidate"#)) } in
                                                    join {
                                                      $j1 [Occ=OnceL!T[1]]
                                                        :: Mlabs.Lending.Logic.Types.Wallet
                                                           -> Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                GHC.Integer.Type.Integer
                                                      [LclId[JoinId(1)], Arity=1]
                                                      $j1 (wal [Occ=Once!, OS=OneShot]
                                                             :: Mlabs.Lending.Logic.Types.Wallet)
                                                        = let {
                                                            a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                            [LclId]
                                                            a1
                                                              = case wal of
                                                                { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                   _ [Occ=Dead]
                                                                                                   ds6 [Occ=Once]
                                                                                                   _ [Occ=Dead] ->
                                                                ds6
                                                                } } in
                                                          (\ (st1 [Occ=Once]
                                                                :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                             Data.Either.Right
                                                               @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                               @ (GHC.Integer.Type.Integer,
                                                                  Mlabs.Lending.Logic.Types.LendingPool)
                                                               (a1, st1))
                                                          `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                           <Data.Either.Either
                                                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                           <GHC.Integer.Type.Integer>_N)
                                                                  :: GHC.Types.Coercible
                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                        -> Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             (GHC.Integer.Type.Integer,
                                                                              Mlabs.Lending.Logic.Types.LendingPool))
                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                          (Data.Either.Either
                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          GHC.Integer.Type.Integer)) } in
                                                    joinrec {
                                                      go [Occ=LoopBreakerT[1]]
                                                        :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                             Mlabs.Lending.Logic.Types.Wallet)]
                                                           -> Control.Monad.Trans.State.Strict.StateT
                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                (Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                GHC.Integer.Type.Integer
                                                      [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                      go (ds4 [Occ=Once!]
                                                            :: [(Plutus.V1.Ledger.Value.AssetClass,
                                                                 Mlabs.Lending.Logic.Types.Wallet)])
                                                        = case ds4 of {
                                                            [] -> jump $j;
                                                            : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                              case ds5 of { (c' [Occ=Once], i [Occ=Once]) ->
                                                              case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                     (c'
                                                                      `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                              :: GHC.Types.Coercible
                                                                                   Plutus.V1.Ledger.Value.AssetClass
                                                                                   (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                    Plutus.V1.Ledger.Value.TokenName)))
                                                                     (borrowAsset
                                                                      `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                              :: GHC.Types.Coercible
                                                                                   Plutus.V1.Ledger.Value.AssetClass
                                                                                   (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                    Plutus.V1.Ledger.Value.TokenName)))
                                                              of {
                                                                GHC.Types.False -> jump go xs';
                                                                GHC.Types.True -> jump $j1 i
                                                              }
                                                              }
                                                          }; } in
                                                    jump go
                                                      (wals
                                                       `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                   <Plutus.V1.Ledger.Value.AssetClass>_R
                                                                   <Mlabs.Lending.Logic.Types.Wallet>_R
                                                               :: GHC.Types.Coercible
                                                                    (PlutusTx.AssocMap.Map
                                                                       Plutus.V1.Ledger.Value.AssetClass
                                                                       Mlabs.Lending.Logic.Types.Wallet)
                                                                    [(Plutus.V1.Ledger.Value.AssetClass,
                                                                      Mlabs.Lending.Logic.Types.Wallet)])))
                                                   (\ (bor [Occ=OnceL] :: GHC.Integer.Type.Integer) ->
                                                      GHC.Base.>>=
                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        $dMonad6
                                                        @ GHC.Integer.Type.Integer
                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                        (join {
                                                           $j [Occ=OnceLT[0]]
                                                             :: Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                  GHC.Integer.Type.Integer
                                                           [LclId[JoinId(0)]]
                                                           $j
                                                             = Control.Monad.Error.Class.throwError
                                                                 @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 @ (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                 $dMonadError10
                                                                 @ GHC.Integer.Type.Integer
                                                                 (GHC.Magic.noinline
                                                                    @ (GHC.Base.String
                                                                       -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                    (GHC.CString.unpackCString#
                                                                       "Wallet does not have collateral for liquidation asset"#)) } in
                                                         join {
                                                           $j1 [Occ=OnceL!T[1]]
                                                             :: Mlabs.Lending.Logic.Types.Wallet
                                                                -> Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     GHC.Integer.Type.Integer
                                                           [LclId[JoinId(1)], Arity=1]
                                                           $j1 (wal [Occ=Once!, OS=OneShot]
                                                                  :: Mlabs.Lending.Logic.Types.Wallet)
                                                             = let {
                                                                 a1 [Occ=OnceL] :: GHC.Integer.Type.Integer
                                                                 [LclId]
                                                                 a1
                                                                   = case wal of
                                                                     { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                        ds5 [Occ=Once]
                                                                                                        _ [Occ=Dead]
                                                                                                        _ [Occ=Dead] ->
                                                                     ds5
                                                                     } } in
                                                               (\ (st1 [Occ=Once]
                                                                     :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                  Data.Either.Right
                                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    @ (GHC.Integer.Type.Integer,
                                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                                    (a1, st1))
                                                               `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                <Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                <GHC.Integer.Type.Integer>_N)
                                                                       :: GHC.Types.Coercible
                                                                            (Mlabs.Lending.Logic.Types.LendingPool
                                                                             -> Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                  (GHC.Integer.Type.Integer,
                                                                                   Mlabs.Lending.Logic.Types.LendingPool))
                                                                            (Control.Monad.Trans.State.Strict.StateT
                                                                               Mlabs.Lending.Logic.Types.LendingPool
                                                                               (Data.Either.Either
                                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                               GHC.Integer.Type.Integer)) } in
                                                         joinrec {
                                                           go [Occ=LoopBreakerT[1]]
                                                             :: [(Mlabs.Emulator.Types.Coin,
                                                                  Mlabs.Lending.Logic.Types.Wallet)]
                                                                -> Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                     GHC.Integer.Type.Integer
                                                           [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                           go (ds4 [Occ=Once!]
                                                                 :: [(Mlabs.Emulator.Types.Coin,
                                                                      Mlabs.Lending.Logic.Types.Wallet)])
                                                             = case ds4 of {
                                                                 [] -> jump $j;
                                                                 : ds5 [Occ=Once!] xs' [Occ=Once] ->
                                                                   case ds5 of
                                                                   { (c' [Occ=Once], i [Occ=Once]) ->
                                                                   case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                          (c'
                                                                           `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                   :: GHC.Types.Coercible
                                                                                        Plutus.V1.Ledger.Value.AssetClass
                                                                                        (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                         Plutus.V1.Ledger.Value.TokenName)))
                                                                          (ds
                                                                           `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                                   :: GHC.Types.Coercible
                                                                                        Plutus.V1.Ledger.Value.AssetClass
                                                                                        (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                         Plutus.V1.Ledger.Value.TokenName)))
                                                                   of {
                                                                     GHC.Types.False -> jump go xs';
                                                                     GHC.Types.True -> jump $j1 i
                                                                   }
                                                                   }
                                                               }; } in
                                                         jump go
                                                           (wals
                                                            `cast` (PlutusTx.AssocMap.N:Map[0]
                                                                        <Mlabs.Emulator.Types.Coin>_R
                                                                        <Mlabs.Lending.Logic.Types.Wallet>_R
                                                                    :: GHC.Types.Coercible
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.Coin
                                                                            Mlabs.Lending.Logic.Types.Wallet)
                                                                         [(Mlabs.Emulator.Types.Coin,
                                                                           Mlabs.Lending.Logic.Types.Wallet)])))
                                                        (\ (col :: GHC.Integer.Type.Integer) ->
                                                           GHC.Base.>>
                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                  (Data.Either.Either
                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                             $dMonad6
                                                             @ ()
                                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                                             (Mlabs.Control.Check.isPositive
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                (Mlabs.Control.Monad.State.$fApplicativeStateT
                                                                   @ Mlabs.Lending.Logic.Types.LendingPool)
                                                                $dMonadError8
                                                                (GHC.Magic.noinline
                                                                   @ (GHC.Base.String
                                                                      -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                   PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                   (GHC.CString.unpackCString#
                                                                      "liquidation collateral"#))
                                                                col)
                                                             (GHC.Base.>>
                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                     (Data.Either.Either
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                $dMonad6
                                                                @ ()
                                                                @ [Mlabs.Emulator.Blockchain.Resp]
                                                                (case PlutusTx.Builtins.Internal.ifThenElse
                                                                        @ GHC.Types.Bool
                                                                        (PlutusTx.Builtins.Internal.lessThanInteger
                                                                           bor
                                                                           (PlutusTx.Builtins.Internal.multiplyInteger
                                                                              2 ds2))
                                                                        GHC.Types.False
                                                                        GHC.Types.True
                                                                 of {
                                                                   GHC.Types.False ->
                                                                     Control.Monad.Error.Class.throwError
                                                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       @ (Control.Monad.Trans.State.Strict.StateT
                                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                                            (Data.Either.Either
                                                                               PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                       $dMonadError9
                                                                       @ ()
                                                                       (GHC.Magic.noinline
                                                                          @ (GHC.Base.String
                                                                             -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                          PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                                          (GHC.CString.unpackCString#
                                                                             "Can not cover more than half of the borrow"#));
                                                                   GHC.Types.True ->
                                                                     (\ (st1 [Occ=Once]
                                                                           :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                        Data.Either.Right
                                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          @ ((),
                                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                                          (GHC.Tuple.(), st1))
                                                                     `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                      <Data.Either.Either
                                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                      <()>_N)
                                                                             :: GHC.Types.Coercible
                                                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                                                   -> Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                        ((),
                                                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                                                  (Control.Monad.Trans.State.Strict.StateT
                                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                                     (Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                     ()))
                                                                 })
                                                                (GHC.Base.>>=
                                                                   @ (Control.Monad.Trans.State.Strict.StateT
                                                                        Mlabs.Lending.Logic.Types.LendingPool
                                                                        (Data.Either.Either
                                                                           PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                   $dMonad6
                                                                   @ GHC.Integer.Type.Integer
                                                                   @ [Mlabs.Emulator.Blockchain.Resp]
                                                                   (let {
                                                                      ds4 [Occ=OnceL]
                                                                        :: Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                             GHC.Integer.Type.Integer
                                                                      [LclId]
                                                                      ds4
                                                                        = GHC.Base.>>=
                                                                            @ (Control.Monad.Trans.State.Strict.StateT
                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                 (Data.Either.Either
                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                            Mlabs.Lending.Logic.State.aToken2
                                                                            @ GHC.Integer.Type.Integer
                                                                            @ GHC.Integer.Type.Integer
                                                                            (Mlabs.Lending.Logic.State.toAda
                                                                               borrowAsset ds2)
                                                                            (Mlabs.Lending.Logic.State.fromAda
                                                                               ds) } in
                                                                    (\ (x [Occ=Once]
                                                                          :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                       case (ds4
                                                                             `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                         <Data.Either.Either
                                                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                         <GHC.Integer.Type.Integer>_N
                                                                                     :: GHC.Types.Coercible
                                                                                          (Control.Monad.Trans.State.Strict.StateT
                                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                                             (Data.Either.Either
                                                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                             GHC.Integer.Type.Integer)
                                                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                                                           -> Data.Either.Either
                                                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                (GHC.Integer.Type.Integer,
                                                                                                 Mlabs.Lending.Logic.Types.LendingPool))))
                                                                              x
                                                                       of {
                                                                         Data.Either.Left c1 [Occ=Once] ->
                                                                           Data.Either.Left
                                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             @ (GHC.Integer.Type.Integer,
                                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                                             c1;
                                                                         Data.Either.Right a1 [Occ=Once!] ->
                                                                           Data.Either.Right
                                                                             @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                             @ (GHC.Integer.Type.Integer,
                                                                                Mlabs.Lending.Logic.Types.LendingPool)
                                                                             (case a1 of
                                                                              { (v [Occ=Once],
                                                                                 st1 [Occ=Once]) ->
                                                                              (PlutusTx.Ord.$fOrdInteger_$cmin
                                                                                 col v,
                                                                               st1)
                                                                              })
                                                                       })
                                                                    `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                     <Data.Either.Either
                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                     <GHC.Integer.Type.Integer>_N)
                                                                            :: GHC.Types.Coercible
                                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                                  -> Data.Either.Either
                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                       (GHC.Integer.Type.Integer,
                                                                                        Mlabs.Lending.Logic.Types.LendingPool))
                                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                                    (Data.Either.Either
                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                    GHC.Integer.Type.Integer)))
                                                                   (\ (colCovered
                                                                         :: GHC.Integer.Type.Integer) ->
                                                                      GHC.Base.>>=
                                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                             (Data.Either.Either
                                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                        $dMonad6
                                                                        @ GHC.Integer.Type.Integer
                                                                        @ [Mlabs.Emulator.Blockchain.Resp]
                                                                        (GHC.Base.>>=
                                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                (Data.Either.Either
                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                           $dMonad6
                                                                           @ PlutusTx.Ratio.Rational
                                                                           @ GHC.Integer.Type.Integer
                                                                           (Mlabs.Lending.Logic.State.getLiquidationBonus
                                                                              ds)
                                                                           (\ (rate [Occ=Once!]
                                                                                 :: PlutusTx.Ratio.Rational) ->
                                                                              Mlabs.Lending.Logic.State.toAda
                                                                                ds
                                                                                (PlutusTx.Ratio.round
                                                                                   (case rate of
                                                                                    { PlutusTx.Ratio.:% x' [Occ=Once]
                                                                                                        y' [Occ=Once] ->
                                                                                    PlutusTx.Ratio.reduce
                                                                                      (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                         colCovered x')
                                                                                      (PlutusTx.Builtins.Internal.multiplyInteger
                                                                                         PlutusTx.Ratio.fromInteger1
                                                                                         y')
                                                                                    }))))
                                                                        (\ (adaBonus
                                                                              :: GHC.Integer.Type.Integer) ->
                                                                           GHC.Base.>>=
                                                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                                                  (Data.Either.Either
                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                             $dMonad6
                                                                             @ Mlabs.Emulator.Types.Coin
                                                                             @ [Mlabs.Emulator.Blockchain.Resp]
                                                                             (Mlabs.Lending.Logic.State.aToken
                                                                                ds)
                                                                             (\ (aCollateralAsset [Occ=Once]
                                                                                   :: Mlabs.Emulator.Types.Coin) ->
                                                                                GHC.Base.>>
                                                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                                                       (Data.Either.Either
                                                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                  $dMonad6
                                                                                  @ ()
                                                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                  (GHC.Base.>>
                                                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                                          (Data.Either.Either
                                                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                     $dMonad6
                                                                                     @ ()
                                                                                     @ ()
                                                                                     (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                        borrowUserId
                                                                                        ds
                                                                                        (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                           Data.Either.Right
                                                                                             @ Mlabs.Lending.Logic.State.Error
                                                                                             @ Mlabs.Lending.Logic.Types.Wallet
                                                                                             (case x of
                                                                                              { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                                 _ [Occ=Dead]
                                                                                                                                 ds6 [Occ=Once]
                                                                                                                                 ds7 [Occ=Once] ->
                                                                                              Mlabs.Lending.Logic.Types.$WWallet
                                                                                                ds4
                                                                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                   (case x of
                                                                                                    { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                       ds9 [Occ=Once]
                                                                                                                                       _ [Occ=Dead]
                                                                                                                                       _ [Occ=Dead] ->
                                                                                                    ds9
                                                                                                    })
                                                                                                   colCovered)
                                                                                                ds6
                                                                                                ds7
                                                                                              })))
                                                                                     (GHC.Base.>>
                                                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                                                             (Data.Either.Either
                                                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                        $dMonad6
                                                                                        @ ()
                                                                                        @ ()
                                                                                        (Mlabs.Lending.Logic.State.modifyWalletAndReserve'
                                                                                           borrowUserId
                                                                                           borrowAsset
                                                                                           (\ (x :: Mlabs.Lending.Logic.Types.Wallet) ->
                                                                                              Data.Either.Right
                                                                                                @ Mlabs.Lending.Logic.State.Error
                                                                                                @ Mlabs.Lending.Logic.Types.Wallet
                                                                                                (case x of
                                                                                                 { Mlabs.Lending.Logic.Types.Wallet ds4 [Occ=Once]
                                                                                                                                    ds5 [Occ=Once]
                                                                                                                                    _ [Occ=Dead]
                                                                                                                                    ds7 [Occ=Once] ->
                                                                                                 Mlabs.Lending.Logic.Types.$WWallet
                                                                                                   ds4
                                                                                                   ds5
                                                                                                   (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                      (case x
                                                                                                       of
                                                                                                       { Mlabs.Lending.Logic.Types.Wallet _ [Occ=Dead]
                                                                                                                                          _ [Occ=Dead]
                                                                                                                                          ds10 [Occ=Once]
                                                                                                                                          _ [Occ=Dead] ->
                                                                                                       ds10
                                                                                                       })
                                                                                                      ds2)
                                                                                                   ds7
                                                                                                 })))
                                                                                        (GHC.Base.>>=
                                                                                           @ (Control.Monad.Trans.State.Strict.StateT
                                                                                                Mlabs.Lending.Logic.Types.LendingPool
                                                                                                (Data.Either.Either
                                                                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                           $dMonad4
                                                                                           @ Mlabs.Lending.Logic.Types.User
                                                                                           @ ()
                                                                                           (Mlabs.Lending.Logic.State.getUser
                                                                                              borrowUserId)
                                                                                           (\ (user [Occ=Once]
                                                                                                 :: Mlabs.Lending.Logic.Types.User) ->
                                                                                              GHC.Base.>>=
                                                                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                                                                     (Data.Either.Either
                                                                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                                                                $dMonad4
                                                                                                @ Mlabs.Lending.Logic.Types.User
                                                                                                @ ()
                                                                                                (let {
                                                                                                   ds4 [Occ=OnceL]
                                                                                                     :: Control.Monad.Trans.State.Strict.StateT
                                                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                                                          (Data.Either.Either
                                                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                          (Mlabs.Emulator.Types.UserId,
                                                                                                           Mlabs.Lending.Logic.Types.User)
                                                                                                   [LclId]
                                                                                                   ds4
                                                                                                     = updateUserHealth
                                                                                                         t
                                                                                                         (borrowUserId,
                                                                                                          user) } in
                                                                                                 (\ (x [Occ=Once]
                                                                                                       :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                                    case (ds4
                                                                                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                      <Data.Either.Either
                                                                                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                      <(Mlabs.Emulator.Types.UserId,
                                                                                                                        Mlabs.Lending.Logic.Types.User)>_N
                                                                                                                  :: GHC.Types.Coercible
                                                                                                                       (Control.Monad.Trans.State.Strict.StateT
                                                                                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                          (Data.Either.Either
                                                                                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                                          (Mlabs.Emulator.Types.UserId,
                                                                                                                           Mlabs.Lending.Logic.Types.User))
                                                                                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                        -> Data.Either.Either
                                                                                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                             ((Mlabs.Emulator.Types.UserId,
                                                                                                                               Mlabs.Lending.Logic.Types.User),
                                                                                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                                                                                           x
                                                                                                    of {
                                                                                                      Data.Either.Left c1 [Occ=Once] ->
                                                                                                        Data.Either.Left
                                                                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                          @ (Mlabs.Lending.Logic.Types.User,
                                                                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                          c1;
                                                                                                      Data.Either.Right a1 [Occ=Once!] ->
                                                                                                        Data.Either.Right
                                                                                                          @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                          @ (Mlabs.Lending.Logic.Types.User,
                                                                                                             Mlabs.Lending.Logic.Types.LendingPool)
                                                                                                          (case a1
                                                                                                           of
                                                                                                           { (v [Occ=Once!],
                                                                                                              st1 [Occ=Once]) ->
                                                                                                           (case v
                                                                                                            of
                                                                                                            { (_ [Occ=Dead],
                                                                                                               b1 [Occ=Once]) ->
                                                                                                            b1
                                                                                                            },
                                                                                                            st1)
                                                                                                           })
                                                                                                    })
                                                                                                 `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                  <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                                  <Data.Either.Either
                                                                                                                     PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                                  <Mlabs.Lending.Logic.Types.User>_N)
                                                                                                         :: GHC.Types.Coercible
                                                                                                              (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                               -> Data.Either.Either
                                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                                    (Mlabs.Lending.Logic.Types.User,
                                                                                                                     Mlabs.Lending.Logic.Types.LendingPool))
                                                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                                                                                 (Data.Either.Either
                                                                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                                 Mlabs.Lending.Logic.Types.User)))
                                                                                                (\ (newUser [Occ=OnceL]
                                                                                                      :: Mlabs.Lending.Logic.Types.User) ->
                                                                                                   Mlabs.Lending.Logic.State.modifyUser'
                                                                                                     borrowUserId
                                                                                                     (\ _ [Occ=Dead] ->
                                                                                                        Data.Either.Right
                                                                                                          @ Mlabs.Lending.Logic.State.Error
                                                                                                          @ Mlabs.Lending.Logic.Types.User
                                                                                                          newUser))))))
                                                                                  (let {
                                                                                     a1 [Occ=OnceL]
                                                                                       :: [Mlabs.Emulator.Blockchain.Resp]
                                                                                     [LclId]
                                                                                     a1
                                                                                       = GHC.Base.foldr
                                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                           @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                           (PlutusTx.List.++
                                                                                              @ Mlabs.Emulator.Blockchain.Resp)
                                                                                           (GHC.Types.[]
                                                                                              @ Mlabs.Emulator.Blockchain.Resp)
                                                                                           (GHC.Types.:
                                                                                              @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                              (GHC.Types.:
                                                                                                 @ Mlabs.Emulator.Blockchain.Resp
                                                                                                 (Mlabs.Emulator.Blockchain.Move
                                                                                                    uid
                                                                                                    borrowAsset
                                                                                                    (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                       PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                       ds2))
                                                                                                 (GHC.Types.:
                                                                                                    @ Mlabs.Emulator.Blockchain.Resp
                                                                                                    (Mlabs.Emulator.Blockchain.Move
                                                                                                       Mlabs.Emulator.Types.Self
                                                                                                       borrowAsset
                                                                                                       ds2)
                                                                                                    (GHC.Types.[]
                                                                                                       @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                              (GHC.Types.:
                                                                                                 @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                                 (let {
                                                                                                    coin
                                                                                                      :: Mlabs.Emulator.Types.Coin
                                                                                                    [LclId]
                                                                                                    coin
                                                                                                      = case ds3
                                                                                                        of {
                                                                                                          GHC.Types.False ->
                                                                                                            ds;
                                                                                                          GHC.Types.True ->
                                                                                                            aCollateralAsset
                                                                                                        } } in
                                                                                                  GHC.Types.:
                                                                                                    @ Mlabs.Emulator.Blockchain.Resp
                                                                                                    (Mlabs.Emulator.Blockchain.Move
                                                                                                       Mlabs.Emulator.Types.Self
                                                                                                       coin
                                                                                                       (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                          PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                          colCovered))
                                                                                                    (GHC.Types.:
                                                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                                                       (Mlabs.Emulator.Blockchain.Move
                                                                                                          uid
                                                                                                          coin
                                                                                                          colCovered)
                                                                                                       (GHC.Types.[]
                                                                                                          @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                                 (GHC.Types.:
                                                                                                    @ [Mlabs.Emulator.Blockchain.Resp]
                                                                                                    (GHC.Types.:
                                                                                                       @ Mlabs.Emulator.Blockchain.Resp
                                                                                                       (Mlabs.Emulator.Blockchain.Move
                                                                                                          Mlabs.Emulator.Types.Self
                                                                                                          Mlabs.Emulator.Types.adaCoin
                                                                                                          (PlutusTx.Builtins.Internal.subtractInteger
                                                                                                             PlutusTx.Numeric.$fAdditiveMonoidInteger_$czero
                                                                                                             adaBonus))
                                                                                                       (GHC.Types.:
                                                                                                          @ Mlabs.Emulator.Blockchain.Resp
                                                                                                          (Mlabs.Emulator.Blockchain.Move
                                                                                                             uid
                                                                                                             Mlabs.Emulator.Types.adaCoin
                                                                                                             adaBonus)
                                                                                                          (GHC.Types.[]
                                                                                                             @ Mlabs.Emulator.Blockchain.Resp)))
                                                                                                    (GHC.Types.[]
                                                                                                       @ [Mlabs.Emulator.Blockchain.Resp])))) } in
                                                                                   (\ (st1 [Occ=Once]
                                                                                         :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                                                      Data.Either.Right
                                                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                        @ ([Mlabs.Emulator.Blockchain.Resp],
                                                                                           Mlabs.Lending.Logic.Types.LendingPool)
                                                                                        (a1, st1))
                                                                                   `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                    <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                                                    <Data.Either.Either
                                                                                                       PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                                                    <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                                                           :: GHC.Types.Coercible
                                                                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                                                                 -> Data.Either.Either
                                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                                                                       Mlabs.Lending.Logic.Types.LendingPool))
                                                                                                (Control.Monad.Trans.State.Strict.StateT
                                                                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                                                                   (Data.Either.Either
                                                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                                                   [Mlabs.Emulator.Blockchain.Resp]))))))))))))
                                     });
                                Mlabs.Lending.Logic.Types.PriceAct t uid [Occ=Once]
                                                                   act [Occ=Once!] ->
                                  withHealthCheck
                                    t
                                    (let {
                                       m1 [Occ=OnceL]
                                         :: Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                              ()
                                       [LclId]
                                       m1 = Mlabs.Lending.Logic.State.isTrustedOracle uid } in
                                     let {
                                       k [Occ=OnceL]
                                         :: Control.Monad.Trans.State.Strict.StateT
                                              Mlabs.Lending.Logic.Types.LendingPool
                                              (Data.Either.Either
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                              [Mlabs.Emulator.Blockchain.Resp]
                                       [LclId]
                                       k = case act of
                                           { Mlabs.Lending.Logic.Types.SetAssetPriceAct coin [Occ=Once]
                                                                                        rate [Occ=OnceL] ->
                                           let {
                                             m2 [Occ=OnceL]
                                               :: Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    ()
                                             [LclId]
                                             m2
                                               = Mlabs.Lending.Logic.State.modifyReserve'
                                                   coin
                                                   (\ (x [Occ=Once!] :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                      Data.Either.Right
                                                        @ Mlabs.Lending.Logic.State.Error
                                                        @ Mlabs.Lending.Logic.Types.Reserve
                                                        (case x of
                                                         { Mlabs.Lending.Logic.Types.Reserve ds [Occ=Once]
                                                                                             _ [Occ=Dead]
                                                                                             ds2 [Occ=Once]
                                                                                             ds3 [Occ=Once]
                                                                                             ds4 [Occ=Once]
                                                                                             ds5 [Occ=Once] ->
                                                         Mlabs.Lending.Logic.Types.$WReserve
                                                           ds
                                                           (Mlabs.Lending.Logic.Types.$WCoinRate rate t)
                                                           ds2
                                                           ds3
                                                           ds4
                                                           ds5
                                                         })) } in
                                           (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                              case (m2
                                                    `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                <Data.Either.Either
                                                                   PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                <()>_N
                                                            :: GHC.Types.Coercible
                                                                 (Control.Monad.Trans.State.Strict.StateT
                                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                                    (Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                    ())
                                                                 (Mlabs.Lending.Logic.Types.LendingPool
                                                                  -> Data.Either.Either
                                                                       PlutusTx.Builtins.Internal.BuiltinByteString
                                                                       ((),
                                                                        Mlabs.Lending.Logic.Types.LendingPool))))
                                                     s1
                                              of {
                                                Data.Either.Left l [Occ=Once] ->
                                                  Data.Either.Left
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                    @ ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                    l;
                                                Data.Either.Right r [Occ=Once!] ->
                                                  case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                                  Data.Either.Right
                                                    @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                    @ ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool)
                                                    (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, s')
                                                  }
                                              })
                                           `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                            <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                            <Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                            <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                                   :: GHC.Types.Coercible
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ([Mlabs.Emulator.Blockchain.Resp],
                                                               Mlabs.Lending.Logic.Types.LendingPool))
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           [Mlabs.Emulator.Blockchain.Resp]))
                                           } } in
                                     (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                        case (m1
                                              `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                          <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                          <Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                          <()>_N
                                                      :: GHC.Types.Coercible
                                                           (Control.Monad.Trans.State.Strict.StateT
                                                              Mlabs.Lending.Logic.Types.LendingPool
                                                              (Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString)
                                                              ())
                                                           (Mlabs.Lending.Logic.Types.LendingPool
                                                            -> Data.Either.Either
                                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                                 ((),
                                                                  Mlabs.Lending.Logic.Types.LendingPool))))
                                               s1
                                        of {
                                          Data.Either.Left l [Occ=Once] ->
                                            Data.Either.Left
                                              @ PlutusTx.Builtins.Internal.BuiltinByteString
                                              @ ([Mlabs.Emulator.Blockchain.Resp],
                                                 Mlabs.Lending.Logic.Types.LendingPool)
                                              l;
                                          Data.Either.Right r [Occ=Once!] ->
                                            case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                            (k
                                             `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                         <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                         <Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                         <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                     :: GHC.Types.Coercible
                                                          (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                                             [Mlabs.Emulator.Blockchain.Resp])
                                                          (Mlabs.Lending.Logic.Types.LendingPool
                                                           -> Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                                ([Mlabs.Emulator.Blockchain.Resp],
                                                                 Mlabs.Lending.Logic.Types.LendingPool))))
                                              s'
                                            }
                                        })
                                     `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                      <Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                      <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                             :: GHC.Types.Coercible
                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                   -> Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                        ([Mlabs.Emulator.Blockchain.Resp],
                                                         Mlabs.Lending.Logic.Types.LendingPool))
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     [Mlabs.Emulator.Blockchain.Resp])));
                                Mlabs.Lending.Logic.Types.GovernAct uid [Occ=Once]
                                                                    act [Occ=Once] ->
                                  let {
                                    m1 [Occ=OnceL]
                                      :: Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                           ()
                                    [LclId]
                                    m1 = Mlabs.Lending.Logic.State.isAdmin uid } in
                                  let {
                                    k [Occ=OnceL]
                                      :: Control.Monad.Trans.State.Strict.StateT
                                           Mlabs.Lending.Logic.Types.LendingPool
                                           (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                           [Mlabs.Emulator.Blockchain.Resp]
                                    [LclId]
                                    k = let {
                                          $dMonadError7
                                            :: Control.Monad.Error.Class.MonadError
                                                 PlutusTx.Builtins.Internal.BuiltinByteString
                                                 (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                          [LclId]
                                          $dMonadError7
                                            = Control.Monad.Error.Class.$fMonadErroreStateT
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                @ Mlabs.Lending.Logic.Types.LendingPool
                                                (Control.Monad.Error.Class.$fMonadErroreEither
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                        let {
                                          $dMonadState
                                            :: Control.Monad.State.Class.MonadState
                                                 Mlabs.Lending.Logic.Types.LendingPool
                                                 (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                          [LclId]
                                          $dMonadState
                                            = Control.Monad.State.Class.$fMonadStatesStateT
                                                @ (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                @ Mlabs.Lending.Logic.Types.LendingPool
                                                (Data.Either.$fMonadEither
                                                   @ PlutusTx.Builtins.Internal.BuiltinByteString) } in
                                        let {
                                          $dMonad6
                                            :: GHC.Base.Monad
                                                 (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                          [LclId]
                                          $dMonad6
                                            = Control.Monad.Error.Class.$p1MonadError
                                                @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                @ (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString))
                                                $dMonadError7 } in
                                        let {
                                          $d~1 [Occ=OnceL]
                                            :: PlutusTx.AssocMap.Map
                                                 Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                               GHC.Types.~ PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve
                                          [LclId]
                                          $d~1
                                            = GHC.Types.Eq#
                                                @ *
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                @~ (<PlutusTx.AssocMap.Map
                                                       Mlabs.Emulator.Types.Coin
                                                       Mlabs.Lending.Logic.Types.Reserve>_N
                                                    :: PlutusTx.AssocMap.Map
                                                         Mlabs.Emulator.Types.Coin
                                                         Mlabs.Lending.Logic.Types.Reserve
                                                       ~ PlutusTx.AssocMap.Map
                                                           Mlabs.Emulator.Types.Coin
                                                           Mlabs.Lending.Logic.Types.Reserve) } in
                                        let {
                                          $d~2 [Occ=OnceL]
                                            :: PlutusTx.AssocMap.Map
                                                 Plutus.V1.Ledger.Value.TokenName Mlabs.Emulator.Types.Coin
                                               GHC.Types.~ PlutusTx.AssocMap.Map
                                                             Plutus.V1.Ledger.Value.TokenName
                                                             Mlabs.Emulator.Types.Coin
                                          [LclId]
                                          $d~2
                                            = GHC.Types.Eq#
                                                @ *
                                                @ (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     Mlabs.Emulator.Types.Coin)
                                                @ (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     Mlabs.Emulator.Types.Coin)
                                                @~ (<PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.TokenName
                                                       Mlabs.Emulator.Types.Coin>_N
                                                    :: PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.TokenName
                                                         Mlabs.Emulator.Types.Coin
                                                       ~ PlutusTx.AssocMap.Map
                                                           Plutus.V1.Ledger.Value.TokenName
                                                           Mlabs.Emulator.Types.Coin) } in
                                        let {
                                          $d~3 [Occ=OnceL]
                                            :: PlutusTx.AssocMap.Map
                                                 Mlabs.Emulator.Types.Coin Mlabs.Lending.Logic.Types.Reserve
                                               GHC.Types.~ PlutusTx.AssocMap.Map
                                                             Mlabs.Emulator.Types.Coin
                                                             Mlabs.Lending.Logic.Types.Reserve
                                          [LclId]
                                          $d~3
                                            = GHC.Types.Eq#
                                                @ *
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                @ (PlutusTx.AssocMap.Map
                                                     Mlabs.Emulator.Types.Coin
                                                     Mlabs.Lending.Logic.Types.Reserve)
                                                @~ (<PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.AssetClass
                                                       Mlabs.Lending.Logic.Types.Reserve>_N
                                                    :: PlutusTx.AssocMap.Map
                                                         Plutus.V1.Ledger.Value.AssetClass
                                                         Mlabs.Lending.Logic.Types.Reserve
                                                       ~ PlutusTx.AssocMap.Map
                                                           Plutus.V1.Ledger.Value.AssetClass
                                                           Mlabs.Lending.Logic.Types.Reserve) } in
                                        case act
                                             `cast` (Mlabs.Lending.Logic.Types.N:GovernAct[0]
                                                     :: GHC.Types.Coercible
                                                          Mlabs.Lending.Logic.Types.GovernAct
                                                          Mlabs.Lending.Logic.Types.CoinCfg)
                                        of wild1 [Occ=OnceL]
                                        { Mlabs.Lending.Logic.Types.CoinCfg ds _ [Occ=Dead] ds2 [Occ=OnceL]
                                                                            _ [Occ=Dead] _ [Occ=Dead] ->
                                        GHC.Base.>>=
                                          @ (Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                          $dMonad6
                                          @ Mlabs.Lending.Logic.Types.LendingPool
                                          @ [Mlabs.Emulator.Blockchain.Resp]
                                          (Control.Monad.State.Class.get
                                             @ Mlabs.Lending.Logic.Types.LendingPool
                                             @ (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                             $dMonadState)
                                          (\ (st :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                             GHC.Base.>>
                                               @ (Control.Monad.Trans.State.Strict.StateT
                                                    Mlabs.Lending.Logic.Types.LendingPool
                                                    (Data.Either.Either
                                                       PlutusTx.Builtins.Internal.BuiltinByteString))
                                               $dMonad6
                                               @ ()
                                               @ [Mlabs.Emulator.Blockchain.Resp]
                                               (join {
                                                  $j [Occ=OnceLT[0]]
                                                    :: Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         ()
                                                  [LclId[JoinId(0)]]
                                                  $j
                                                    = Control.Monad.Error.Class.throwError
                                                        @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                        @ (Control.Monad.Trans.State.Strict.StateT
                                                             Mlabs.Lending.Logic.Types.LendingPool
                                                             (Data.Either.Either
                                                                PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        $dMonadError7
                                                        @ ()
                                                        (GHC.Magic.noinline
                                                           @ (GHC.Base.String
                                                              -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           PlutusTx.Builtins.Class.stringToBuiltinByteString
                                                           (GHC.CString.unpackCString#
                                                              "Reserve is already present"#)) } in
                                                join {
                                                  $j1 [Occ=OnceLT[0]]
                                                    :: Control.Monad.Trans.State.Strict.StateT
                                                         Mlabs.Lending.Logic.Types.LendingPool
                                                         (Data.Either.Either
                                                            PlutusTx.Builtins.Internal.BuiltinByteString)
                                                         ()
                                                  [LclId[JoinId(0)]]
                                                  $j1
                                                    = (\ (st1 [Occ=Once]
                                                            :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                                         Data.Either.Right
                                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                                           @ ((), Mlabs.Lending.Logic.Types.LendingPool)
                                                           (GHC.Tuple.(), st1))
                                                      `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                                       <Data.Either.Either
                                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                                       <()>_N)
                                                              :: GHC.Types.Coercible
                                                                   (Mlabs.Lending.Logic.Types.LendingPool
                                                                    -> Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                                                         ((),
                                                                          Mlabs.Lending.Logic.Types.LendingPool))
                                                                   (Control.Monad.Trans.State.Strict.StateT
                                                                      Mlabs.Lending.Logic.Types.LendingPool
                                                                      (Data.Either.Either
                                                                         PlutusTx.Builtins.Internal.BuiltinByteString)
                                                                      ())) } in
                                                joinrec {
                                                  go [Occ=LoopBreakerT[1]]
                                                    :: [(Mlabs.Emulator.Types.Coin,
                                                         Mlabs.Lending.Logic.Types.Reserve)]
                                                       -> Control.Monad.Trans.State.Strict.StateT
                                                            Mlabs.Lending.Logic.Types.LendingPool
                                                            (Data.Either.Either
                                                               PlutusTx.Builtins.Internal.BuiltinByteString)
                                                            ()
                                                  [LclId[JoinId(1)], Arity=1, Str=<L,U>]
                                                  go (ds5 [Occ=Once!]
                                                        :: [(Mlabs.Emulator.Types.Coin,
                                                             Mlabs.Lending.Logic.Types.Reserve)])
                                                    = case ds5 of {
                                                        [] -> jump $j;
                                                        : ds6 [Occ=Once!] xs' [Occ=Once] ->
                                                          case ds6 of { (c' [Occ=Once], _ [Occ=Dead]) ->
                                                          case Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                                 (c'
                                                                  `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                          :: GHC.Types.Coercible
                                                                               Plutus.V1.Ledger.Value.AssetClass
                                                                               (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                Plutus.V1.Ledger.Value.TokenName)))
                                                                 (ds
                                                                  `cast` (Plutus.V1.Ledger.Value.N:AssetClass[0]
                                                                          :: GHC.Types.Coercible
                                                                               Plutus.V1.Ledger.Value.AssetClass
                                                                               (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                                Plutus.V1.Ledger.Value.TokenName)))
                                                          of {
                                                            GHC.Types.False -> jump go xs';
                                                            GHC.Types.True -> jump $j1
                                                          }
                                                          }
                                                      }; } in
                                                jump go
                                                  (case GHC.Types.eq_sel
                                                          @ *
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.Coin
                                                               Mlabs.Lending.Logic.Types.Reserve)
                                                          @ (PlutusTx.AssocMap.Map
                                                               Mlabs.Emulator.Types.Coin
                                                               Mlabs.Lending.Logic.Types.Reserve)
                                                          $d~3
                                                   of co
                                                   { __DEFAULT ->
                                                   case st of
                                                   { Mlabs.Lending.Logic.Types.LendingPool ds5 [Occ=Once]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead]
                                                                                           _ [Occ=Dead] ->
                                                   ds5
                                                   `cast` (PlutusTx.AssocMap.N:Map[0]
                                                               <Mlabs.Emulator.Types.Coin>_R
                                                               <Mlabs.Lending.Logic.Types.Reserve>_R
                                                           :: GHC.Types.Coercible
                                                                (PlutusTx.AssocMap.Map
                                                                   Mlabs.Emulator.Types.Coin
                                                                   Mlabs.Lending.Logic.Types.Reserve)
                                                                [(Mlabs.Emulator.Types.Coin,
                                                                  Mlabs.Lending.Logic.Types.Reserve)])
                                                   }
                                                   }))
                                               (GHC.Base.>>
                                                  @ (Control.Monad.Trans.State.Strict.StateT
                                                       Mlabs.Lending.Logic.Types.LendingPool
                                                       (Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString))
                                                  $dMonad6
                                                  @ ()
                                                  @ [Mlabs.Emulator.Blockchain.Resp]
                                                  (Control.Monad.State.Class.put
                                                     @ Mlabs.Lending.Logic.Types.LendingPool
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonadState
                                                     (case st of
                                                      { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                              ds6 [Occ=Once]
                                                                                              ds7 [Occ=Once]
                                                                                              _ [Occ=Dead]
                                                                                              ds9 [Occ=Once]
                                                                                              ds10 [Occ=Once]
                                                                                              ds11 [Occ=Once] ->
                                                      Mlabs.Lending.Logic.Types.$WLendingPool
                                                        (PlutusTx.AssocMap.unionWith
                                                           @ Mlabs.Emulator.Types.Coin
                                                           @ Mlabs.Lending.Logic.Types.Reserve
                                                           (Plutus.V1.Ledger.Value.$fEqAssetClass3
                                                            `cast` ((Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                     ->_R Sym (Plutus.V1.Ledger.Value.N:AssetClass[0])
                                                                     ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                         <Plutus.V1.Ledger.Value.AssetClass>_N)
                                                                    :: GHC.Types.Coercible
                                                                         ((Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                           Plutus.V1.Ledger.Value.TokenName)
                                                                          -> (Plutus.V1.Ledger.Value.CurrencySymbol,
                                                                              Plutus.V1.Ledger.Value.TokenName)
                                                                          -> GHC.Types.Bool)
                                                                         (PlutusTx.Eq.Eq
                                                                            Plutus.V1.Ledger.Value.AssetClass)))
                                                           (\ _ [Occ=Dead]
                                                              (b [Occ=Once]
                                                                 :: Mlabs.Lending.Logic.Types.Reserve) ->
                                                              b)
                                                           (case GHC.Types.eq_sel
                                                                   @ *
                                                                   @ (PlutusTx.AssocMap.Map
                                                                        Mlabs.Emulator.Types.Coin
                                                                        Mlabs.Lending.Logic.Types.Reserve)
                                                                   @ (PlutusTx.AssocMap.Map
                                                                        Mlabs.Emulator.Types.Coin
                                                                        Mlabs.Lending.Logic.Types.Reserve)
                                                                   $d~1
                                                            of co
                                                            { __DEFAULT ->
                                                            case st of
                                                            { Mlabs.Lending.Logic.Types.LendingPool ds12 [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                            ds12
                                                            }
                                                            })
                                                           ((GHC.Base.build
                                                               @ (Mlabs.Emulator.Types.Coin,
                                                                  Mlabs.Lending.Logic.Types.Reserve)
                                                               (\ (@ a)
                                                                  (c [Occ=Once!, OS=OneShot]
                                                                     :: (Mlabs.Emulator.Types.Coin,
                                                                         Mlabs.Lending.Logic.Types.Reserve)
                                                                        -> a -> a)
                                                                  (n [Occ=Once, OS=OneShot] :: a) ->
                                                                  c (ds,
                                                                     Mlabs.Lending.Logic.Types.initReserve
                                                                       wild1)
                                                                    n))
                                                            `cast` (Sym (PlutusTx.AssocMap.N:Map[0]
                                                                             <Mlabs.Emulator.Types.Coin>_R
                                                                             <Mlabs.Lending.Logic.Types.Reserve>_R)
                                                                    :: GHC.Types.Coercible
                                                                         [(Mlabs.Emulator.Types.Coin,
                                                                           Mlabs.Lending.Logic.Types.Reserve)]
                                                                         (PlutusTx.AssocMap.Map
                                                                            Mlabs.Emulator.Types.Coin
                                                                            Mlabs.Lending.Logic.Types.Reserve))))
                                                        ds6
                                                        ds7
                                                        (PlutusTx.AssocMap.insert
                                                           @ Plutus.V1.Ledger.Value.TokenName
                                                           @ Mlabs.Emulator.Types.Coin
                                                           (PlutusTx.Builtins.equalsByteString
                                                            `cast` ((Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                     ->_R Sym (Plutus.V1.Ledger.Value.N:TokenName[0])
                                                                     ->_R <GHC.Types.Bool>_R) ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                                         <Plutus.V1.Ledger.Value.TokenName>_N)
                                                                    :: GHC.Types.Coercible
                                                                         (PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          -> PlutusTx.Builtins.Internal.BuiltinByteString
                                                                          -> GHC.Types.Bool)
                                                                         (PlutusTx.Eq.Eq
                                                                            Plutus.V1.Ledger.Value.TokenName)))
                                                           ds2
                                                           ds
                                                           (case GHC.Types.eq_sel
                                                                   @ *
                                                                   @ (PlutusTx.AssocMap.Map
                                                                        Plutus.V1.Ledger.Value.TokenName
                                                                        Mlabs.Emulator.Types.Coin)
                                                                   @ (PlutusTx.AssocMap.Map
                                                                        Plutus.V1.Ledger.Value.TokenName
                                                                        Mlabs.Emulator.Types.Coin)
                                                                   $d~2
                                                            of co
                                                            { __DEFAULT ->
                                                            case st of
                                                            { Mlabs.Lending.Logic.Types.LendingPool _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    ds15 [Occ=Once]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead]
                                                                                                    _ [Occ=Dead] ->
                                                            ds15
                                                            }
                                                            }))
                                                        ds9
                                                        ds10
                                                        ds11
                                                      }))
                                                  (GHC.Base.return
                                                     @ (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString))
                                                     $dMonad6
                                                     @ [Mlabs.Emulator.Blockchain.Resp]
                                                     (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp))))
                                        } } in
                                  (\ (s1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                     case (m1
                                           `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                       <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                       <Data.Either.Either
                                                          PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                       <()>_N
                                                   :: GHC.Types.Coercible
                                                        (Control.Monad.Trans.State.Strict.StateT
                                                           Mlabs.Lending.Logic.Types.LendingPool
                                                           (Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)
                                                           ())
                                                        (Mlabs.Lending.Logic.Types.LendingPool
                                                         -> Data.Either.Either
                                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                                              ((), Mlabs.Lending.Logic.Types.LendingPool))))
                                            s1
                                     of {
                                       Data.Either.Left l [Occ=Once] ->
                                         Data.Either.Left
                                           @ PlutusTx.Builtins.Internal.BuiltinByteString
                                           @ ([Mlabs.Emulator.Blockchain.Resp],
                                              Mlabs.Lending.Logic.Types.LendingPool)
                                           l;
                                       Data.Either.Right r [Occ=Once!] ->
                                         case r of { (_ [Occ=Dead], s' [Occ=Once]) ->
                                         (k
                                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                      <Data.Either.Either
                                                         PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                      <[Mlabs.Emulator.Blockchain.Resp]>_N
                                                  :: GHC.Types.Coercible
                                                       (Control.Monad.Trans.State.Strict.StateT
                                                          Mlabs.Lending.Logic.Types.LendingPool
                                                          (Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                                                          [Mlabs.Emulator.Blockchain.Resp])
                                                       (Mlabs.Lending.Logic.Types.LendingPool
                                                        -> Data.Either.Either
                                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                                             ([Mlabs.Emulator.Blockchain.Resp],
                                                              Mlabs.Lending.Logic.Types.LendingPool))))
                                           s'
                                         }
                                     })
                                  `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                   <Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                   <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                          :: GHC.Types.Coercible
                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                -> Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                     ([Mlabs.Emulator.Blockchain.Resp],
                                                      Mlabs.Lending.Logic.Types.LendingPool))
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  [Mlabs.Emulator.Blockchain.Resp]));
                                Mlabs.Lending.Logic.Types.QueryAct _ [Occ=Dead] _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                  (\ (st1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendingPool) ->
                                     Data.Either.Right
                                       @ PlutusTx.Builtins.Internal.BuiltinByteString
                                       @ ([Mlabs.Emulator.Blockchain.Resp],
                                          Mlabs.Lending.Logic.Types.LendingPool)
                                       (GHC.Types.[] @ Mlabs.Emulator.Blockchain.Resp, st1))
                                  `cast` (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                   <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                   <Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                   <[Mlabs.Emulator.Blockchain.Resp]>_N)
                                          :: GHC.Types.Coercible
                                               (Mlabs.Lending.Logic.Types.LendingPool
                                                -> Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString
                                                     ([Mlabs.Emulator.Blockchain.Resp],
                                                      Mlabs.Lending.Logic.Types.LendingPool))
                                               (Control.Monad.Trans.State.Strict.StateT
                                                  Mlabs.Lending.Logic.Types.LendingPool
                                                  (Data.Either.Either
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  [Mlabs.Emulator.Blockchain.Resp]))
                              })
Context: Compiling definition of: Mlabs.Lending.Logic.React.react
Context: Compiling expr: Mlabs.Lending.Logic.React.react
Context: Compiling expr: Mlabs.Lending.Logic.React.react input
Context: Compiling expr: (Mlabs.Lending.Logic.React.react input)
                         `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                     <Mlabs.Lending.Logic.Types.LendingPool>_N
                                     <Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                     <[Mlabs.Emulator.Blockchain.Resp]>_N
                                 :: GHC.Types.Coercible
                                      (Control.Monad.Trans.State.Strict.StateT
                                         Mlabs.Lending.Logic.Types.LendingPool
                                         (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                         [Mlabs.Emulator.Blockchain.Resp])
                                      (Mlabs.Lending.Logic.Types.LendingPool
                                       -> Data.Either.Either
                                            PlutusTx.Builtins.Internal.BuiltinByteString
                                            ([Mlabs.Emulator.Blockchain.Resp],
                                             Mlabs.Lending.Logic.Types.LendingPool)))
Context: Compiling expr: ((Mlabs.Lending.Logic.React.react input)
                          `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                      <Mlabs.Lending.Logic.Types.LendingPool>_N
                                      <Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                      <[Mlabs.Emulator.Blockchain.Resp]>_N
                                  :: GHC.Types.Coercible
                                       (Control.Monad.Trans.State.Strict.StateT
                                          Mlabs.Lending.Logic.Types.LendingPool
                                          (Data.Either.Either PlutusTx.Builtins.Internal.BuiltinByteString)
                                          [Mlabs.Emulator.Blockchain.Resp])
                                       (Mlabs.Lending.Logic.Types.LendingPool
                                        -> Data.Either.Either
                                             PlutusTx.Builtins.Internal.BuiltinByteString
                                             ([Mlabs.Emulator.Blockchain.Resp],
                                              Mlabs.Lending.Logic.Types.LendingPool))))
                           (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
Context: Compiling expr: case ((Mlabs.Lending.Logic.React.react input)
                               `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                           <Mlabs.Lending.Logic.Types.LendingPool>_N
                                           <Data.Either.Either
                                              PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                           <[Mlabs.Emulator.Blockchain.Resp]>_N
                                       :: GHC.Types.Coercible
                                            (Control.Monad.Trans.State.Strict.StateT
                                               Mlabs.Lending.Logic.Types.LendingPool
                                               (Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                               [Mlabs.Emulator.Blockchain.Resp])
                                            (Mlabs.Lending.Logic.Types.LendingPool
                                             -> Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString
                                                  ([Mlabs.Emulator.Blockchain.Resp],
                                                   Mlabs.Lending.Logic.Types.LendingPool))))
                                (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                         of {
                           Data.Either.Left _ [Occ=Dead] ->
                             GHC.Maybe.Nothing
                               @ (Ledger.Constraints.TxConstraints.TxConstraints
                                    Data.Void.Void Data.Void.Void,
                                  Plutus.Contract.StateMachine.OnChain.State
                                    (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool));
                           Data.Either.Right ds_dhRP [Occ=Once!] ->
                             case ds_dhRP of { (resps, newData [Occ=Once]) ->
                             GHC.Maybe.Just
                               @ (Ledger.Constraints.TxConstraints.TxConstraints
                                    Data.Void.Void Data.Void.Void,
                                  Plutus.Contract.StateMachine.OnChain.State
                                    (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool))
                               (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                  @ Data.Void.Void
                                  @ Data.Void.Void
                                  (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void)
                                     @ Mlabs.Emulator.Blockchain.Resp
                                     (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                        @ Data.Void.Void @ Data.Void.Void)
                                     Mlabs.Emulator.Blockchain.toConstraints
                                     resps)
                                  (case case input of {
                                          __DEFAULT ->
                                            GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                          Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead] ds_dhSN [Occ=Once!]
                                                                            _ [Occ=Dead] ->
                                            case ds_dhSN of {
                                              Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                GHC.Maybe.Just @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                              Mlabs.Emulator.Types.Self ->
                                                GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                            }
                                        }
                                   of {
                                     GHC.Maybe.Nothing ->
                                       Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                         @ Data.Void.Void @ Data.Void.Void;
                                     GHC.Maybe.Just a1 [Occ=Once] ->
                                       Ledger.Constraints.TxConstraints.mustBeSignedBy
                                         @ Data.Void.Void @ Data.Void.Void a1
                                   }),
                                Plutus.Contract.StateMachine.OnChain.State
                                  @ (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool)
                                  (lid, newData)
                                  (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                             }
                         }
Context: Compiling expr: case PlutusTx.Builtins.Internal.ifThenElse
                                @ GHC.Types.Bool
                                (PlutusTx.Builtins.Internal.equalsByteString
                                   (lid
                                    `cast` (Nth:2
                                                (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R <GHC.Types.Bool>_R)
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                   (y_sjK1
                                    `cast` (Nth:2
                                                (Nth:3
                                                     (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R <GHC.Types.Bool>_R))
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)))
                                GHC.Types.True
                                GHC.Types.False
                         of {
                           GHC.Types.False ->
                             GHC.Maybe.Nothing
                               @ (Ledger.Constraints.TxConstraints.TxConstraints
                                    Data.Void.Void Data.Void.Void,
                                  Plutus.Contract.StateMachine.OnChain.State
                                    (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool));
                           GHC.Types.True ->
                             case ((Mlabs.Lending.Logic.React.react input)
                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                               <Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                               <[Mlabs.Emulator.Blockchain.Resp]>_N
                                           :: GHC.Types.Coercible
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                    (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                             of {
                               Data.Either.Left _ [Occ=Dead] ->
                                 GHC.Maybe.Nothing
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool));
                               Data.Either.Right ds_dhRP [Occ=Once!] ->
                                 case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                 GHC.Maybe.Just
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool))
                                   (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                      @ Data.Void.Void
                                      @ Data.Void.Void
                                      (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                         @ (Ledger.Constraints.TxConstraints.TxConstraints
                                              Data.Void.Void Data.Void.Void)
                                         @ Mlabs.Emulator.Blockchain.Resp
                                         (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                            @ Data.Void.Void @ Data.Void.Void)
                                         Mlabs.Emulator.Blockchain.toConstraints
                                         resps)
                                      (case case input of {
                                              __DEFAULT ->
                                                GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                              Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                ds_dhSN [Occ=Once!]
                                                                                _ [Occ=Dead] ->
                                                case ds_dhSN of {
                                                  Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                    GHC.Maybe.Just @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                  Mlabs.Emulator.Types.Self ->
                                                    GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                }
                                            }
                                       of {
                                         GHC.Maybe.Nothing ->
                                           Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                             @ Data.Void.Void @ Data.Void.Void;
                                         GHC.Maybe.Just a1 [Occ=Once] ->
                                           Ledger.Constraints.TxConstraints.mustBeSignedBy
                                             @ Data.Void.Void @ Data.Void.Void a1
                                       }),
                                    Plutus.Contract.StateMachine.OnChain.State
                                      @ (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool)
                                      (lid, newData)
                                      (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                 }
                             }
                         }
Context: Compiling expr: let {
                           y_sjK1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendexId
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                    WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                           y_sjK1
                             = case ds_dhS0 of { (a1 [Occ=Once], _ [Occ=Dead]) -> a1 } } in
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @ GHC.Types.Bool
                                (PlutusTx.Builtins.Internal.equalsByteString
                                   (lid
                                    `cast` (Nth:2
                                                (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R <GHC.Types.Bool>_R)
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                   (y_sjK1
                                    `cast` (Nth:2
                                                (Nth:3
                                                     (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R <GHC.Types.Bool>_R))
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)))
                                GHC.Types.True
                                GHC.Types.False
                         of {
                           GHC.Types.False ->
                             GHC.Maybe.Nothing
                               @ (Ledger.Constraints.TxConstraints.TxConstraints
                                    Data.Void.Void Data.Void.Void,
                                  Plutus.Contract.StateMachine.OnChain.State
                                    (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool));
                           GHC.Types.True ->
                             case ((Mlabs.Lending.Logic.React.react input)
                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                               <Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                               <[Mlabs.Emulator.Blockchain.Resp]>_N
                                           :: GHC.Types.Coercible
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                    (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                             of {
                               Data.Either.Left _ [Occ=Dead] ->
                                 GHC.Maybe.Nothing
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool));
                               Data.Either.Right ds_dhRP [Occ=Once!] ->
                                 case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                 GHC.Maybe.Just
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool))
                                   (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                      @ Data.Void.Void
                                      @ Data.Void.Void
                                      (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                         @ (Ledger.Constraints.TxConstraints.TxConstraints
                                              Data.Void.Void Data.Void.Void)
                                         @ Mlabs.Emulator.Blockchain.Resp
                                         (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                            @ Data.Void.Void @ Data.Void.Void)
                                         Mlabs.Emulator.Blockchain.toConstraints
                                         resps)
                                      (case case input of {
                                              __DEFAULT ->
                                                GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                              Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                ds_dhSN [Occ=Once!]
                                                                                _ [Occ=Dead] ->
                                                case ds_dhSN of {
                                                  Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                    GHC.Maybe.Just @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                  Mlabs.Emulator.Types.Self ->
                                                    GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                }
                                            }
                                       of {
                                         GHC.Maybe.Nothing ->
                                           Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                             @ Data.Void.Void @ Data.Void.Void;
                                         GHC.Maybe.Just a1 [Occ=Once] ->
                                           Ledger.Constraints.TxConstraints.mustBeSignedBy
                                             @ Data.Void.Void @ Data.Void.Void a1
                                       }),
                                    Plutus.Contract.StateMachine.OnChain.State
                                      @ (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool)
                                      (lid, newData)
                                      (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                 }
                             }
                         }
Context: Creating alternative: Plutus.Contract.StateMachine.OnChain.State
Context: Compiling expr: case ds_dhzL of
                         { Plutus.Contract.StateMachine.OnChain.State ds_dhS0
                                                                      ds_dhS1 [Occ=Once] ->
                         let {
                           y_sjK1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendexId
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                    WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                           y_sjK1
                             = case ds_dhS0 of { (a1 [Occ=Once], _ [Occ=Dead]) -> a1 } } in
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @ GHC.Types.Bool
                                (PlutusTx.Builtins.Internal.equalsByteString
                                   (lid
                                    `cast` (Nth:2
                                                (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                 ->_R <GHC.Types.Bool>_R)
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                   (y_sjK1
                                    `cast` (Nth:2
                                                (Nth:3
                                                     (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                      ->_R <GHC.Types.Bool>_R))
                                            :: GHC.Types.Coercible
                                                 Mlabs.Lending.Logic.Types.LendexId
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)))
                                GHC.Types.True
                                GHC.Types.False
                         of {
                           GHC.Types.False ->
                             GHC.Maybe.Nothing
                               @ (Ledger.Constraints.TxConstraints.TxConstraints
                                    Data.Void.Void Data.Void.Void,
                                  Plutus.Contract.StateMachine.OnChain.State
                                    (Mlabs.Lending.Logic.Types.LendexId,
                                     Mlabs.Lending.Logic.Types.LendingPool));
                           GHC.Types.True ->
                             case ((Mlabs.Lending.Logic.React.react input)
                                   `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                               <Mlabs.Lending.Logic.Types.LendingPool>_N
                                               <Data.Either.Either
                                                  PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                               <[Mlabs.Emulator.Blockchain.Resp]>_N
                                           :: GHC.Types.Coercible
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Mlabs.Lending.Logic.Types.LendingPool
                                                   (Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   [Mlabs.Emulator.Blockchain.Resp])
                                                (Mlabs.Lending.Logic.Types.LendingPool
                                                 -> Data.Either.Either
                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                      ([Mlabs.Emulator.Blockchain.Resp],
                                                       Mlabs.Lending.Logic.Types.LendingPool))))
                                    (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                             of {
                               Data.Either.Left _ [Occ=Dead] ->
                                 GHC.Maybe.Nothing
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool));
                               Data.Either.Right ds_dhRP [Occ=Once!] ->
                                 case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                 GHC.Maybe.Just
                                   @ (Ledger.Constraints.TxConstraints.TxConstraints
                                        Data.Void.Void Data.Void.Void,
                                      Plutus.Contract.StateMachine.OnChain.State
                                        (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool))
                                   (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                      @ Data.Void.Void
                                      @ Data.Void.Void
                                      (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                         @ (Ledger.Constraints.TxConstraints.TxConstraints
                                              Data.Void.Void Data.Void.Void)
                                         @ Mlabs.Emulator.Blockchain.Resp
                                         (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                            @ Data.Void.Void @ Data.Void.Void)
                                         Mlabs.Emulator.Blockchain.toConstraints
                                         resps)
                                      (case case input of {
                                              __DEFAULT ->
                                                GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                              Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                ds_dhSN [Occ=Once!]
                                                                                _ [Occ=Dead] ->
                                                case ds_dhSN of {
                                                  Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                    GHC.Maybe.Just @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                  Mlabs.Emulator.Types.Self ->
                                                    GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                }
                                            }
                                       of {
                                         GHC.Maybe.Nothing ->
                                           Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                             @ Data.Void.Void @ Data.Void.Void;
                                         GHC.Maybe.Just a1 [Occ=Once] ->
                                           Ledger.Constraints.TxConstraints.mustBeSignedBy
                                             @ Data.Void.Void @ Data.Void.Void a1
                                       }),
                                    Plutus.Contract.StateMachine.OnChain.State
                                      @ (Mlabs.Lending.Logic.Types.LendexId,
                                         Mlabs.Lending.Logic.Types.LendingPool)
                                      (lid, newData)
                                      (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                 }
                             }
                         }
                         }
Context: Compiling expr: \ (input :: Mlabs.Lending.Logic.Types.Act) ->
                           case ds_dhzL of
                           { Plutus.Contract.StateMachine.OnChain.State ds_dhS0
                                                                        ds_dhS1 [Occ=Once] ->
                           let {
                             y_sjK1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendexId
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             y_sjK1
                               = case ds_dhS0 of { (a1 [Occ=Once], _ [Occ=Dead]) -> a1 } } in
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @ GHC.Types.Bool
                                  (PlutusTx.Builtins.Internal.equalsByteString
                                     (lid
                                      `cast` (Nth:2
                                                  (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R <GHC.Types.Bool>_R)
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                     (y_sjK1
                                      `cast` (Nth:2
                                                  (Nth:3
                                                       (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R <GHC.Types.Bool>_R))
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)))
                                  GHC.Types.True
                                  GHC.Types.False
                           of {
                             GHC.Types.False ->
                               GHC.Maybe.Nothing
                                 @ (Ledger.Constraints.TxConstraints.TxConstraints
                                      Data.Void.Void Data.Void.Void,
                                    Plutus.Contract.StateMachine.OnChain.State
                                      (Mlabs.Lending.Logic.Types.LendexId,
                                       Mlabs.Lending.Logic.Types.LendingPool));
                             GHC.Types.True ->
                               case ((Mlabs.Lending.Logic.React.react input)
                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N
                                             :: GHC.Types.Coercible
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     [Mlabs.Emulator.Blockchain.Resp])
                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                   -> Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                        ([Mlabs.Emulator.Blockchain.Resp],
                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                      (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                               of {
                                 Data.Either.Left _ [Occ=Dead] ->
                                   GHC.Maybe.Nothing
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool));
                                 Data.Either.Right ds_dhRP [Occ=Once!] ->
                                   case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                   GHC.Maybe.Just
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool))
                                     (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                        @ Data.Void.Void
                                        @ Data.Void.Void
                                        (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                           @ (Ledger.Constraints.TxConstraints.TxConstraints
                                                Data.Void.Void Data.Void.Void)
                                           @ Mlabs.Emulator.Blockchain.Resp
                                           (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                              @ Data.Void.Void @ Data.Void.Void)
                                           Mlabs.Emulator.Blockchain.toConstraints
                                           resps)
                                        (case case input of {
                                                __DEFAULT ->
                                                  GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                                Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                  ds_dhSN [Occ=Once!]
                                                                                  _ [Occ=Dead] ->
                                                  case ds_dhSN of {
                                                    Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                      GHC.Maybe.Just
                                                        @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                    Mlabs.Emulator.Types.Self ->
                                                      GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                  }
                                              }
                                         of {
                                           GHC.Maybe.Nothing ->
                                             Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                               @ Data.Void.Void @ Data.Void.Void;
                                           GHC.Maybe.Just a1 [Occ=Once] ->
                                             Ledger.Constraints.TxConstraints.mustBeSignedBy
                                               @ Data.Void.Void @ Data.Void.Void a1
                                         }),
                                      Plutus.Contract.StateMachine.OnChain.State
                                        @ (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool)
                                        (lid, newData)
                                        (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                   }
                               }
                           }
                           }
Context: Compiling expr: \ (ds_dhzL [Occ=Once!]
                              :: Plutus.Contract.StateMachine.OnChain.State
                                   (Mlabs.Lending.Logic.Types.LendexId,
                                    Mlabs.Lending.Logic.Types.LendingPool))
                           (input :: Mlabs.Lending.Logic.Types.Act) ->
                           case ds_dhzL of
                           { Plutus.Contract.StateMachine.OnChain.State ds_dhS0
                                                                        ds_dhS1 [Occ=Once] ->
                           let {
                             y_sjK1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendexId
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             y_sjK1
                               = case ds_dhS0 of { (a1 [Occ=Once], _ [Occ=Dead]) -> a1 } } in
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @ GHC.Types.Bool
                                  (PlutusTx.Builtins.Internal.equalsByteString
                                     (lid
                                      `cast` (Nth:2
                                                  (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R <GHC.Types.Bool>_R)
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                     (y_sjK1
                                      `cast` (Nth:2
                                                  (Nth:3
                                                       (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R <GHC.Types.Bool>_R))
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)))
                                  GHC.Types.True
                                  GHC.Types.False
                           of {
                             GHC.Types.False ->
                               GHC.Maybe.Nothing
                                 @ (Ledger.Constraints.TxConstraints.TxConstraints
                                      Data.Void.Void Data.Void.Void,
                                    Plutus.Contract.StateMachine.OnChain.State
                                      (Mlabs.Lending.Logic.Types.LendexId,
                                       Mlabs.Lending.Logic.Types.LendingPool));
                             GHC.Types.True ->
                               case ((Mlabs.Lending.Logic.React.react input)
                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N
                                             :: GHC.Types.Coercible
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     [Mlabs.Emulator.Blockchain.Resp])
                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                   -> Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                        ([Mlabs.Emulator.Blockchain.Resp],
                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                      (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                               of {
                                 Data.Either.Left _ [Occ=Dead] ->
                                   GHC.Maybe.Nothing
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool));
                                 Data.Either.Right ds_dhRP [Occ=Once!] ->
                                   case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                   GHC.Maybe.Just
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool))
                                     (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                        @ Data.Void.Void
                                        @ Data.Void.Void
                                        (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                           @ (Ledger.Constraints.TxConstraints.TxConstraints
                                                Data.Void.Void Data.Void.Void)
                                           @ Mlabs.Emulator.Blockchain.Resp
                                           (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                              @ Data.Void.Void @ Data.Void.Void)
                                           Mlabs.Emulator.Blockchain.toConstraints
                                           resps)
                                        (case case input of {
                                                __DEFAULT ->
                                                  GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                                Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                  ds_dhSN [Occ=Once!]
                                                                                  _ [Occ=Dead] ->
                                                  case ds_dhSN of {
                                                    Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                      GHC.Maybe.Just
                                                        @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                    Mlabs.Emulator.Types.Self ->
                                                      GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                  }
                                              }
                                         of {
                                           GHC.Maybe.Nothing ->
                                             Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                               @ Data.Void.Void @ Data.Void.Void;
                                           GHC.Maybe.Just a1 [Occ=Once] ->
                                             Ledger.Constraints.TxConstraints.mustBeSignedBy
                                               @ Data.Void.Void @ Data.Void.Void a1
                                         }),
                                      Plutus.Contract.StateMachine.OnChain.State
                                        @ (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool)
                                        (lid, newData)
                                        (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                   }
                               }
                           }
                           }
Context: Compiling expr: \ (lid :: Mlabs.Lending.Logic.Types.LendexId)
                           (ds_dhzL [Occ=Once!]
                              :: Plutus.Contract.StateMachine.OnChain.State
                                   (Mlabs.Lending.Logic.Types.LendexId,
                                    Mlabs.Lending.Logic.Types.LendingPool))
                           (input :: Mlabs.Lending.Logic.Types.Act) ->
                           case ds_dhzL of
                           { Plutus.Contract.StateMachine.OnChain.State ds_dhS0
                                                                        ds_dhS1 [Occ=Once] ->
                           let {
                             y_sjK1 [Occ=Once] :: Mlabs.Lending.Logic.Types.LendexId
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             y_sjK1
                               = case ds_dhS0 of { (a1 [Occ=Once], _ [Occ=Dead]) -> a1 } } in
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @ GHC.Types.Bool
                                  (PlutusTx.Builtins.Internal.equalsByteString
                                     (lid
                                      `cast` (Nth:2
                                                  (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                   ->_R <GHC.Types.Bool>_R)
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString))
                                     (y_sjK1
                                      `cast` (Nth:2
                                                  (Nth:3
                                                       (Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R Mlabs.Lending.Logic.Types.N:LendexId[0]
                                                        ->_R <GHC.Types.Bool>_R))
                                              :: GHC.Types.Coercible
                                                   Mlabs.Lending.Logic.Types.LendexId
                                                   PlutusTx.Builtins.Internal.BuiltinByteString)))
                                  GHC.Types.True
                                  GHC.Types.False
                           of {
                             GHC.Types.False ->
                               GHC.Maybe.Nothing
                                 @ (Ledger.Constraints.TxConstraints.TxConstraints
                                      Data.Void.Void Data.Void.Void,
                                    Plutus.Contract.StateMachine.OnChain.State
                                      (Mlabs.Lending.Logic.Types.LendexId,
                                       Mlabs.Lending.Logic.Types.LendingPool));
                             GHC.Types.True ->
                               case ((Mlabs.Lending.Logic.React.react input)
                                     `cast` (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                 <Mlabs.Lending.Logic.Types.LendingPool>_N
                                                 <Data.Either.Either
                                                    PlutusTx.Builtins.Internal.BuiltinByteString>_R
                                                 <[Mlabs.Emulator.Blockchain.Resp]>_N
                                             :: GHC.Types.Coercible
                                                  (Control.Monad.Trans.State.Strict.StateT
                                                     Mlabs.Lending.Logic.Types.LendingPool
                                                     (Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                     [Mlabs.Emulator.Blockchain.Resp])
                                                  (Mlabs.Lending.Logic.Types.LendingPool
                                                   -> Data.Either.Either
                                                        PlutusTx.Builtins.Internal.BuiltinByteString
                                                        ([Mlabs.Emulator.Blockchain.Resp],
                                                         Mlabs.Lending.Logic.Types.LendingPool))))
                                      (case ds_dhS0 of { (_ [Occ=Dead], b1 [Occ=Once]) -> b1 })
                               of {
                                 Data.Either.Left _ [Occ=Dead] ->
                                   GHC.Maybe.Nothing
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool));
                                 Data.Either.Right ds_dhRP [Occ=Once!] ->
                                   case ds_dhRP of { (resps, newData [Occ=Once]) ->
                                   GHC.Maybe.Just
                                     @ (Ledger.Constraints.TxConstraints.TxConstraints
                                          Data.Void.Void Data.Void.Void,
                                        Plutus.Contract.StateMachine.OnChain.State
                                          (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool))
                                     (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$c<>
                                        @ Data.Void.Void
                                        @ Data.Void.Void
                                        (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                           @ (Ledger.Constraints.TxConstraints.TxConstraints
                                                Data.Void.Void Data.Void.Void)
                                           @ Mlabs.Emulator.Blockchain.Resp
                                           (Ledger.Constraints.TxConstraints.$fMonoidTxConstraints0
                                              @ Data.Void.Void @ Data.Void.Void)
                                           Mlabs.Emulator.Blockchain.toConstraints
                                           resps)
                                        (case case input of {
                                                __DEFAULT ->
                                                  GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash;
                                                Mlabs.Lending.Logic.Types.UserAct _ [Occ=Dead]
                                                                                  ds_dhSN [Occ=Once!]
                                                                                  _ [Occ=Dead] ->
                                                  case ds_dhSN of {
                                                    Mlabs.Emulator.Types.UserId uid [Occ=Once] ->
                                                      GHC.Maybe.Just
                                                        @ Plutus.V1.Ledger.Crypto.PubKeyHash uid;
                                                    Mlabs.Emulator.Types.Self ->
                                                      GHC.Maybe.Nothing @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                                  }
                                              }
                                         of {
                                           GHC.Maybe.Nothing ->
                                             Ledger.Constraints.TxConstraints.$fMonoidTxConstraints_$cmempty
                                               @ Data.Void.Void @ Data.Void.Void;
                                           GHC.Maybe.Just a1 [Occ=Once] ->
                                             Ledger.Constraints.TxConstraints.mustBeSignedBy
                                               @ Data.Void.Void @ Data.Void.Void a1
                                         }),
                                      Plutus.Contract.StateMachine.OnChain.State
                                        @ (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool)
                                        (lid, newData)
                                        (Mlabs.Emulator.Blockchain.updateRespValue resps ds_dhS1))
                                   }
                               }
                           }
                           }
Context: Compiling definition of: Mlabs.Lending.Contract.StateMachine.transition
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.transition
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.transition lid
Context: Compiling expr: Plutus.Contract.StateMachine.OnChain.StateMachine
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           (Mlabs.Lending.Contract.StateMachine.transition lid)
Context: Compiling expr: Plutus.Contract.StateMachine.OnChain.StateMachine
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           (Mlabs.Lending.Contract.StateMachine.transition lid)
                           ds_dhT0
Context: Compiling expr: Plutus.Contract.StateMachine.OnChain.StateMachine
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           (Mlabs.Lending.Contract.StateMachine.transition lid)
                           ds_dhT0
                           (\ _ [Occ=Dead]
                              (input [Occ=Once!] :: Mlabs.Lending.Logic.Types.Act)
                              (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                              case case input of {
                                     __DEFAULT -> GHC.Maybe.Nothing @ GHC.Integer.Type.Integer;
                                     Mlabs.Lending.Logic.Types.UserAct time [Occ=Once] _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time;
                                     Mlabs.Lending.Logic.Types.PriceAct time [Occ=Once] _ [Occ=Dead]
                                                                        _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time
                                   }
                              of {
                                GHC.Maybe.Nothing -> GHC.Types.True;
                                GHC.Maybe.Just a1 [Occ=Once] ->
                                  Plutus.V1.Ledger.Interval.member
                                    @ Plutus.V1.Ledger.Slot.Slot
                                    Plutus.V1.Ledger.Slot.$fOrdSlot0
                                    (a1
                                     `cast` (Sym (Plutus.V1.Ledger.Slot.N:Slot[0])
                                             :: GHC.Types.Coercible
                                                  GHC.Integer.Type.Integer Plutus.V1.Ledger.Slot.Slot))
                                    (Ledger.TimeSlot.posixTimeRangeToContainedSlotRange
                                       Ledger.TimeSlot.$fDefaultSlotConfig_$cdef
                                       (case case ctx of
                                             { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                             ds1
                                             }
                                        of
                                        { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           ds7 [Occ=Once] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead] ->
                                        ds7
                                        }))
                              })
Context: Compiling expr: Plutus.Contract.StateMachine.OnChain.StateMachine
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           (Mlabs.Lending.Contract.StateMachine.transition lid)
                           ds_dhT0
                           (\ _ [Occ=Dead]
                              (input [Occ=Once!] :: Mlabs.Lending.Logic.Types.Act)
                              (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                              case case input of {
                                     __DEFAULT -> GHC.Maybe.Nothing @ GHC.Integer.Type.Integer;
                                     Mlabs.Lending.Logic.Types.UserAct time [Occ=Once] _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time;
                                     Mlabs.Lending.Logic.Types.PriceAct time [Occ=Once] _ [Occ=Dead]
                                                                        _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time
                                   }
                              of {
                                GHC.Maybe.Nothing -> GHC.Types.True;
                                GHC.Maybe.Just a1 [Occ=Once] ->
                                  Plutus.V1.Ledger.Interval.member
                                    @ Plutus.V1.Ledger.Slot.Slot
                                    Plutus.V1.Ledger.Slot.$fOrdSlot0
                                    (a1
                                     `cast` (Sym (Plutus.V1.Ledger.Slot.N:Slot[0])
                                             :: GHC.Types.Coercible
                                                  GHC.Integer.Type.Integer Plutus.V1.Ledger.Slot.Slot))
                                    (Ledger.TimeSlot.posixTimeRangeToContainedSlotRange
                                       Ledger.TimeSlot.$fDefaultSlotConfig_$cdef
                                       (case case ctx of
                                             { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                             ds1
                                             }
                                        of
                                        { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           ds7 [Occ=Once] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead] ->
                                        ds7
                                        }))
                              })
                           (GHC.Maybe.Nothing
                              @ Plutus.Contract.StateMachine.ThreadToken.ThreadToken)
Context: Compiling expr: let {
                           ds_dhT0 [Occ=Once]
                             :: (Mlabs.Lending.Logic.Types.LendexId,
                                 Mlabs.Lending.Logic.Types.LendingPool)
                                -> GHC.Types.Bool
                           [LclId,
                            Arity=1,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                    WorkFree=True, Expandable=True,
                                    Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
                           ds_dhT0 = \ _ [Occ=Dead] -> GHC.Types.False } in
                         Plutus.Contract.StateMachine.OnChain.StateMachine
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           (Mlabs.Lending.Contract.StateMachine.transition lid)
                           ds_dhT0
                           (\ _ [Occ=Dead]
                              (input [Occ=Once!] :: Mlabs.Lending.Logic.Types.Act)
                              (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                              case case input of {
                                     __DEFAULT -> GHC.Maybe.Nothing @ GHC.Integer.Type.Integer;
                                     Mlabs.Lending.Logic.Types.UserAct time [Occ=Once] _ [Occ=Dead]
                                                                       _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time;
                                     Mlabs.Lending.Logic.Types.PriceAct time [Occ=Once] _ [Occ=Dead]
                                                                        _ [Occ=Dead] ->
                                       GHC.Maybe.Just @ GHC.Integer.Type.Integer time
                                   }
                              of {
                                GHC.Maybe.Nothing -> GHC.Types.True;
                                GHC.Maybe.Just a1 [Occ=Once] ->
                                  Plutus.V1.Ledger.Interval.member
                                    @ Plutus.V1.Ledger.Slot.Slot
                                    Plutus.V1.Ledger.Slot.$fOrdSlot0
                                    (a1
                                     `cast` (Sym (Plutus.V1.Ledger.Slot.N:Slot[0])
                                             :: GHC.Types.Coercible
                                                  GHC.Integer.Type.Integer Plutus.V1.Ledger.Slot.Slot))
                                    (Ledger.TimeSlot.posixTimeRangeToContainedSlotRange
                                       Ledger.TimeSlot.$fDefaultSlotConfig_$cdef
                                       (case case ctx of
                                             { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                                       _ [Occ=Dead] ->
                                             ds1
                                             }
                                        of
                                        { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead]
                                                                           ds7 [Occ=Once] _ [Occ=Dead]
                                                                           _ [Occ=Dead] _ [Occ=Dead] ->
                                        ds7
                                        }))
                              })
                           (GHC.Maybe.Nothing
                              @ Plutus.Contract.StateMachine.ThreadToken.ThreadToken)
Context: Compiling expr: \ (lid [Occ=Once]
                              :: Mlabs.Lending.Logic.Types.LendexId) ->
                           let {
                             ds_dhT0 [Occ=Once]
                               :: (Mlabs.Lending.Logic.Types.LendexId,
                                   Mlabs.Lending.Logic.Types.LendingPool)
                                  -> GHC.Types.Bool
                             [LclId,
                              Arity=1,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                      WorkFree=True, Expandable=True,
                                      Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
                             ds_dhT0 = \ _ [Occ=Dead] -> GHC.Types.False } in
                           Plutus.Contract.StateMachine.OnChain.StateMachine
                             @ (Mlabs.Lending.Logic.Types.LendexId,
                                Mlabs.Lending.Logic.Types.LendingPool)
                             @ Mlabs.Lending.Logic.Types.Act
                             (Mlabs.Lending.Contract.StateMachine.transition lid)
                             ds_dhT0
                             (\ _ [Occ=Dead]
                                (input [Occ=Once!] :: Mlabs.Lending.Logic.Types.Act)
                                (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                                case case input of {
                                       __DEFAULT -> GHC.Maybe.Nothing @ GHC.Integer.Type.Integer;
                                       Mlabs.Lending.Logic.Types.UserAct time [Occ=Once] _ [Occ=Dead]
                                                                         _ [Occ=Dead] ->
                                         GHC.Maybe.Just @ GHC.Integer.Type.Integer time;
                                       Mlabs.Lending.Logic.Types.PriceAct time [Occ=Once] _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                         GHC.Maybe.Just @ GHC.Integer.Type.Integer time
                                     }
                                of {
                                  GHC.Maybe.Nothing -> GHC.Types.True;
                                  GHC.Maybe.Just a1 [Occ=Once] ->
                                    Plutus.V1.Ledger.Interval.member
                                      @ Plutus.V1.Ledger.Slot.Slot
                                      Plutus.V1.Ledger.Slot.$fOrdSlot0
                                      (a1
                                       `cast` (Sym (Plutus.V1.Ledger.Slot.N:Slot[0])
                                               :: GHC.Types.Coercible
                                                    GHC.Integer.Type.Integer Plutus.V1.Ledger.Slot.Slot))
                                      (Ledger.TimeSlot.posixTimeRangeToContainedSlotRange
                                         Ledger.TimeSlot.$fDefaultSlotConfig_$cdef
                                         (case case ctx of
                                               { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                                         _ [Occ=Dead] ->
                                               ds1
                                               }
                                          of
                                          { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             ds7 [Occ=Once] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                                          ds7
                                          }))
                                })
                             (GHC.Maybe.Nothing
                                @ Plutus.Contract.StateMachine.ThreadToken.ThreadToken)
Context: Compiling definition of: Mlabs.Lending.Contract.StateMachine.machine
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.machine
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.machine lid
Context: Compiling expr: Plutus.Contract.StateMachine.OnChain.mkValidator
                           @ (Mlabs.Lending.Logic.Types.LendexId,
                              Mlabs.Lending.Logic.Types.LendingPool)
                           @ Mlabs.Lending.Logic.Types.Act
                           $dToData_agwT
                           (Mlabs.Lending.Contract.StateMachine.machine lid)
Context: Compiling expr: \ (lid [Occ=Once]
                              :: Mlabs.Lending.Logic.Types.LendexId) ->
                           Plutus.Contract.StateMachine.OnChain.mkValidator
                             @ (Mlabs.Lending.Logic.Types.LendexId,
                                Mlabs.Lending.Logic.Types.LendingPool)
                             @ Mlabs.Lending.Logic.Types.Act
                             $dToData_agwT
                             (Mlabs.Lending.Contract.StateMachine.machine lid)
Context: Compiling definition of: Mlabs.Lending.Contract.StateMachine.mkValidator
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.mkValidator
Context: Compiling expr: Mlabs.Lending.Contract.StateMachine.mkValidator
                         `cast` (<Mlabs.Lending.Logic.Types.LendexId>_R
                                 ->_R Sub (Plutus.Contract.StateMachine.OnChain.D:R:DatumTypeStateMachine[0]
                                               <(Mlabs.Lending.Logic.Types.LendexId,
                                                 Mlabs.Lending.Logic.Types.LendingPool)>_N
                                               <Mlabs.Lending.Logic.Types.Act>_N)
                                 ->_R Sub (Plutus.Contract.StateMachine.OnChain.D:R:RedeemerTypeStateMachine[0]
                                               <(Mlabs.Lending.Logic.Types.LendexId,
                                                 Mlabs.Lending.Logic.Types.LendingPool)>_N
                                               <Mlabs.Lending.Logic.Types.Act>_N)
                                 ->_R <Plutus.V1.Ledger.Contexts.ScriptContext -> GHC.Types.Bool>_R
                                 :: GHC.Types.Coercible
                                      (Mlabs.Lending.Logic.Types.LendexId
                                       -> Ledger.Typed.Scripts.Validators.DatumType
                                            (Plutus.Contract.StateMachine.OnChain.StateMachine
                                               (Mlabs.Lending.Logic.Types.LendexId,
                                                Mlabs.Lending.Logic.Types.LendingPool)
                                               Mlabs.Lending.Logic.Types.Act)
                                       -> Ledger.Typed.Scripts.Validators.RedeemerType
                                            (Plutus.Contract.StateMachine.OnChain.StateMachine
                                               (Mlabs.Lending.Logic.Types.LendexId,
                                                Mlabs.Lending.Logic.Types.LendingPool)
                                               Mlabs.Lending.Logic.Types.Act)
                                       -> Plutus.V1.Ledger.Contexts.ScriptContext
                                       -> GHC.Types.Bool)
                                      (Mlabs.Lending.Logic.Types.LendexId
                                       -> (Mlabs.Lending.Logic.Types.LendexId,
                                           Mlabs.Lending.Logic.Types.LendingPool)
                                       -> Mlabs.Lending.Logic.Types.Act
                                       -> Plutus.V1.Ledger.Contexts.ScriptContext
                                       -> GHC.Types.Bool))
Context: Compiling expr at "mlabs-plutus-use-cases-0.1.0.0-inplace:Mlabs.Lending.Contract.StateMachine:(77,10)-(77,44)"

<interactive>:1:18: error:
    parse error (possibly incorrect indentation or mismatched brackets)

<interactive>:2:8: error: parse error on input ‘..’

<interactive>:3:1: error: Variable not in scope: ls

<interactive>:3:4: error:
    Variable not in scope: (-) :: t0 -> t1 -> t

<interactive>:3:5: error: Variable not in scope: lh
Leaving GHCi.
